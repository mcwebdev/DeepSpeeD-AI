{"version":3,"sources":["webpack:///node-fetch (ignored)","webpack:///util (ignored)","webpack:///crypto (ignored)","webpack:///src/app/speech-commands/dataset-vis.js","webpack:///string_decoder (ignored)","webpack:///src/app/sentiment-analysis/sentiment-analysis.component.ts","webpack:///src/app/sentiment-analysis/sentiment-analysis.component.html","webpack:///fs (ignored)?4ea8","webpack:///fs (ignored)","webpack:///src/app/webcam-classifier/webcam-classifier.component.html","webpack:///src/app/webcam-classifier/webcam-classifier.component.ts","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/shared/plotly.service.ts","webpack:///src/app/blockchain/blockchain.component.ts","webpack:///src/app/blockchain/blockchain.component.html","webpack:///src/app/plotly-via-cdn/plotly-via-cdn.module.ts","webpack:///src/app/speech-commands/src/browser_fft_extractor.ts","webpack:///src/app/speech-commands/src/version.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/speech-commands/src/browser_fft_recognizer.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/speech-commands/src/browser_fft_utils.ts","webpack:///src/app/speech-commands/src/training_utils.ts","webpack:///src/app/speech-commands/src/generic_utils.ts","webpack:///src/app/app.module.ts","webpack:///src/app/d3/data.ts","webpack:///src/app/speech-commands/ui.js","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/speech-commands/src/index.ts","webpack:///src/app/image-classifier/image-classifier.component.html","webpack:///src/app/image-classifier/image-classifier.component.ts","webpack:///src/app/loader/loading.guard.ts","webpack:///src/app/route-transition-animations.ts","webpack:///src/app/loader/loader.component.ts","webpack:///src/app/loader/loader.component.html","webpack:///src/app/shared/plot/plot.component.ts","webpack:///src/app/speech-commands/src/dataset.ts","webpack:///src/app/d3/d3.component.ts","webpack:///src/app/d3/d3.component.html","webpack:///src/app/speech-commands/speech-ai.component.html","webpack:///src/app/speech-commands/speech-ai.component.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["removeNonFixedChildrenFromWordDiv","wordDiv","i","children","length","getAttribute","removeChild","getCanvasClickRelativeXCoordinate","canvasElement","event","x","pageX","clientX","document","body","scrollLeft","documentElement","offsetLeft","width","DatasetViz","transferRecognizer","topLevelContainer","minExamplesPerClass","startTransferLearnButton","downloadAsFileButton","transferDurationMultiplier","container","navIndices","words","nativeElement","element","push","word","spectrogram","rawAudio","uid","Error","leftButton","createElement","textContent","appendChild","rightButton","exampleUIDs","getExamples","map","ex","position","indexOf","addEventListener","redraw","disabled","exampleCanvas","style","height","relativeX","numFrames","data","frameSize","keyFrameIndex","Math","floor","console","log","setExampleKeyFrameIndex","modelNumFrames","modelInputShape","pixelsPerFrame","maxPixelWidth","round","window","innerWidth","markKeyFrame","playButton","playRawAudio","deleteButton","removeExample","updateButtons_","divIndex","exampleCounts","isDatasetEmpty","countExamples","examples","example","index","drawExample","words_","minCountByClass","reduce","prev","current","button","displayWord","exampleCount","pos","requiredMinCountPerClass","ceil","SentimentAnalysisComponent","samples","loading","addPredictions","predictions","tableWrapper","querySelector","forEach","d","predictionDom","text","labels","label","join","insertAdjacentHTML","predict","inputs","model","classify","results","obj","classification","match","a","b","outputNodes","split","replace","e","textEl","value","then","selector","templateUrl","styleUrls","WebcamClassifierComponent","_notifications","faVideo","margin","top","right","bottom","left","constraints","audio","video","stream","navigator","mediaDevices","getUserMedia","noWebcam","info","vid","srcObject","setInterval","createChart","predictionsReady","err","error","initSvg","initAxis","drawAxis","drawBars","svgEl","select","remove","svg","append","animVal","g","attr","rangeRound","padding","y","domain","className","call","ticks","selectAll","enter","probability","bandwidth","start","opacity","optional","encapsulation","None","animations","HomeComponent","environment","production","serverUrl","PlotlyService","id","instances","instance","undefined","_plotly","msg","_moduleName","fn","Promise","resolve","localFn","setTimeout","div","layout","config","frames","waitFor","getPlotly","newPlot","insert","plot","react","Plots","resize","moduleName","plotly","splice","purge","providedIn","BlockchainComponent","PlotlyViaCDNModule","plotlyService","setModuleName","setPlotly","init","src","_plotlyBundle","_plotlyVersion","script","type","onerror","head","getElementsByTagName","counter","Plotly","url","version","isOk","test","loadViaCDN","bundle","plotlyBundleNames","names","n","imports","declarations","exports","BrowserFftFeatureExtractor","spectrogramCallback","numFramesPerSpectrogram","suppressionTimeMillis","sampleRateHz","fftSize","frameDurationMillis","columnTruncateLength","overlapFactor","includeRawAudio","assert","audioContextConstructor","audioTrackConstraints","frameIntervalTask","audioContext","sampleRate","warn","streamSource","createMediaStreamSource","analyser","createAnalyser","smoothingTimeConstant","connect","freqDataQueue","freqData","Float32Array","timeDataQueue","timeData","period","max","tracker","Tracker","onAudioFrame","bind","watchInput","paths","getElementById","visualizer","mask","h","hSub","path","seconds","loud_volume_threshold","audioStream","bufferLength","frequencyBinCount","frequencyArray","Uint8Array","setAttribute","createElementNS","doDraw","requestAnimationFrame","getByteFrequencyData","adjustedLength","showVolume","total","rms","sqrt","db","innerHTML","getFloatFrequencyData","Infinity","slice","getFloatTimeDomainData","shift","shouldFire","tick","flattenQueue","freqDataTensor","getInputTensorFromFrequencyData","timeDataTensor","shouldRest","suppress","clearInterval","disconnect","close","getTracks","stop","params","queue","set","shape","vals","sizeFromShape","suppressionPeriod","suppressionTime","suppressionOnset","SharedModule","providers","UNKNOWN_TAG","SAVED_MODEL_METADATA_KEY","SAVE_PATH_PREFIX","localStorageWrapper","localStorage","getMajorAndMinorVersion","versionItems","DEFAULT_WINDOW_HOP_RATIO","BrowserFftSpeechCommandRecognizer","vocabulary","modelArtifactsOrURL","metadataOrURL","MODEL_URL_PREFIX","SAMPLE_RATE_HZ","FFT_SIZE","DEFAULT_SUPPRESSION_TIME_MILLIS","streaming","transferRecognizers","DEFAULT_VOCABULARY_NAME","VALID_VOCABULARY_NAMES","parameters","callback","ensureModelLoaded","probabilityThreshold","includeEmbedding","invokeCallbackOnNoiseAndUnknown","normalizedX","ensureModelWithEmbeddingOutputCreated","modelWithEmbeddingOutput","embedding","scores","maxIndexTensor","argMax","maxIndex","maxScore","includeSpectrogram","nonBatchInputShape","wordDetected","audioDataExtractor","ensureMetadataLoaded","fromMemory","modelTopology","weightSpecs","weightData","JSON","stringify","outputShape","freezeModel","elementsPerExample","dimSize","warmUpModel","spectrogramDurationMillis","layers","getClassName","secondLastDenseLayer","outputs","output","concat","metadataJSON","wordLabels","legacyWords","input","recognizeOnline","spectrogramData","checkInputTensorShape","inputTensor","numExamples","outAndEmbedding","outTensor","unstacked","scorePromises","item","all","reject","dispose","name","transfer","TransferBrowserFftSpeechCommandRecognizer","layer","trainable","expectedRank","nonBatchedShape","expectedNonBatchShape","arraysEqual","baseModel","dataset","options","durationMultiplier","durationSec","frameDurationSec","snippetDurationSec","onSnippet","totalDurationSec","stepFactor","callbackCountTarget","callbackCount","lastIndex","spectrogramSnippets","addExample","collateTransferWords","increment","snippetData","normalized","finalSpectrogram","empty","clear","getExampleCounts","serialized","clearExisting","incomingDataset","clearExamples","incomingVocab","getVocabulary","serialize","windowHopRatio","augmentationOptions","hopFrames","out","getData","xs","ys","validationSplit","batchSize","getDataset","datasetBatchSize","datasetValidationSplit","fineTuningEpochs","Number","isInteger","createTransferModelFromBaseModel","secondLastBaseDenseLayer","compile","loss","optimizer","metrics","datasetDurationMillisThreshold","fitDatasetDurationMillisThreshold","durationMillis","trainOnDataset","trainOnTensors","epochs","collectTransferDataAsTfDataset","augmentByMixingNoiseRatio","trainDataset","valDataset","t0","now","fitDataset","validationData","callbacks","history","toFixed","fineTuningUsingTfDatasets","fineTuningHistory","collectTransferDataAsTensors","splits","trainXs","trainYs","valData","valXs","valYs","fit","fineTuningUsingTensors","originalTrainableValue","fineTuningOptimizer","fineTuningCallback","wordProbThresholds","NOISE_CLASS_INDEX","rocCurve","auc","indices","dataSync","probs","maxWordProbs","probThreshold","isWord","greater","negatives","positives","falsePositives","truePositives","fpr","tpr","abs","layerIndex","toLowerCase","truncatedBaseOutput","transferHead","add","dense","units","activation","inputShape","transferOutput","apply","tfjsSpeechCommandsVersion","modelName","timeStamp","Date","toISOString","handlerOrURL","isCustomPath","getCanonicalSavePath","metadataMapStr","getItem","metadataMap","parse","getMetadata","setItem","save","summary","listSavedTransferModels","listModels","models","keys","key","startsWith","deleteSavedTransferModel","removeModel","AppComponent","oktaAuth","router","titleService","metaService","title","faEnvelope","$authenticationState","subscribe","isAuthenticated","events","auth","getUser","userClaims","setTitle","addTags","content","property","outlet","activatedRouteData","loginRedirect","logout","loadMetadataJson","HTTP_SCHEME","HTTPS_SCHEME","FILE_SCHEME","fetch","response","json","parsed","fs","readFile","encoding","EPSILON","normalize","epsilon","mean","variance","sub","normalizeFloat32Array","meanVal","arraySync","stdVal","yArray","Array","from","getAudioContextConstructor","AudioContext","webkitAudioContext","getAudioMediaStream","onEnded","arrayBuffer","createBuffer","nowBuffering","getChannelData","source","createBufferSource","buffer","destination","onended","balancedTrainValSplit","valSplit","classIndices","indicesByClasses","classIndex","numClasses","trainIndices","valIndices","shuffle","cutoff","j","balancedTrainValSplitNumArrays","isXsFloat32Array","isArray","concatenateArrayBuffers","buffers","totalByteLength","byteLength","temp","offset","concatenateFloat32Arrays","totalLength","concatenated","string2ArrayBuffer","str","strUTF8","unescape","encodeURIComponent","buf","charCodeAt","arrayBuffer2String","decodeURIComponent","escape","String","fromCharCode","getUID","s4","random","toString","substring","getRandomInteger","min","plotlyVersion","AppModule","provide","useClass","forRoot","initAuth","issuer","redirectUri","clientId","bootstrap","SAMPLE_DATA","State","statusDisplay","candidateWordsContainer","logToStatusDisplay","message","date","scrollTop","scrollHeight","candidateWordSpans","populateCandidateWords","firstChild","wordSpan","classList","showCandidateWords","hideCandidateWords","plotSpectrogram","canvas","frequencyData","fftDisplaySize","context","getContext","clearRect","realWidth","pixelWidth","pixelHeight","spectrum","subarray","colorValue","pow","colorTuning","fillStyle","fillRect","strokeStyle","beginPath","moveTo","lineTo","stroke","plotPredictions","candidateWords","probabilities","topK","timeToLiveMillis","wordsAndProbs","sort","topWord","toTimeString","HeaderComponent","create","fftType","customModelArtifactsOrURL","customMetadataOrURL","utils","ImageClassifierComponent","el","faImage","myStyle","myParams","classNames","changeClass","particles","number","color","target","files","reader","FileReader","readAsDataURL","onload","res","imageSrc","result","imgEl","imageEl","fileChangeEvent","LoadingGuard","loader$","loader","pipe","route","state","next","obs","complete","routeTransitionAnimations","LoaderComponent","PlotComponent","iterableDiffers","keyValueDiffers","defaultClassName","datarevision","revision","debug","useResizeHandler","initialized","update","afterExport","afterPlot","animated","animatingFrame","animationInterrupted","autoSize","beforeExport","buttonClicked","click","plotly_click","clickAnnotation","deselect","doubleClick","framework","hover","legendClick","legendDoubleClick","relayout","restyle","selected","selecting","sliderChange","sliderEnd","sliderStart","transitioning","transitionInterrupted","unhover","relayouting","eventNames","createPlot","figure","createFigure","emit","observers","resizeHandler","getWindow","removeEventListener","plotlyInstance","changes","shouldUpdate","isFirstChange","updatePlot","updateWindowResizeHandler","layoutDiffer","layoutHasDiff","diff","find","dataDiffer","dataHasDiff","dataDifferTrackBy","classes","plotEl","gd","eventName","on","p","_transitionData","_frames","_","Object","assign","template","divId","DATASET_SERIALIZATION_DESCRIPTOR","DATASET_SERIALIZATION_VERSION","BACKGROUND_NOISE_TAG","Dataset","label2Ids","artifacts","arrayBuffer2SerializedExamples","manifest","spec","byteLen","spectrogramNumFrames","spectrogramFrameSize","rawAudioNumSamples","deserializeExample","vocab","counts","size","sortedUniqueNumFrames","getSortedUniqueNumFrames","toNormalize","xTensors","xArrays","labelIndices","uniqueFrameSize","currentLabel","ids","snippetLength","focusIndex","getMaxIntensityFrameIndex","snippet","windows","getValidWindows","windowedSnippet","augmentByMixingNoise","zippedXandYArrays","xArray","yArrays","xTrain","array","yTrain","squeeze","zip","batch","prefetch","xVal","yVal","zipped","xTensor","targets","asType","ratio","isTypedArray","noiseExampleIndices","wordExampleIndices","mixedXTensors","mixedLabelIndices","noiseIndex","signalTensor","noiseTensor","mixed","mul","tensor","numFramesSet","Set","uniqueNumFrames","durMillis","DEFAULT_FRAME_DUR_MILLIS","frameDurMillis","sortedVocab","wordLabel","artifact","serializeExample","serializedExamples2ArrayBuffer","hasRawAudio","spectrogramKeyFrameIndex","rawAudioSampleRateHz","manifestBuffer","descriptorBuffer","Uint32Array","manifestLength","headerBuffer","descriptor","manifestBeginByte","manifestBytes","manifestString","windowLength","windowHop","begin","leftHalf","spectrogram2IntensityCurve","D3Component","val2","trainLossValues","valLossValues","graph","autosize","c","interval","rand","trace1","trace2","trace3","mode","line","initMargins","drawChart","paddingInner","align","z","range","getOwnPropertyNames","v","nice","pop","legend","reverse","SpeechCommandComponent","renderer","collectWordButtons","learnWords","epochsInput","fineTuningEpochsInput","probaThresholdInput","enterLearnWordsTextContent","loadTransferModelButtonTextContent","saveTransferModelButtonTextContent","deleteTransferModelButtonTextContent","evalModelOnDatasetButtonTextContent","uploadFilesButtonTextContent","startTransferLearnButtonTextContent","evalResultsSpan","trainAccValues","valAccValues","draggable","useHandle","zIndex","preventDefaultEvent","trackPosition","isDeleteTransferModelBtnDisabled","isSaveTransferModelBtnDisabled","isEvalModelOnDatasetBtnDisabled","isDownloadAsFileBtnDisabled","XFER_MODEL_NAME","MIN_EXAMPLES_PER_CLASS","retry","isDone","current_trial","max_retry","is_timeout","isIE10OrLater","user_agent","ua","exec","parseInt","detectPrivateMode","is_private","webkitRequestFileSystem","TEMPORARY","indexedDB","userAgent","open","readyState","removeItem","recognizer","populateSavedTransferModelsSelect","savedTransferModelsSelect","preTrained","isStartBtnDisabled","isStopBtnDisabled","isEnterLearnWordsBtnDisabled","isLoadTransferModelBtnDisabled","transferModelName","getDateString","savedModelKeys","option","createTransfer","load","isTransferModelNameInputDisabled","isLearnWordsInputDisabled","isDurationMultiplierSelectDisabled","loadExamples","transferWords","durationMultipliers","createWordDivs","datasetViz","redrawAll","isStartTransferLearnBtnDisabled","INITIAL_PHASE","FINE_TUNING_PHASE","disableAllCollectWordButtons","augmentByMixingNoiseRatioCheckbox","checked","phase","phaseSuffix","lineWidth","train","onEpochEnd","epoch","logs","displayEpoch","plotLossAndAccuracy","acc","val_loss","val_acc","showCharts","graphTrainLoss","trainLossValuesCollection","xaxis","yaxis","font","plot_bgcolor","paper_bgcolor","graphAccuracy","accuracyValuesCollection","canSaveModel","activeRecognizer","listen","predictionCanvas","stopListening","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","scrollingElement","parentElement","progressBar","intervalJob","collectButtonsDiv","wordDivs","durationInput","timeUnitSpan","collectExampleOptions","parseFloat","barAndJob","createProgressBarAndIntervalJob","tempCanvas","tempSpectrogramData","includeTimeDomainWaveformCheckbox","collectExample","enableAllCollectWordButtons","isDatasetFileInputDisabled","isUploadFilesBtnDisabled","disableFileUploadControls","durationMultiplierSelect","trim","w","basename","serializeExamples","anchor","download","href","URL","createObjectURL","Blob","datasetFileInput","datasetFileReader","loadDatasetInTransferRecognizer","originalTextContent","dataFile","readAsArrayBuffer","evaluate","evalResult","rocDataForPlot","marker","roc","prediction","plotPrediction","precision","estimates","configureCommands","createNewSpeachCommands","loadTransferModel","deleteTransferModel","routes","component","canActivate","animationState","redirectTo","AppRoutingModule","bootstrapModule","webpackEmptyAsyncContext","req","code","module"],"mappings":"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","file":"main-es5.js","sourcesContent":["/* (ignored) */","/* (ignored) */","/* (ignored) */","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as speechCommands from './src';\r\n\r\nimport { plotSpectrogram } from './ui.js';\r\n\r\n/** Remove the children of a div that do not have the isFixed attribute. */\r\nexport function removeNonFixedChildrenFromWordDiv(wordDiv) {\r\n  for (let i = wordDiv.children.length - 1; i >= 0; --i) {\r\n    if (wordDiv.children[i].getAttribute('isFixed') == null) {\r\n      wordDiv.removeChild(wordDiv.children[i]);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get the relative x-coordinate of a click event in a canvas.\r\n *\r\n * @param {HTMLCanvasElement} canvasElement The canvas in which the click\r\n *   event happened.\r\n * @param {Event} event The click event object.\r\n * @return {number} The relative x-coordinate: a `number` between 0 and 1.\r\n */\r\nfunction getCanvasClickRelativeXCoordinate(canvasElement, event) {\r\n  let x;\r\n  if (event.pageX) {\r\n    x = event.pageX;\r\n  } else {\r\n    x = event.clientX + document.body.scrollLeft +\r\n      document.documentElement.scrollLeft;\r\n  }\r\n  x -= canvasElement.offsetLeft;\r\n  return x / canvasElement.width;\r\n}\r\n\r\n/**\r\n * Dataset visualizer that supports\r\n *\r\n * - Display of words and spectrograms\r\n * - Navigation through examples\r\n * - Deletion of examples\r\n */\r\nexport class DatasetViz {\r\n  /**\r\n   * Constructor of DatasetViz\r\n   *\r\n   * @param {Object} transferRecognizer An instance of\r\n   *   `speechCommands.TransferSpeechCommandRecognizer`.\r\n   * @param {HTMLDivElement} topLevelContainer The div element that\r\n   *   holds the div elements for the individual words. It is assumed\r\n   *   that each element has its \"word\" attribute set to the word.\r\n   * @param {number} minExamplesPerClass Minimum number of examples\r\n   *   per word class required for the start-transfer-learning button\r\n   *   to be enabled.\r\n   * @param {HTMLButtonElement} startTransferLearnButton The button\r\n   *   which starts the transfer learning when clicked.\r\n   * @param {HTMLBUttonElement} downloadAsFileButton The button\r\n   *   that triggers downloading of the dataset as a file when clicked.\r\n   * @param {number} transferDurationMultiplier Optional duration\r\n   *   multiplier (the ratio between the length of the example\r\n   *   and the length expected by the model.) Defaults to 1.\r\n   */\r\n  constructor(\r\n    transferRecognizer, topLevelContainer, minExamplesPerClass,\r\n    startTransferLearnButton, downloadAsFileButton,\r\n    transferDurationMultiplier = 1) {\r\n    this.transferRecognizer = transferRecognizer;\r\n    this.container = topLevelContainer;\r\n    this.minExamplesPerClass = minExamplesPerClass;\r\n    this.startTransferLearnButton = startTransferLearnButton;\r\n    this.downloadAsFileButton = downloadAsFileButton;\r\n    this.transferDurationMultiplier = transferDurationMultiplier;\r\n\r\n    // Navigation indices for the words.\r\n    this.navIndices = {};\r\n  }\r\n\r\n  /** Get the set of words in the dataset visualizer. */\r\n  words_() {\r\n    const words = [];\r\n    for (const element of this.container.nativeElement.children) {\r\n      words.push(element.getAttribute('word'));\r\n    }\r\n    return words;\r\n  }\r\n\r\n  /**\r\n   * Draw an example.\r\n   *\r\n   * @param {HTMLDivElement} wordDiv The div element for the word. It is assumed\r\n   *   that it contains the word button as the first child and the canvas as the\r\n   *   second.\r\n   * @param {string} word The word of the example being added.\r\n   * @param {SpectrogramData} spectrogram Optional spectrogram data.\r\n   *   If provided, will use it as is. If not provided, will use WebAudio\r\n   *   to collect an example.\r\n   * @param {RawAudio} rawAudio Raw audio waveform. Optional\r\n   * @param {string} uid UID of the example being drawn. Must match the UID\r\n   *   of the example from `this.transferRecognizer`.\r\n   */\r\n  async drawExample(wordDiv, word, spectrogram, rawAudio, uid) {\r\n    if (uid == null) {\r\n      throw new Error('Error: UID is not provided for pre-existing example.');\r\n    }\r\n\r\n    removeNonFixedChildrenFromWordDiv(wordDiv);\r\n\r\n    // Create the left and right nav buttons.\r\n    const leftButton = document.createElement('button');\r\n    leftButton.textContent = '←';\r\n    wordDiv.appendChild(leftButton);\r\n\r\n    const rightButton = document.createElement('button');\r\n    rightButton.textContent = '→';\r\n    wordDiv.appendChild(rightButton);\r\n\r\n    // Determine the position of the example in the word of the dataset.\r\n    const exampleUIDs =\r\n      this.transferRecognizer.getExamples(word).map(ex => ex.uid);\r\n    const position = exampleUIDs.indexOf(uid);\r\n    this.navIndices[word] = exampleUIDs.indexOf(uid);\r\n\r\n    if (position > 0) {\r\n      leftButton.addEventListener('click', () => {\r\n        this.redraw(word, exampleUIDs[position - 1]);\r\n      });\r\n    } else {\r\n      leftButton.disabled = true;\r\n    }\r\n\r\n    if (position < exampleUIDs.length - 1) {\r\n      rightButton.addEventListener('click', () => {\r\n        this.redraw(word, exampleUIDs[position + 1]);\r\n      });\r\n    } else {\r\n      rightButton.disabled = true;\r\n    }\r\n\r\n    // Spectrogram canvas.\r\n    const exampleCanvas = document.createElement('canvas');\r\n    exampleCanvas.style['display'] = 'inline-block';\r\n    exampleCanvas.style['vertical-align'] = 'middle';\r\n    exampleCanvas.height = 60;\r\n    exampleCanvas.width = 80;\r\n    exampleCanvas.style['padding'] = '3px';\r\n\r\n    // Set up the click callback for the spectrogram canvas. When clicked,\r\n    // the keyFrameIndex will be set.\r\n    if (word !== speechCommands.BACKGROUND_NOISE_TAG) {\r\n      exampleCanvas.addEventListener('click', event => {\r\n        const relativeX =\r\n          getCanvasClickRelativeXCoordinate(exampleCanvas, event);\r\n        const numFrames = spectrogram.data.length / spectrogram.frameSize;\r\n        const keyFrameIndex = Math.floor(numFrames * relativeX);\r\n        console.log(\r\n          `relativeX=${relativeX}; ` +\r\n          `changed keyFrameIndex to ${keyFrameIndex}`);\r\n        this.transferRecognizer.setExampleKeyFrameIndex(uid, keyFrameIndex);\r\n        this.redraw(word, uid);\r\n      });\r\n    }\r\n\r\n    wordDiv.appendChild(exampleCanvas);\r\n\r\n    const modelNumFrames = this.transferRecognizer.modelInputShape()[1];\r\n    await plotSpectrogram(\r\n      exampleCanvas, spectrogram.data, spectrogram.frameSize,\r\n      spectrogram.frameSize, {\r\n        pixelsPerFrame: exampleCanvas.width / modelNumFrames,\r\n        maxPixelWidth: Math.round(0.4 * window.innerWidth),\r\n        markKeyFrame: this.transferDurationMultiplier > 1 &&\r\n          word !== speechCommands.BACKGROUND_NOISE_TAG,\r\n        keyFrameIndex: spectrogram.keyFrameIndex\r\n      });\r\n\r\n    if (rawAudio != null) {\r\n      const playButton = document.createElement('button');\r\n      playButton.textContent = '▶️';\r\n      playButton.addEventListener('click', () => {\r\n        playButton.disabled = true;\r\n        speechCommands.utils.playRawAudio(\r\n          rawAudio, () => playButton.disabled = false);\r\n      });\r\n      wordDiv.appendChild(playButton);\r\n    }\r\n\r\n    // Create Delete button.\r\n    const deleteButton = document.createElement('button');\r\n    deleteButton.textContent = 'X';\r\n    wordDiv.appendChild(deleteButton);\r\n\r\n    // Callback for delete button.\r\n    deleteButton.addEventListener('click', () => {\r\n      this.transferRecognizer.removeExample(uid);\r\n      // TODO(cais): Smarter logic for which example to draw after deletion.\r\n      // Right now it always redraws the last available one.\r\n      this.redraw(word);\r\n    });\r\n\r\n    this.updateButtons_();\r\n  }\r\n\r\n  /**\r\n   * Redraw the spectrogram and buttons for a word.\r\n   *\r\n   * @param {string} word The word being redrawn. This must belong to the\r\n   *   vocabulary currently held by the transferRecognizer.\r\n   * @param {string} uid Optional UID for the example to render. If not\r\n   *   specified, the last available example of the dataset will be drawn.\r\n   */\r\n  async redraw(word, uid) {\r\n    if (word == null) {\r\n      throw new Error('word is not specified');\r\n    }\r\n    let divIndex;\r\n    for (divIndex = 0; divIndex < this.container.nativeElement.children.length; ++divIndex) {\r\n      if (this.container.nativeElement.children[divIndex].getAttribute('word') === word) {\r\n        break;\r\n      }\r\n    }\r\n    if (divIndex === this.container.nativeElement.children.length) {\r\n      throw new Error(`Cannot find div corresponding to word ${word}`);\r\n    }\r\n    const wordDiv = this.container.nativeElement.children[divIndex];\r\n    const exampleCounts = this.transferRecognizer.isDatasetEmpty() ?\r\n      {} :\r\n      this.transferRecognizer.countExamples();\r\n\r\n    if (word in exampleCounts) {\r\n      const examples = this.transferRecognizer.getExamples(word);\r\n      let example;\r\n      if (uid == null) {\r\n        // Example UID is not specified. Draw the last one available.\r\n        example = examples[examples.length - 1];\r\n      } else {\r\n        // Example UID is specified. Find the example and update navigation\r\n        // indices.\r\n        for (let index = 0; index < examples.length; ++index) {\r\n          if (examples[index].uid === uid) {\r\n            example = examples[index];\r\n          }\r\n        }\r\n      }\r\n\r\n      const spectrogram = example.example.spectrogram;\r\n      await this.drawExample(\r\n        wordDiv, word, spectrogram, example.example.rawAudio, example.uid);\r\n    } else {\r\n      removeNonFixedChildrenFromWordDiv(wordDiv);\r\n    }\r\n\r\n    this.updateButtons_();\r\n  }\r\n\r\n  /**\r\n   * Redraw the spectrograms and buttons for all words.\r\n   *\r\n   * For each word, the last available example is rendered.\r\n   **/\r\n  redrawAll() {\r\n    for (const word of this.words_()) {\r\n      this.redraw(word);\r\n    }\r\n  }\r\n\r\n  /** Update the button states according to the state of transferRecognizer. */\r\n  updateButtons_() {\r\n    const exampleCounts = this.transferRecognizer.isDatasetEmpty() ?\r\n      {} :\r\n      this.transferRecognizer.countExamples();\r\n    const minCountByClass =\r\n      this.words_()\r\n        .map(word => exampleCounts[word] || 0)\r\n        .reduce((prev, current) => current < prev ? current : prev);\r\n\r\n    for (const element of this.container.nativeElement.children) {\r\n      const word = element.getAttribute('word');\r\n      const button = element.children[0];\r\n      const displayWord =\r\n        word === speechCommands.BACKGROUND_NOISE_TAG ? 'noise' : word;\r\n      const exampleCount = exampleCounts[word] || 0;\r\n      if (exampleCount === 0) {\r\n        button.textContent = `${displayWord} (${exampleCount})`;\r\n      } else {\r\n        const pos = this.navIndices[word] + 1;\r\n        button.textContent = `${displayWord} (${pos}/${exampleCount})`;\r\n      }\r\n    }\r\n\r\n    const requiredMinCountPerClass =\r\n      Math.ceil(this.minExamplesPerClass / this.transferDurationMultiplier);\r\n    if (minCountByClass >= requiredMinCountPerClass) {\r\n      this.startTransferLearnButton.nativeElement.textContent = 'Start transfer learning';\r\n      this.startTransferLearnButton.nativeElement.disabled = false;\r\n    } else {\r\n      this.startTransferLearnButton.nativeElement.textContent =\r\n        `Need at least ${requiredMinCountPerClass} examples per word`;\r\n      this.startTransferLearnButton.nativeElement.disabled = true;\r\n    }\r\n\r\n    this.downloadAsFileButton.disabled =\r\n      this.transferRecognizer.isDatasetEmpty();\r\n  }\r\n}\r\n","/* (ignored) */","import { Component, OnInit } from '@angular/core';\r\n//import '@tensorflow/tfjs-backend-webgl';\r\nimport '@tensorflow/tfjs-backend-cpu';\r\nimport * as toxicity from '@tensorflow-models/toxicity';\r\n\r\n@Component({\r\n  selector: 'app-sentiment-analysis',\r\n  templateUrl: './sentiment-analysis.component.html',\r\n  styleUrls: ['./sentiment-analysis.component.scss']\r\n})\r\nexport class SentimentAnalysisComponent implements OnInit {\r\n  samples:any = [\r\n    {\r\n      'id': '002261b0415c4f9d',\r\n      'text':\r\n        'We\\'re dudes on computers, moron.  You are quite astonishingly stupid.'\r\n    },\r\n    {\r\n      'id': '0027160ca62626bc',\r\n      'text':\r\n        'Please stop. If you continue to vandalize Wikipedia, as you did to Kmart, you will be blocked from editing.'\r\n    },\r\n    {\r\n      'id': '002fb627b19c4c0b',\r\n      'text':\r\n        'I respect your point of view, and when this discussion originated on 8th April I would have tended to agree with you.'\r\n    }\r\n  ];\r\n\r\n  model;\r\n  labels;\r\n  a;\r\n  b;\r\n  loading = false;\r\n\r\n  constructor() {\r\n  \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.predict()\r\n\r\n  }\r\n\r\n  async classify(inputs) {\r\n    const results = await this.model.classify(inputs);\r\n    return inputs.map((d, i) => {\r\n      const obj = { 'text': d };\r\n      results.forEach((classification) => {\r\n        obj[classification.label] = classification.results[i].match;\r\n      });\r\n      return obj;\r\n    });\r\n  }\r\n\r\n\r\n  addPredictions = (predictions) => {\r\n\r\n    const tableWrapper = document.querySelector('#table-wrapper');\r\n\r\n    predictions.forEach(d => {\r\n      const predictionDom = `<div class=\"sentimentrow\">\r\n      <div class=\"text\">${d.text}</div>\r\n      ${\r\n        this.labels\r\n          .map(\r\n            label => {\r\n              return `<div class=\"${\r\n                'label' +\r\n                (d[label] === true ? ' positive' :\r\n                  '')}\">${d[label]}</div>`\r\n            })\r\n          .join('')}\r\n    </div>`;\r\n      tableWrapper.insertAdjacentHTML('beforeend', predictionDom);\r\n    });\r\n    this.loading = false;\r\n  };\r\n\r\n  async predict() {\r\n    this.loading = true;\r\n    this.model = await toxicity.load(this.a, this.b);\r\n    this.labels = this.model.model.outputNodes.map(d => d.split('/')[0]);\r\n    const tableWrapper = document.querySelector('#table-wrapper');\r\n    tableWrapper.insertAdjacentHTML(\r\n      'beforeend', `<div class=\"sentimentrow\">\r\n    <div class=\"text\">TEXT</div>\r\n    ${this.labels.map(label => {\r\n        return `<div class=\"label\">${label.replace('_', ' ')}</div>`;\r\n      }).join('')}\r\n  </div>`);\r\n\r\n    const predictions = await this.classify(this.samples.map(d => d.text));\r\n    this.addPredictions(predictions);\r\n    this.loading = false;\r\n    document.querySelector('#classify-new-text')\r\n      .addEventListener('click', (e) => {\r\n        const textEl = <HTMLInputElement>document.querySelector('#classify-new-text-input');\r\n        const text = textEl.value;\r\n        this.loading = true;\r\n        const predictions = this.classify([text]).then(d => {\r\n          this.addPredictions(d);\r\n        });\r\n      });\r\n  };\r\n\r\n}\r\n","<div id='main' fxLayout=\"row\" fxLayoutAlign=\"start start\" style=\"min-height:350px;\">\r\n  <div fxFlex=\"20\" class=\"description\" fxFlexFill>\r\n    This is a demo of the toxicity model, which classifies text according to whether it exhibits offensive attributes\r\n    (i.e. profanity, sexual explicitness). The samples in the table below were taken from this\r\n    <a href=\"https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/data\">Kaggle dataset</a>\r\n  </div>\r\n  <div fxFlex=\"80\">\r\n    <div id=\"table-wrapper\"></div>\r\n  </div>\r\n</div>\r\n<div fxLayout=\"column\" layout-margin>\r\n  <div fxLayout=\"row\">\r\n    <p fxFlex=\"33\">Enter text below and click 'Classify' to add it to the table.</p>\r\n  </div>\r\n  <div fxLayout=\"row\">\r\n    <div fxFlex=\"33\">\r\n      <input fxFlex id=\"classify-new-text-input\" placeholder=\"i.e. 'you suck'\">\r\n      <div id=\"classify-new-text\">Classify</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div [hidden]=\"!loading\" class=\"blockUi\"></div>\r\n","/* (ignored) */","/* (ignored) */","<div [hidden]=\"loading\" fxLayout=\"row\" fxLayoutAlign=\"start start\">\r\n  <div class=\"videoNode\" fxLayout=\"column\" fxFlex=\"50\">\r\n    <button class=\"callout\" (click)=\"start()\"> <fa-icon [icon]=\"faVideo\" style=\"max-height: none;\"></fa-icon>  Start Classifying Webcam Input</button>\r\n    <video autoplay playsinline muted id=\"webcam\" #video></video>\r\n    <div *ngIf=\"predictions\" class=\"list-group\" [@listAnimation]=\"predictions.length\" fxLayout=\"row\" fxFlex>\r\n      <div class=\"list-group-item\" *ngFor=\"let prediction of predictions\">\r\n        {{prediction.className}} - {{prediction.probability}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <svg #svg id=\"svg\" width=\"960\" height=\"500\"></svg>\r\n</div>\r\n<div [hidden]=\"!loading\" class=\"blockUi\"></div>\r\n","import { Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation } from \"@angular/core\";\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\nimport { Prediction } from 'src/services/prediction';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs';\nimport * as d3 from 'd3';\r\nimport * as d3Scale from 'd3-scale';\r\nimport * as d3Array from 'd3-array';\r\nimport * as d3Axis from 'd3-axis';\r\nimport { NotificationsService } from 'angular2-notifications';\nimport { faVideo } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-webcam-classifier',\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: './webcam-classifier.component.html',\n  styleUrls: ['./webcam-classifier.component.scss'],\n  animations: [\r\n    trigger('listAnimation', [\r\n      transition('* => *', [ // each time the binding value changes\r\n        query(':leave', [\r\n          stagger(100, [\r\n            animate('0.5s', style({ opacity: 0 }))\r\n          ])\r\n        ], { optional: true }),\r\n        query(':enter', [\r\n          style({ opacity: 0 }),\r\n          stagger(100, [\r\n            animate('0.5s', style({ opacity: 1 }))\r\n          ])\r\n        ])\r\n      ])\r\n    ])\r\n  ]\n})\nexport class WebcamClassifierComponent implements OnInit {\n\n  @ViewChild(\"video\", { static: false }) video: ElementRef;\n  @ViewChild(\"svg\", { static: false }) svgEl: ElementRef;\n  @Input()\n  predictions: Prediction[];\n  model: any;\n  loading = true;\n  noWebcam: boolean;\n  faVideo = faVideo;\n  private width: number;\r\n  private height: number;\r\n  private margin = { top: 20, right: 20, bottom: 30, left: 40 };\r\n  private x: any;\r\n  private y: any;\r\n  private svg: any;\r\n  private g: any;\n  constraints = { audio: true, video: true }; \n  constructor(private _notifications: NotificationsService) { }\n\n  async ngOnInit() {\n    let stream = null;\r\n\r\n    try {\r\n      stream = await navigator.mediaDevices.getUserMedia(this.constraints);\r\n      this.noWebcam = false;\r\n    } catch (err) {\r\n      this.noWebcam = true;\r\n      this._notifications.info(\"No Webcam Detected. Plug in webcam and refresh the page.\");\r\n    }\n\n    if (this.noWebcam === false) {\n        console.log('loading mobilenet model...');\n        this.model = await mobilenet.load();\r\n      \n    console.log('Sucessfully loaded model');\n      this.loading = false;\r\n    }\n\n    \n  }\n\n  async start() {\n    const vid = this.video.nativeElement;\n\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        vid.srcObject = stream;\n        setInterval(async () => {\n          this.predictions = await this.model.classify(this.video.nativeElement);\n          await tf.nextFrame();\n          this.createChart();\r\n          this.predictionsReady();\n        }, 3000);\n      })\n      .catch((err) => {\n        this.noWebcam = true;\n        this._notifications.error('Error', 'No Webcam Detected. Plug in webcam and refresh the page.', Error)\n        console.log('Something went wrong!');\n      });\n  }\n\n  private createChart(): void {\r\n    this.initSvg();\r\n    this.initAxis();\r\n    this.drawAxis();\r\n    this.drawBars();\r\n  }\n\n  private initSvg() {\r\n    const element = this.svgEl.nativeElement;\r\n    d3.select(element).select('svg#svg svg').remove();\r\n    this.svg = d3.select(element).append('svg');\r\n    this.width = element.width.animVal.value - this.margin.left - this.margin.right;\r\n    this.height = element.height.animVal.value - this.margin.top - this.margin.bottom;\r\n    this.g = this.svg.append('g')\r\n      .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');\r\n  }\r\n\r\n  private initAxis() {\r\n    this.x = d3Scale.scaleBand().rangeRound([0, this.width]).padding(0.1);\r\n    this.y = d3Scale.scaleLinear().rangeRound([this.height, 0]);\r\n    this.x.domain(this.predictions.map((d) => d.className));\r\n    //Uncomment to make x-axis relative\r\n    //this.y.domain([0, d3Array.max(this.predictions, (d) => d.probability)]);\r\n  }\r\n\r\n  private drawAxis() {\r\n    this.g.append('g')\r\n      .attr('class', 'axis axis--x')\r\n      .attr('transform', 'translate(0,' + this.height + ')')\r\n      .call(d3Axis.axisBottom(this.x));\r\n    this.g.append('g')\r\n      .attr('class', 'axis axis--y')\r\n      .call(d3Axis.axisLeft(this.y).ticks(10, '%'))\r\n      .append('text')\r\n      .attr('class', 'axis-title')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', 6)\r\n      .attr('dy', '0.71em')\r\n      .attr('text-anchor', 'end')\r\n      .text('Frequency');\r\n  }\r\n\r\n  private drawBars() {\r\n    this.g.selectAll('.bar')\r\n      .data(this.predictions)\r\n      .enter().append('rect')\r\n      .attr('class', 'bar')\r\n      .attr(\"fill\", \"#1461ac\")\r\n      .attr('stroke', '#0f508f')\r\n      .attr('x', (d) => this.x(d.className))\r\n      .attr('y', (d) => this.y(d.probability))\r\n      .attr('width', this.x.bandwidth())\r\n      .attr('height', (d) => this.height - this.y(d.probability));\r\n  }\r\n\r\n  predictionsReady() {\r\n    this.loading = false;\r\n  }\n  \n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"container page-content\">\r\n  <h1 fxLayout=\"column\" fxLayoutAlign=\"space-between center\" style=\"padding-top: 50px;\">\r\n    <span class=\"ng\">Angular</span><span>AI<span class=\"slash\">/</span>ML Suite</span><span>&</span><span>Block Chain</span>\r\n  </h1>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  serverUrl: 'http://localhost:8080'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\r\nimport { Plotly } from './plotly.interface';\r\nimport { environment } from '../../environments/environment';\r\n\r\ntype PlotlyName = 'Plotly' | 'ViaCDN' | 'ViaWindow';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PlotlyService {\r\n    protected static instances: Plotly.PlotlyHTMLElement[] = [];\r\n    protected static _plotly?: any = undefined;\r\n    protected static _moduleName?: PlotlyName = undefined;\r\n\r\n    public static setModuleName(moduleName: PlotlyName) {\r\n        PlotlyService._moduleName = moduleName;\r\n    }\r\n\r\n    public static setPlotly(plotly: any) {\r\n        if (typeof plotly === 'object' && typeof plotly.react !== 'function') {\r\n            throw new Error('Invalid plotly.js version. Please, use any version above 1.40.0');\r\n        }\r\n\r\n        PlotlyService._plotly = plotly;\r\n    }\r\n\r\n    public static insert(instance: Plotly.PlotlyHTMLElement) {\r\n        const index = PlotlyService.instances.indexOf(instance);\r\n        if (index === -1) {\r\n            PlotlyService.instances.push(instance);\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    public static remove(div: Plotly.PlotlyHTMLElement) {\r\n        const index = PlotlyService.instances.indexOf(div);\r\n        if (index >= 0) {\r\n            PlotlyService.instances.splice(index, 1);\r\n            PlotlyService._plotly.purge(div);\r\n        }\r\n    }\r\n\r\n    public get debug(): boolean {\r\n        return environment.production === false;\r\n    }\r\n\r\n    public getInstanceByDivId(id: string): Plotly.PlotlyHTMLElement | undefined {\r\n        for (const instance of PlotlyService.instances) {\r\n            if (instance && instance.id === id) {\r\n                return instance;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    public getPlotly() {\r\n        if (typeof PlotlyService._plotly === 'undefined') {\r\n            const msg = PlotlyService._moduleName === 'ViaCDN'\r\n                ? `Error loading Peer dependency plotly.js from CDN url`\r\n                : `Peer dependency plotly.js isn't installed`;\r\n\r\n            throw new Error(msg);\r\n        }\r\n\r\n        return PlotlyService._plotly;\r\n    }\r\n\r\n    protected waitFor(fn: () => boolean): Promise<void> {\r\n        return new Promise((resolve) => {\r\n            const localFn = () => {\r\n                fn() ? resolve() : setTimeout(localFn, 10);\r\n            };\r\n\r\n            localFn();\r\n        });\r\n    }\r\n\r\n    // tslint:disable max-line-length\r\n    public async newPlot(div: HTMLDivElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>, frames?: Partial<Plotly.Config>[]) {\r\n        await this.waitFor(() => this.getPlotly() !== 'waiting');\r\n\r\n        if (frames) {\r\n            const obj = {data, layout, config, frames};\r\n            return this.getPlotly().newPlot(div, obj).then(() => PlotlyService.insert(div as any)) as Promise<any>;\r\n        }\r\n\r\n        return this.getPlotly().newPlot(div, data, layout, config).then(() => PlotlyService.insert(div as any)) as Promise<any>;\r\n    }\r\n\r\n    public plot(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>, frames?: Partial<Plotly.Config>[]) {\r\n        if (frames) {\r\n            const obj = {data, layout, config, frames};\r\n            return this.getPlotly().plot(div, obj) as Promise<any>;\r\n        }\r\n\r\n        return this.getPlotly().plot(div, data, layout, config) as Promise<any>;\r\n    }\r\n\r\n    public update(div: Plotly.PlotlyHTMLElement, data: Plotly.Data[], layout?: Partial<Plotly.Layout>, config?: Partial<Plotly.Config>, frames?: Partial<Plotly.Config>[]) {\r\n        if (frames) {\r\n            const obj = {data, layout, config, frames};\r\n            return this.getPlotly().react(div, obj) as Promise<any>;\r\n        }\r\n\r\n        return this.getPlotly().react(div, data, layout, config) as Promise<any>;\r\n    }\r\n    // tslint:enable max-line-length\r\n\r\n    public resize(div: Plotly.PlotlyHTMLElement): void {\r\n        return this.getPlotly().Plots.resize(div);\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-blockchain',\n  templateUrl: './blockchain.component.html',\n  styleUrls: ['./blockchain.component.scss']\n})\nexport class BlockchainComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"30px\" fxFlexFill>\r\n\r\n  <div fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"50px\">\r\n    <a href=\"https://github.com/mcwebdev/Blockchain-Election-DAPP\">\r\n      <svg id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 1949.9 1338\" width=\"250\" height=\"171\">\r\n        <path class=\"st0\" d=\"M175.9 1241.9c0 4.3-3.6 7.8-7.9 7.8H15.8c3.8 37.6 32.1 71.9 71.9 71.9 27.2 0 47.4-10.4 62.6-32.1 2.2-3 5.5-4.9 9.7-3.1 2.3 1 3.9 3.1 4.3 5.5.4 2.5-.3 3.9-1 5.3-15.3 26.7-45.8 39.8-75.7 39.8-51.2 0-87.7-45.8-87.7-94.8s36.5-94.8 87.7-94.8c51.2-.1 88.2 45.6 88.3 94.5m-16.3-7.4c-3.3-37.6-32.1-71.9-71.9-71.9s-68.1 34.3-71.9 71.9h143.8zM360.6 1151.1c4.4 0 7.6 3.8 7.6 7.6 0 4.4-3.3 7.6-7.6 7.6h-40.8v160.1c0 3.8-3.3 7.6-7.6 7.6-4.4 0-7.6-3.8-7.6-7.6v-160.1h-39.2c-4.4 0-7.6-3.3-7.6-7.6 0-3.8 3.3-7.6 7.6-7.6h39.2v-58.6c0-3.7 2.5-7.1 6.1-7.7 5.1-.8 9.1 2.7 9.1 7.5v58.8h40.8zM609.5 1228.5v97c0 4.4-3.8 7.6-7.6 7.6-4.4 0-7.6-3.3-7.6-7.6v-97c0-32.7-18.5-65.4-55-65.4-46.8 0-67 40.9-64.3 82.8 0 1.1.5 6 .5 6.5v72.8c0 3.7-2.5 7.1-6.1 7.7-5.1.8-9.1-2.7-9.1-7.5v-318.6c0-3.8 3.3-7.6 7.6-7.6 4.4 0 7.6 3.8 7.6 7.6v180.3c13.1-23.4 36.5-39.2 63.7-39.2 44.7 0 70.3 39.2 70.3 80.6M882.4 1241.9c0 4.3-3.6 7.8-7.9 7.8H722.2c3.8 37.6 32.1 71.9 71.9 71.9 27.2 0 47.4-10.4 62.6-32.1 2.2-3 5.5-4.9 9.7-3.1 2.3 1 3.9 3.1 4.3 5.5.4 2.5-.3 3.9-1 5.3-15.3 26.7-45.8 39.8-75.7 39.8-51.2 0-87.7-45.8-87.7-94.8s36.5-94.8 87.7-94.8c51.3-.1 88.3 45.6 88.4 94.5m-16.4-7.4c-3.3-37.6-32.1-71.9-71.9-71.9s-68.1 34.3-71.9 71.9H866zM1069.2 1158.2c0 4.9-2.7 7.6-7.1 8.2-44.7 6.5-64.8 43-64.8 85.5v72.8c0 3.7-2.5 7.1-6.1 7.7-5.1.8-9.1-2.7-9.1-7.5V1159c0-3.7 2.5-7.1 6.1-7.7 5.1-.8 9.1 2.7 9.1 7.5v33.8c12.5-21.2 37.6-41.4 63.7-41.4 3.8-.1 8.2 2.7 8.2 7M1319.2 1241.9c0 4.3-3.6 7.8-7.9 7.8h-152.2c3.8 37.6 32.1 71.9 71.9 71.9 27.2 0 47.4-10.4 62.6-32.1 2.2-3 5.5-4.9 9.7-3.1 2.3 1 3.9 3.1 4.3 5.5.4 2.5-.3 3.9-1 5.3-15.3 26.7-45.8 39.8-75.7 39.8-51.2 0-87.7-45.8-87.7-94.8s36.5-94.8 87.7-94.8c51.2-.1 88.2 45.6 88.3 94.5m-16.3-7.4c-3.3-37.6-32.1-71.9-71.9-71.9s-68.1 34.3-71.9 71.9h143.8zM1564.9 1160.1v166.3c0 4.4-3.8 7.6-7.6 7.6-4.4 0-7.6-3.3-7.6-7.6v-31.6c-12.5 25.1-34.9 43-63.2 43-45.2 0-70.3-39.2-70.3-80.6v-97.5c0-3.8 3.3-7.6 7.6-7.6 4.4 0 7.6 3.8 7.6 7.6v97.5c0 32.7 18.5 65.4 55 65.4 51.2 0 63.2-47.9 63.2-100.8v-62.1c0-4.4 4.4-8.9 9.8-7.3 3.3 1.1 5.5 4.3 5.5 7.7M1949.9 1227.9v97.5c0 4.4-3.8 7.6-7.6 7.6-4.4 0-7.6-3.3-7.6-7.6v-97.5c0-32.7-18.5-64.8-55-64.8-45.8 0-63.2 49-63.2 87.1v75.2c0 4.4-3.8 7.6-7.6 7.6-4.4 0-7.6-3.3-7.6-7.6v-97.5c0-32.7-18.5-64.8-55-64.8-46.3 0-65.4 36.5-63.7 85 0 1.1.5 3.3 0 3.8v73.3c0 3.7-2.5 7.1-6.2 7.7-5.1.8-9.1-2.7-9.1-7.5V1159c0-3.7 2.5-7.1 6.1-7.7 5.1-.8 9.1 2.7 9.1 7.5v27.8c13.1-23.4 36.5-38.7 63.7-38.7 31 0 55 19.6 64.8 48.5 12.5-28.3 37-48.5 68.6-48.5 44.7 0 70.3 38.6 70.3 80\" />\r\n        <g class=\"st1\"><defs><path id=\"SVGID_1_\" d=\"M720.6 306.4h508.7v266H720.6z\" /></defs><clipPath id=\"SVGID_2_\"><use xlink:href=\"#SVGID_1_\" overflow=\"visible\" /></clipPath><path class=\"st2\" d=\"M975 306.4L720.6 422.1 975 572.4l254.3-150.3z\" /></g>\r\n        <g class=\"st3\"><defs><path id=\"SVGID_3_\" d=\"M720.6 0H975v572.4H720.6z\" /></defs><clipPath id=\"SVGID_4_\"><use xlink:href=\"#SVGID_3_\" overflow=\"visible\" /></clipPath><path class=\"st4\" d=\"M720.6 422.1L975 572.4V0z\" /></g>\r\n        <g class=\"st5\"><defs><path id=\"SVGID_5_\" d=\"M975 0h254.4v572.4H975z\" /></defs><clipPath id=\"SVGID_6_\"><use xlink:href=\"#SVGID_5_\" overflow=\"visible\" /></clipPath><path class=\"st6\" d=\"M975 0v572.4l254.3-150.3z\" /></g>\r\n        <g class=\"st3\"><defs><path id=\"SVGID_7_\" d=\"M720.6 470.3H975v358.4H720.6z\" /></defs><clipPath id=\"SVGID_8_\"><use xlink:href=\"#SVGID_7_\" overflow=\"visible\" /></clipPath><path class=\"st7\" d=\"M720.6 470.3L975 828.7V620.6z\" /></g>\r\n        <g class=\"st5\"><defs><path id=\"SVGID_9_\" d=\"M975 470.3h254.5v358.4H975z\" /></defs><clipPath id=\"SVGID_10_\"><use xlink:href=\"#SVGID_9_\" overflow=\"visible\" /></clipPath><path class=\"st8\" d=\"M975 620.6v208.1l254.5-358.4z\" /></g>\r\n      </svg>\r\n    </a>\r\n    <a href=\"https://github.com/mcwebdev/Blockchain-Election-DAPP\">\r\n      <svg width=\"256\" height=\"124\" viewBox=\"0 0 2880 1024\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M18.53 10.0301H18.51C18.519 10.0301 18.525 10.0391 18.534 10.0411C18.535 10.0411 18.539 10.0401 18.54 10.0401L18.53 10.0301ZM18.534 10.0411C18.441 10.0421 18.207 10.0901 17.96 10.0901C17.18 10.0901 16.91 9.73007 16.91 9.26007V6.13007H18.5C18.59 6.13007 18.66 6.05007 18.66 5.94007V4.24007C18.66 4.15007 18.58 4.07007 18.5 4.07007H16.91V1.96007C16.91 1.88007 16.86 1.83007 16.77 1.83007H14.61C14.52 1.83007 14.47 1.88007 14.47 1.96007V4.13007C14.47 4.13007 13.38 4.40007 13.31 4.41007C13.23 4.43007 13.18 4.50007 13.18 4.58007V5.94007C13.18 6.05007 13.26 6.13007 13.35 6.13007H14.46V9.41007C14.46 11.8501 16.16 12.1001 17.32 12.1001C17.85 12.1001 18.49 11.9301 18.59 11.8801C18.65 11.8601 18.68 11.7901 18.68 11.7201V10.2201C18.68 10.1211 18.612 10.0551 18.534 10.0411ZM42.23 7.84007C42.23 6.03007 41.5 5.79007 40.73 5.87007C40.13 5.91007 39.65 6.21007 39.65 6.21007V9.73007C39.65 9.73007 40.14 10.0701 40.87 10.0901C41.9 10.1201 42.23 9.75007 42.23 7.84007ZM44.66 7.68007C44.66 11.1101 43.55 12.0901 41.61 12.0901C39.97 12.0901 39.09 11.2601 39.09 11.2601C39.09 11.2601 39.05 11.7201 39 11.7801C38.97 11.8401 38.92 11.8601 38.86 11.8601H37.38C37.28 11.8601 37.19 11.7801 37.19 11.6901L37.21 0.580069C37.21 0.490068 37.29 0.410069 37.38 0.410069H39.51C39.6 0.410069 39.68 0.490068 39.68 0.580069V4.35007C39.68 4.35007 40.5 3.82007 41.7 3.82007L41.69 3.80007C42.89 3.80007 44.66 4.25007 44.66 7.68007ZM35.94 4.07007H35.93H33.84C33.73 4.07007 33.67 4.15007 33.67 4.26007V9.70007C33.67 9.70007 33.12 10.0901 32.37 10.0901C31.62 10.0901 31.4 9.75007 31.4 9.00007V4.25007C31.4 4.16007 31.32 4.08007 31.23 4.08007H29.09C29 4.08007 28.92 4.16007 28.92 4.25007V9.36007C28.92 11.5601 30.15 12.1101 31.84 12.1101C33.23 12.1101 34.36 11.3401 34.36 11.3401C34.36 11.3401 34.41 11.7301 34.44 11.7901C34.46 11.8401 34.53 11.8801 34.6 11.8801H35.94C36.05 11.8801 36.11 11.8001 36.11 11.7101L36.13 4.24007C36.13 4.15007 36.05 4.07007 35.94 4.07007ZM12.24 4.06007H10.11C10.02 4.06007 9.94 4.15007 9.94 4.26007V11.6001C9.94 11.8001 10.07 11.8701 10.24 11.8701H12.16C12.36 11.8701 12.41 11.7801 12.41 11.6001V4.24007V4.23007C12.41 4.14007 12.33 4.06007 12.24 4.06007ZM11.19 0.680069C10.42 0.680069 9.81 1.29007 9.81 2.06007C9.81 2.83007 10.42 3.44007 11.19 3.44007C11.94 3.44007 12.55 2.83007 12.55 2.06007C12.55 1.29007 11.94 0.680069 11.19 0.680069ZM27.68 0.430069H25.57C25.48 0.430069 25.4 0.510069 25.4 0.600069V4.69007H22.09V0.600069C22.09 0.510069 22.01 0.430069 21.92 0.430069H19.79C19.7 0.430069 19.62 0.510069 19.62 0.600069V11.7101C19.62 11.8001 19.71 11.8801 19.79 11.8801H21.92C22.01 11.8801 22.09 11.8001 22.09 11.7101V6.96007H25.4L25.38 11.7101C25.38 11.8001 25.46 11.8801 25.55 11.8801H27.68C27.77 11.8801 27.85 11.8001 27.85 11.7101V0.600069C27.85 0.510069 27.77 0.430069 27.68 0.430069ZM8.81 5.35007V11.0901C8.81 11.1301 8.8 11.2001 8.75 11.2201C8.75 11.2201 7.5 12.1101 5.44 12.1101C2.95 12.1101 0 11.3301 0 6.19007C0 1.05007 2.58 -0.00993021 5.1 6.97893e-05C7.28 6.97893e-05 8.16 0.49007 8.3 0.58007C8.34 0.63007 8.36 0.67007 8.36 0.72007L7.94 2.50007C7.94 2.59007 7.85 2.70007 7.74 2.67007C7.38 2.56007 6.84 2.34007 5.57 2.34007C4.1 2.34007 2.52 2.76007 2.52 6.07007C2.52 9.38007 4.02 9.77007 5.1 9.77007C6.02 9.77007 6.35 9.66007 6.35 9.66007V7.36007H4.88C4.77 7.36007 4.69 7.28007 4.69 7.19007V5.35007C4.69 5.26007 4.77 5.18007 4.88 5.18007H8.62C8.73 5.18007 8.81 5.26007 8.81 5.35007Z\" transform=\"translate(0 128.002) scale(64)\" fill=\"#1B1F23\" />\r\n      </svg>\r\n    </a>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PlotComponent } from '../shared/plot/plot.component';\r\nimport { PlotlyService } from '../shared/plotly.service';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\nexport type PlotlyBundleName = 'basic' | 'cartesian' | 'geo' | 'gl3d' | 'gl2d' | 'mapbox' | 'finance';\r\n\r\n// @dynamic\r\n@NgModule({\r\n    imports: [CommonModule, SharedModule],\r\n    declarations: [],\r\n    exports: [PlotComponent]\r\n})\r\nexport class PlotlyViaCDNModule {\r\n    private static _plotlyBundle?: string = null;\r\n    private static _plotlyVersion: string = 'latest';\r\n    static plotlyBundleNames: PlotlyBundleName[] = ['basic', 'cartesian', 'geo', 'gl3d', 'gl2d', 'mapbox', 'finance'];\r\n\r\n    constructor(public plotlyService: PlotlyService) {\r\n        PlotlyService.setModuleName('ViaCDN');\r\n    }\r\n\r\n    static set plotlyVersion(version: string) {\r\n        const isOk = version === 'latest' || /^\\d\\.\\d{1,2}\\.\\d{1,2}$/.test(version);\r\n        if (!isOk) {\r\n            throw new Error(`Invalid plotly version. Please set 'latest' or version number (i.e.: 1.4.3)`);\r\n        }\r\n\r\n        PlotlyViaCDNModule.loadViaCDN();\r\n        PlotlyViaCDNModule._plotlyVersion = version;\r\n    }\r\n\r\n    static set plotlyBundle(bundle: PlotlyBundleName) {\r\n        const isOk = bundle === null || PlotlyViaCDNModule.plotlyBundleNames.indexOf(bundle) >= 0;\r\n        if (!isOk) {\r\n            const names = PlotlyViaCDNModule.plotlyBundleNames.map(n => `\"${n}\"`).join(', ');\r\n            throw new Error(`Invalid plotly bundle. Please set to null for full or ${names} for a partial bundle.`);\r\n        }\r\n\r\n        PlotlyViaCDNModule._plotlyBundle = bundle;\r\n    }\r\n\r\n    static loadViaCDN() {\r\n        PlotlyService.setPlotly('waiting');\r\n\r\n        const init = () => {\r\n            const src = PlotlyViaCDNModule._plotlyBundle == null\r\n                ? `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule._plotlyVersion}.min.js`\r\n                : `https://cdn.plot.ly/plotly-${PlotlyViaCDNModule._plotlyBundle}-${PlotlyViaCDNModule._plotlyVersion}.min.js`;\r\n\r\n            const script: HTMLScriptElement = document.createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.src = src;\r\n            script.onerror = () => console.error(`Error loading plotly.js library from ${src}`);\r\n\r\n            const head: HTMLHeadElement = document.getElementsByTagName('head')[0];\r\n            head.appendChild(script);\r\n\r\n            let counter = 200; // equivalent of 10 seconds...\r\n\r\n            const fn = () => {\r\n                const plotly = (window as any).Plotly;\r\n                if (plotly) {\r\n                    PlotlyService.setPlotly(plotly);\r\n                } else if (counter > 0) {\r\n                    counter --;\r\n                    setTimeout(fn, 50);\r\n                } else {\r\n                    throw new Error(`Error loading plotly.js library from ${src}. Timeout.`);\r\n                }\r\n            };\r\n\r\n            fn();\r\n        };\r\n\r\n        setTimeout(init);\r\n    }\r\n\r\n    static forRoot(config: Partial<{version: string}>): never {\r\n        const url = \"https://github.com/plotly/angular-plotly.js#customizing-the-plotlyjs-bundle\";\r\n        throw new Error(`[PlotlyViaCDNModule] forRoot method is deprecated. Please see: ${url}`);\r\n    }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * Audio FFT Feature Extractor based on Browser-Native FFT.\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nimport {getAudioContextConstructor, getAudioMediaStream} from './browser_fft_utils';\r\nimport {FeatureExtractor, RecognizerParams} from './types';\r\n\r\nexport type SpectrogramCallback = (freqData: tf.Tensor, timeData?: tf.Tensor) =>\r\n    Promise<boolean>;\r\n\r\n/**\r\n * Configurations for constructing BrowserFftFeatureExtractor.\r\n */\r\nexport interface BrowserFftFeatureExtractorConfig extends RecognizerParams {\r\n  /**\r\n   * Number of audio frames (i.e., frequency columns) per spectrogram.\r\n   */\r\n  numFramesPerSpectrogram: number;\r\n\r\n  /**\r\n   * Suppression period in milliseconds.\r\n   *\r\n   * How much time to rest (not call the spectrogramCallback) every time\r\n   * a word with probability score above threshold is recognized.\r\n   */\r\n  suppressionTimeMillis: number;\r\n\r\n  /**\r\n   * A callback that is invoked every time a full spectrogram becomes\r\n   * available.\r\n   *\r\n   * `x` is a single-example tf.Tensor instance that includes the batch\r\n   * dimension.\r\n   * The return value is assumed to be whether a flag for whether the\r\n   * suppression period should initiate, e.g., when a word is recognized.\r\n   */\r\n  spectrogramCallback: SpectrogramCallback;\r\n\r\n  /**\r\n   * Truncate each spectrogram column at how many frequency points.\r\n   *\r\n   * If `null` or `undefined`, will do no truncation.\r\n   */\r\n  columnTruncateLength?: number;\r\n\r\n  /**\r\n   * Overlap factor. Must be >=0 and <1.\r\n   * For example, if the model takes a frame length of 1000 ms,\r\n   * and if overlap factor is 0.4, there will be a 400ms\r\n   * overlap between two successive frames, i.e., frames\r\n   * will be taken every 600 ms.\r\n   */\r\n  overlapFactor: number;\r\n\r\n  /**\r\n   * Whether to collect the raw time-domain audio waveform in addition to the\r\n   * spectrogram.\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  includeRawAudio?: boolean;\r\n}\r\n\r\n/**\r\n * Audio feature extractor based on Browser-native FFT.\r\n *\r\n * Uses AudioContext and analyser node.\r\n */\r\nexport class BrowserFftFeatureExtractor implements FeatureExtractor {\r\n  // Number of frames (i.e., columns) per spectrogram used for classification.\r\n  readonly numFrames: number;\r\n\r\n  // Audio sampling rate in Hz.\r\n  readonly sampleRateHz: number;\r\n\r\n  // The FFT length for each spectrogram column.\r\n  readonly fftSize: number;\r\n\r\n  // Truncation length for spectrogram columns.\r\n  readonly columnTruncateLength: number;\r\n\r\n  // Overlapping factor: the ratio between the temporal spacing between\r\n  // consecutive spectrograms and the length of each individual spectrogram.\r\n  readonly overlapFactor: number;\r\n  readonly includeRawAudio: boolean;\r\n\r\n  private readonly spectrogramCallback: SpectrogramCallback;\r\n\r\n  private stream: MediaStream;\r\n  // tslint:disable-next-line:no-any\r\n  private audioContextConstructor: any;\r\n  private audioContext: AudioContext;\r\n  private analyser: AnalyserNode;\r\n  private tracker: Tracker;\r\n  private freqData: Float32Array;\r\n  private timeData: Float32Array;\r\n  private freqDataQueue: Float32Array[];\r\n  private timeDataQueue: Float32Array[];\r\n  // tslint:disable-next-line:no-any\r\n  private frameIntervalTask: any;\r\n  private frameDurationMillis: number;\r\n\r\n  private suppressionTimeMillis: number;\r\n\r\n  /**\r\n   * Constructor of BrowserFftFeatureExtractor.\r\n   *\r\n   * @param config Required configuration object.\r\n   */\r\n  constructor(config: BrowserFftFeatureExtractorConfig) {\r\n    if (config == null) {\r\n      throw new Error(\r\n          `Required configuration object is missing for ` +\r\n          `BrowserFftFeatureExtractor constructor`);\r\n    }\r\n\r\n    if (config.spectrogramCallback == null) {\r\n      throw new Error(`spectrogramCallback cannot be null or undefined`);\r\n    }\r\n\r\n    if (!(config.numFramesPerSpectrogram > 0)) {\r\n      throw new Error(\r\n          `Invalid value in numFramesPerSpectrogram: ` +\r\n          `${config.numFramesPerSpectrogram}`);\r\n    }\r\n\r\n    if (config.suppressionTimeMillis < 0) {\r\n      throw new Error(\r\n          `Expected suppressionTimeMillis to be >= 0, ` +\r\n          `but got ${config.suppressionTimeMillis}`);\r\n    }\r\n    this.suppressionTimeMillis = config.suppressionTimeMillis;\r\n\r\n    this.spectrogramCallback = config.spectrogramCallback;\r\n    this.numFrames = config.numFramesPerSpectrogram;\r\n    this.sampleRateHz = config.sampleRateHz || 44100;\r\n    this.fftSize = config.fftSize || 1024;\r\n    this.frameDurationMillis = this.fftSize / this.sampleRateHz * 1e3;\r\n    this.columnTruncateLength = config.columnTruncateLength || this.fftSize;\r\n    this.overlapFactor = config.overlapFactor;\r\n    this.includeRawAudio = config.includeRawAudio;\r\n\r\n    tf.util.assert(\r\n        this.overlapFactor >= 0 && this.overlapFactor < 1,\r\n        () => `Expected overlapFactor to be >= 0 and < 1, ` +\r\n            `but got ${this.overlapFactor}`);\r\n\r\n    if (this.columnTruncateLength > this.fftSize) {\r\n      throw new Error(\r\n          `columnTruncateLength ${this.columnTruncateLength} exceeds ` +\r\n          `fftSize (${this.fftSize}).`);\r\n    }\r\n\r\n    this.audioContextConstructor = getAudioContextConstructor();\r\n  }\r\n\r\n  async start(audioTrackConstraints?: MediaTrackConstraints):\r\n      Promise<Float32Array[]|void> {\r\n    if (this.frameIntervalTask != null) {\r\n      throw new Error(\r\n          'Cannot start already-started BrowserFftFeatureExtractor');\r\n    }\r\n\r\n    this.stream = await getAudioMediaStream(audioTrackConstraints);\r\n\r\n    this.audioContext = new this.audioContextConstructor() as AudioContext;\r\n    if (this.audioContext.sampleRate !== this.sampleRateHz) {\r\n      console.warn(\r\n          `Mismatch in sampling rate: ` +\r\n          `Expected: ${this.sampleRateHz}; ` +\r\n          `Actual: ${this.audioContext.sampleRate}`);\r\n    }\r\n    const streamSource = this.audioContext.createMediaStreamSource(this.stream);\r\n    this.analyser = this.audioContext.createAnalyser();\r\n    this.analyser.fftSize = this.fftSize * 2;\r\n    this.analyser.smoothingTimeConstant = 0.0;\r\n    streamSource.connect(this.analyser);\r\n    // Reset the queue.\r\n    this.freqDataQueue = [];\r\n    this.freqData = new Float32Array(this.fftSize);\r\n    if (this.includeRawAudio) {\r\n      this.timeDataQueue = [];\r\n      this.timeData = new Float32Array(this.fftSize);\r\n    }\r\n    const period =\r\n        Math.max(1, Math.round(this.numFrames * (1 - this.overlapFactor)));\r\n    this.tracker = new Tracker(\r\n        period,\r\n        Math.round(this.suppressionTimeMillis / this.frameDurationMillis));\r\n    this.frameIntervalTask = setInterval(\r\n      this.onAudioFrame.bind(this), this.fftSize / this.sampleRateHz * 1e3);\r\n\r\n    this.watchInput();\r\n  }\r\n  watchInput() {\r\n    var paths = document.getElementById(\"visualizer\").getElementsByTagName('path');\r\n    var visualizer = document.getElementById('visualizer');\r\n    var mask = document.getElementById('mask');\r\n    var h = document.getElementsByTagName('h1')[0];\r\n    var hSub = document.getElementsByTagName('h1')[1];\r\n    var start = true;\r\n    var path;\r\n    var seconds = 0;\r\n    var loud_volume_threshold = 90; // I used 90 to more or less disable. Change to 30 if you want to see it in action\r\n    var audioStream = this.audioContext.createMediaStreamSource(this.stream);\r\n    var analyser = this.audioContext.createAnalyser();\r\n    var fftSize = 1024;\r\n\r\n    analyser.fftSize = fftSize;\r\n    audioStream.connect(analyser);\r\n\r\n    var bufferLength = analyser.frequencyBinCount;\r\n    var frequencyArray = new Uint8Array(bufferLength);\r\n\r\n    visualizer.setAttribute('viewBox', '0 0 255 255');\r\n\r\n    for (var i = 0; i < 255; i++) {\r\n      path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n      path.setAttribute('stroke-dasharray', '4,1');\r\n      mask.appendChild(path);\r\n    }\r\n    var doDraw = function () {\r\n      requestAnimationFrame(doDraw);\r\n      if (start) {\r\n        analyser.getByteFrequencyData(frequencyArray);\r\n        var adjustedLength;\r\n        for (var i = 0; i < 255; i++) {\r\n          adjustedLength = Math.floor(frequencyArray[i]) - (Math.floor(frequencyArray[i]) % 5);\r\n          paths[i].setAttribute('d', 'M ' + (i) + ',255 l 0,-' + adjustedLength);\r\n        }\r\n      }\r\n      else {\r\n        for (var i = 0; i < 255; i++) {\r\n          paths[i].setAttribute('d', 'M ' + (i) + ',255 l 0,-' + 0);\r\n        }\r\n      }\r\n    }\r\n    var showVolume = function () {\r\n      setTimeout(showVolume, 500);\r\n      if (start) {\r\n        analyser.getByteFrequencyData(frequencyArray);\r\n        var total = 0\r\n        for (var i = 0; i < 255; i++) {\r\n          var x = frequencyArray[i];\r\n          total += x * x;\r\n        }\r\n        var rms = Math.sqrt(total / bufferLength);\r\n        var db = 20 * (Math.log(rms) / Math.log(10));\r\n        db = Math.max(db, 0); // sanity check\r\n        h.innerHTML = Math.floor(db) + \" dB\";\r\n\r\n        if (db >= loud_volume_threshold) {\r\n          seconds += 0.5;\r\n          if (seconds >= 5) {\r\n            hSub.innerHTML = \"You’ve been in loud environment for<span> \" + Math.floor(seconds) + \" </span>seconds.\";\r\n          }\r\n        }\r\n        else {\r\n          seconds = 0;\r\n          hSub.innerHTML = \"\";\r\n        }\r\n      }\r\n      else {\r\n        h.innerHTML = \"\";\r\n        hSub.innerHTML = \"\";\r\n      }\r\n    }\r\n\r\n    doDraw();\r\n    showVolume();\r\n  }\r\n\r\n  private async onAudioFrame() {\r\n    this.analyser.getFloatFrequencyData(this.freqData);\r\n    if (this.freqData[0] === -Infinity) {\r\n      return;\r\n    }\r\n\r\n    this.freqDataQueue.push(this.freqData.slice(0, this.columnTruncateLength));\r\n    if (this.includeRawAudio) {\r\n      this.analyser.getFloatTimeDomainData(this.timeData);\r\n      this.timeDataQueue.push(this.timeData.slice());\r\n    }\r\n    if (this.freqDataQueue.length > this.numFrames) {\r\n      // Drop the oldest frame (least recent).\r\n      this.freqDataQueue.shift();\r\n    }\r\n    const shouldFire = this.tracker.tick();\r\n    if (shouldFire) {\r\n      const freqData = flattenQueue(this.freqDataQueue);\r\n      const freqDataTensor = getInputTensorFromFrequencyData(\r\n          freqData, [1, this.numFrames, this.columnTruncateLength, 1]);\r\n      let timeDataTensor: tf.Tensor;\r\n      if (this.includeRawAudio) {\r\n        const timeData = flattenQueue(this.timeDataQueue);\r\n        timeDataTensor = getInputTensorFromFrequencyData(\r\n            timeData, [1, this.numFrames * this.fftSize]);\r\n      }\r\n      const shouldRest =\r\n          await this.spectrogramCallback(freqDataTensor, timeDataTensor);\r\n      if (shouldRest) {\r\n        this.tracker.suppress();\r\n      }\r\n      tf.dispose([freqDataTensor, timeDataTensor]);\r\n    }\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    if (this.frameIntervalTask == null) {\r\n      throw new Error(\r\n          'Cannot stop because there is no ongoing streaming activity.');\r\n    }\r\n    clearInterval(this.frameIntervalTask);\r\n    this.frameIntervalTask = null;\r\n    this.analyser.disconnect();\r\n    this.audioContext.close();\r\n    if (this.stream != null && this.stream.getTracks().length > 0) {\r\n      this.stream.getTracks()[0].stop();\r\n    }\r\n  }\r\n\r\n  setConfig(params: RecognizerParams) {\r\n    throw new Error(\r\n        'setConfig() is not implemented for BrowserFftFeatureExtractor.');\r\n  }\r\n\r\n  getFeatures(): Float32Array[] {\r\n    throw new Error(\r\n        'getFeatures() is not implemented for ' +\r\n        'BrowserFftFeatureExtractor. Use the spectrogramCallback ' +\r\n        'field of the constructor config instead.');\r\n  }\r\n}\r\n\r\nexport function flattenQueue(queue: Float32Array[]): Float32Array {\r\n  const frameSize = queue[0].length;\r\n  const freqData = new Float32Array(queue.length * frameSize);\r\n  queue.forEach((data, i) => freqData.set(data, i * frameSize));\r\n  return freqData;\r\n}\r\n\r\nexport function getInputTensorFromFrequencyData(\r\n    freqData: Float32Array, shape: number[]): tf.Tensor {\r\n  const vals = new Float32Array(tf.util.sizeFromShape(shape));\r\n  // If the data is less than the output shape, the rest is padded with zeros.\r\n  vals.set(freqData, vals.length - freqData.length);\r\n  return tf.tensor(vals, shape);\r\n}\r\n\r\n/**\r\n * A class that manages the firing of events based on periods\r\n * and suppression time.\r\n */\r\nexport class Tracker {\r\n  readonly period: number;\r\n  readonly suppressionTime: number;\r\n\r\n  private counter: number;\r\n  private suppressionOnset: number;\r\n\r\n  /**\r\n   * Constructor of Tracker.\r\n   *\r\n   * @param period The event-firing period, in number of frames.\r\n   * @param suppressionPeriod The suppression period, in number of frames.\r\n   */\r\n  constructor(period: number, suppressionPeriod: number) {\r\n    this.period = period;\r\n    this.suppressionTime = suppressionPeriod == null ? 0 : suppressionPeriod;\r\n    this.counter = 0;\r\n\r\n    tf.util.assert(\r\n        this.period > 0,\r\n        () => `Expected period to be positive, but got ${this.period}`);\r\n  }\r\n\r\n  /**\r\n   * Mark a frame.\r\n   *\r\n   * @returns Whether the event should be fired at the current frame.\r\n   */\r\n  tick(): boolean {\r\n    this.counter++;\r\n    const shouldFire = (this.counter % this.period === 0) &&\r\n        (this.suppressionOnset == null ||\r\n         this.counter - this.suppressionOnset > this.suppressionTime);\r\n    return shouldFire;\r\n  }\r\n\r\n  /**\r\n   * Order the beginning of a supression period.\r\n   */\r\n  suppress() {\r\n    this.suppressionOnset = this.counter;\r\n  }\r\n}\r\n","/** @license See the LICENSE file. */\r\n\r\n// This code is auto-generated, do not modify this file!\r\nconst version = '0.4.1';\r\nexport {version};\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PlotComponent } from './plot/plot.component';\r\nimport { PlotlyService } from './plotly.service';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [PlotComponent],\r\n    providers: [PlotlyService],\r\n    exports: [PlotComponent]\r\n})\r\nexport class SharedModule { }\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport {BrowserFftFeatureExtractor, SpectrogramCallback} from './browser_fft_extractor';\r\nimport {loadMetadataJson, normalize, normalizeFloat32Array} from './browser_fft_utils';\r\nimport {BACKGROUND_NOISE_TAG, Dataset} from './dataset';\r\nimport {concatenateFloat32Arrays} from './generic_utils';\r\nimport {balancedTrainValSplit} from './training_utils';\r\nimport {AudioDataAugmentationOptions, EvaluateConfig, EvaluateResult, Example, ExampleCollectionOptions, RecognizeConfig, RecognizerCallback, RecognizerParams, ROCCurve, SpectrogramData, SpeechCommandRecognizer, SpeechCommandRecognizerMetadata, SpeechCommandRecognizerResult, StreamingRecognitionConfig, TransferLearnConfig, TransferSpeechCommandRecognizer} from './types';\r\nimport {version} from './version';\r\n\r\nexport const UNKNOWN_TAG = '_unknown_';\r\n\r\n// Key to the local-storage item that holds a map from model name to word\r\n// list.\r\nexport const SAVED_MODEL_METADATA_KEY =\r\n    'tfjs-speech-commands-saved-model-metadata';\r\nexport const SAVE_PATH_PREFIX = 'indexeddb://tfjs-speech-commands-model/';\r\n\r\n// Export a variable for injection during unit testing.\r\n// tslint:disable-next-line:no-any\r\nexport let localStorageWrapper = {\r\n  localStorage: typeof window === 'undefined' ? null : window.localStorage\r\n};\r\n\r\nexport function getMajorAndMinorVersion(version: string) {\r\n  const versionItems = version.split('.');\r\n  return versionItems.slice(0, 2).join('.');\r\n}\r\n\r\n/**\r\n * Default window hop ratio used for extracting multiple\r\n * windows from a long spectrogram.\r\n */\r\nconst DEFAULT_WINDOW_HOP_RATIO = 0.25;\r\n\r\n/**\r\n * Speech-Command Recognizer using browser-native (WebAudio) spectral featutres.\r\n */\r\nexport class BrowserFftSpeechCommandRecognizer implements\r\n    SpeechCommandRecognizer {\r\n  static readonly VALID_VOCABULARY_NAMES: string[] = ['18w', 'directional4w'];\r\n  static readonly DEFAULT_VOCABULARY_NAME = '18w';\r\n\r\n  readonly MODEL_URL_PREFIX =\r\n      `https://storage.googleapis.com/tfjs-models/tfjs/speech-commands/v${\r\n          getMajorAndMinorVersion(version)}/browser_fft`;\r\n\r\n  private readonly SAMPLE_RATE_HZ = 44100;\r\n  private readonly FFT_SIZE = 1024;\r\n  private readonly DEFAULT_SUPPRESSION_TIME_MILLIS = 0;\r\n\r\n  model: tf.LayersModel;\r\n  modelWithEmbeddingOutput: tf.LayersModel;\r\n  readonly vocabulary: string;\r\n  readonly parameters: RecognizerParams;\r\n  protected words: string[];\r\n\r\n  protected streaming = false;\r\n\r\n  protected nonBatchInputShape: [number, number, number];\r\n  private elementsPerExample: number;\r\n  protected audioDataExtractor: BrowserFftFeatureExtractor;\r\n\r\n  private transferRecognizers:\r\n      {[name: string]: TransferBrowserFftSpeechCommandRecognizer} = {};\r\n\r\n  private modelArtifactsOrURL: tf.io.ModelArtifacts|string;\r\n  private metadataOrURL: SpeechCommandRecognizerMetadata|string;\r\n\r\n  // The second-last dense layer in the base model.\r\n  // To be used for unfreezing during fine-tuning.\r\n  protected secondLastBaseDenseLayer: tf.layers.Layer;\r\n\r\n  /**\r\n   * Constructor of BrowserFftSpeechCommandRecognizer.\r\n   *\r\n   * @param vocabulary An optional vocabulary specifier. Mutually exclusive\r\n   *   with `modelURL` and `metadataURL`.\r\n   * @param modelArtifactsOrURL An optional, custom model URL pointing to a\r\n   *     model.json, or modelArtifacts in the format of `tf.io.ModelArtifacts`.\r\n   *   file. Supported schemes: http://, https://, and node.js-only: file://.\r\n   *   Mutually exclusive with `vocabulary`. If provided, `metadatURL`\r\n   *   most also be provided.\r\n   * @param metadataOrURL A custom metadata URL pointing to a metadata.json\r\n   *   file. Or it can be a metadata JSON object itself. Must be provided\r\n   *   together with `modelArtifactsOrURL`.\r\n   */\r\n  \r\n  constructor(\r\n      vocabulary?: string, modelArtifactsOrURL?: tf.io.ModelArtifacts|string,\r\n      metadataOrURL?: SpeechCommandRecognizerMetadata|string) {\r\n    // TODO(cais): Consolidate the fields into a single config object when\r\n    // upgrading to v1.0.\r\n    tf.util.assert(\r\n        modelArtifactsOrURL == null && metadataOrURL == null ||\r\n            modelArtifactsOrURL != null && metadataOrURL != null,\r\n        () => `modelURL and metadataURL must be both provided or ` +\r\n        `both not provided.`);\r\n    if (modelArtifactsOrURL == null) {\r\n      if (vocabulary == null) {\r\n        vocabulary = BrowserFftSpeechCommandRecognizer.DEFAULT_VOCABULARY_NAME;\r\n      } else {\r\n        tf.util.assert(\r\n            BrowserFftSpeechCommandRecognizer.VALID_VOCABULARY_NAMES.indexOf(\r\n                vocabulary) !== -1,\r\n            () => `Invalid vocabulary name: '${vocabulary}'`);\r\n      }\r\n      this.vocabulary = vocabulary;\r\n      this.modelArtifactsOrURL =\r\n          `${this.MODEL_URL_PREFIX}/${this.vocabulary}/model.json`;\r\n      this.metadataOrURL =\r\n          `${this.MODEL_URL_PREFIX}/${this.vocabulary}/metadata.json`;\r\n    } else {\r\n      tf.util.assert(\r\n          vocabulary == null,\r\n          () => `vocabulary name must be null or undefined when modelURL is ` +\r\n              `provided`);\r\n      this.modelArtifactsOrURL = modelArtifactsOrURL;\r\n      this.metadataOrURL = metadataOrURL;\r\n    }\r\n\r\n    this.parameters = {\r\n      sampleRateHz: this.SAMPLE_RATE_HZ,\r\n      fftSize: this.FFT_SIZE\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Start streaming recognition.\r\n   *\r\n   * To stop the recognition, use `stopListening()`.\r\n   *\r\n   * Example: TODO(cais): Add exapmle code snippet.\r\n   *\r\n   * @param callback The callback invoked whenever a word is recognized\r\n   *   with a probability score greater than `config.probabilityThreshold`.\r\n   *   It has the signature:\r\n   *     (result: SpeechCommandRecognizerResult) => Promise<void>\r\n   *   wherein result has the two fields:\r\n   *   - scores: A Float32Array that contains the probability scores for all\r\n   *     the words.\r\n   *   - spectrogram: The spectrogram data, provided only if\r\n   *     `config.includeSpectrogram` is `true`.\r\n   * @param config The configurations for the streaming recognition to\r\n   *   be started.\r\n   *   The `modelName` field of `config` specifies the model to be used for\r\n   *   online recognition. If not specified, it defaults to the name of the\r\n   *   base model ('base'), i.e., the pretrained model not from transfer\r\n   *   learning. If the recognizer instance has one or more transfer-learning\r\n   *   models ready (as a result of calls to `collectTransferExample`\r\n   *   and `trainTransferModel`), you can let this call use that\r\n   *   model for prediction by specifying the corresponding `modelName`.\r\n   * @throws Error, if streaming recognition is already started or\r\n   *   if `config` contains invalid values.\r\n   */\r\n  async listen(\r\n      callback: RecognizerCallback,\r\n      config?: StreamingRecognitionConfig): Promise<void> {\r\n    if (this.streaming) {\r\n      throw new Error(\r\n          'Cannot start streaming again when streaming is ongoing.');\r\n    }\r\n\r\n    await this.ensureModelLoaded();\r\n\r\n    if (config == null) {\r\n      config = {};\r\n    }\r\n    let probabilityThreshold = config.probabilityThreshold == null ? 0 : config.probabilityThreshold;\r\n    if (config.includeEmbedding) {\r\n      // Override probability threshold to 0 if includeEmbedding is true.\r\n      probabilityThreshold = 0;\r\n    }\r\n    tf.util.assert(\r\n        probabilityThreshold >= 0 && probabilityThreshold <= 1,\r\n        () => `Invalid probabilityThreshold value: ${probabilityThreshold}`);\r\n    let invokeCallbackOnNoiseAndUnknown =\r\n        config.invokeCallbackOnNoiseAndUnknown == null ?\r\n        false :\r\n        config.invokeCallbackOnNoiseAndUnknown;\r\n    if (config.includeEmbedding) {\r\n      // Override invokeCallbackOnNoiseAndUnknown threshold to true if\r\n      // includeEmbedding is true.\r\n      invokeCallbackOnNoiseAndUnknown = true;\r\n    }\r\n\r\n    if (config.suppressionTimeMillis < 0) {\r\n      throw new Error(\r\n          `suppressionTimeMillis is expected to be >= 0, ` +\r\n          `but got ${config.suppressionTimeMillis}`);\r\n    }\r\n\r\n    const overlapFactor =\r\n        config.overlapFactor == null ? 0.5 : config.overlapFactor;\r\n    tf.util.assert(\r\n        overlapFactor >= 0 && overlapFactor < 1,\r\n        () => `Expected overlapFactor to be >= 0 and < 1, but got ${\r\n            overlapFactor}`);\r\n\r\n    const spectrogramCallback: SpectrogramCallback =\r\n        async (x: tf.Tensor, timeData?: tf.Tensor) => {\r\n      const normalizedX = normalize(x);\r\n      let y: tf.Tensor;\r\n      let embedding: tf.Tensor;\r\n      if (config.includeEmbedding) {\r\n        await this.ensureModelWithEmbeddingOutputCreated();\r\n        [y, embedding] =\r\n            this.modelWithEmbeddingOutput.predict(normalizedX) as tf.Tensor[];\r\n      } else {\r\n        y = this.model.predict(normalizedX) as tf.Tensor;\r\n      }\r\n\r\n      const scores = await y.data() as Float32Array;\r\n      const maxIndexTensor = y.argMax(-1);\r\n      const maxIndex = (await maxIndexTensor.data())[0];\r\n      const maxScore = Math.max(...scores);\r\n      tf.dispose([y, maxIndexTensor, normalizedX]);\r\n\r\n      if (maxScore < probabilityThreshold) {\r\n        return false;\r\n      } else {\r\n        let spectrogram: SpectrogramData = undefined;\r\n        if (config.includeSpectrogram) {\r\n          spectrogram = {\r\n            data: await x.data() as Float32Array,\r\n            frameSize: this.nonBatchInputShape[1],\r\n          };\r\n        }\r\n\r\n        let wordDetected = true;\r\n        if (!invokeCallbackOnNoiseAndUnknown) {\r\n          // Skip background noise and unknown tokens.\r\n          if (this.words[maxIndex] === BACKGROUND_NOISE_TAG ||\r\n              this.words[maxIndex] === UNKNOWN_TAG) {\r\n            wordDetected = false;\r\n          }\r\n        }\r\n        if (wordDetected) {\r\n          callback({scores, spectrogram, embedding});\r\n        }\r\n        // Trigger suppression only if the word is neither unknown or\r\n        // background noise.\r\n        return wordDetected;\r\n      }\r\n    };\r\n\r\n    const suppressionTimeMillis = config.suppressionTimeMillis == null ?\r\n        this.DEFAULT_SUPPRESSION_TIME_MILLIS :\r\n        config.suppressionTimeMillis;\r\n    this.audioDataExtractor = new BrowserFftFeatureExtractor({\r\n      sampleRateHz: this.parameters.sampleRateHz,\r\n      numFramesPerSpectrogram: this.nonBatchInputShape[0],\r\n      columnTruncateLength: this.nonBatchInputShape[1],\r\n      suppressionTimeMillis,\r\n      spectrogramCallback,\r\n      overlapFactor\r\n    });\r\n\r\n    await this.audioDataExtractor.start(config.audioTrackConstraints);\r\n\r\n    this.streaming = true;\r\n    console.log(this.streaming);\r\n  }\r\n\r\n  /**\r\n   * Load the underlying tf.LayersModel instance and associated metadata.\r\n   *\r\n   * If the model and the metadata are already loaded, do nothing.\r\n   */\r\n  async ensureModelLoaded() {\r\n    if (this.model != null) {\r\n      return;\r\n    }\r\n\r\n    await this.ensureMetadataLoaded();\r\n\r\n    let model: tf.LayersModel;\r\n    if (typeof this.modelArtifactsOrURL === 'string') {\r\n      model = await tf.loadLayersModel(this.modelArtifactsOrURL);\r\n    } else {\r\n      // this.modelArtifactsOrURL is an instance of `tf.io.ModelArtifacts`.\r\n      model = await tf.loadLayersModel(tf.io.fromMemory(\r\n          this.modelArtifactsOrURL.modelTopology,\r\n          this.modelArtifactsOrURL.weightSpecs,\r\n          this.modelArtifactsOrURL.weightData));\r\n    }\r\n\r\n    // Check the validity of the model's input shape.\r\n    if (model.inputs.length !== 1) {\r\n      throw new Error(\r\n          `Expected model to have 1 input, but got a model with ` +\r\n          `${model.inputs.length} inputs`);\r\n    }\r\n    if (model.inputs[0].shape.length !== 4) {\r\n      throw new Error(\r\n          `Expected model to have an input shape of rank 4, ` +\r\n          `but got an input shape of rank ${model.inputs[0].shape.length}`);\r\n    }\r\n    if (model.inputs[0].shape[3] !== 1) {\r\n      throw new Error(\r\n          `Expected model to have an input shape with 1 as the last ` +\r\n          `dimension, but got input shape` +\r\n          `${JSON.stringify(model.inputs[0].shape[3])}}`);\r\n    }\r\n    // Check the consistency between the word labels and the model's output\r\n    // shape.\r\n    const outputShape = model.outputShape as tf.Shape;\r\n    if (outputShape.length !== 2) {\r\n      throw new Error(\r\n          `Expected loaded model to have an output shape of rank 2,` +\r\n          `but received shape ${JSON.stringify(outputShape)}`);\r\n    }\r\n    if (outputShape[1] !== this.words.length) {\r\n      throw new Error(\r\n          `Mismatch between the last dimension of model's output shape ` +\r\n          `(${outputShape[1]}) and number of words ` +\r\n          `(${this.words.length}).`);\r\n    }\r\n\r\n    this.model = model;\r\n    this.freezeModel();\r\n\r\n    this.nonBatchInputShape =\r\n        model.inputs[0].shape.slice(1) as [number, number, number];\r\n    this.elementsPerExample = 1;\r\n    model.inputs[0].shape.slice(1).forEach(\r\n        dimSize => this.elementsPerExample *= dimSize);\r\n    this.warmUpModel();\r\n    const frameDurationMillis =\r\n        this.parameters.fftSize / this.parameters.sampleRateHz * 1e3;\r\n    const numFrames = model.inputs[0].shape[1];\r\n    this.parameters.spectrogramDurationMillis = numFrames * frameDurationMillis;\r\n  }\r\n\r\n  /**\r\n   * Construct a two-output model that includes the following outputs:\r\n   *\r\n   * 1. The same softmax probability output as the original model's output\r\n   * 2. The embedding, i.e., activation from the second-last dense layer of\r\n   *    the original model.\r\n   */\r\n  protected async ensureModelWithEmbeddingOutputCreated() {\r\n    if (this.modelWithEmbeddingOutput != null) {\r\n      return;\r\n    }\r\n    await this.ensureModelLoaded();\r\n\r\n    // Find the second last dense layer of the original model.\r\n    let secondLastDenseLayer: tf.layers.Layer;\r\n    for (let i = this.model.layers.length - 2; i >= 0; --i) {\r\n      if (this.model.layers[i].getClassName() === 'Dense') {\r\n        secondLastDenseLayer = this.model.layers[i];\r\n        break;\r\n      }\r\n    }\r\n    if (secondLastDenseLayer == null) {\r\n      throw new Error(\r\n          'Failed to find second last dense layer in the original model.');\r\n    }\r\n    this.modelWithEmbeddingOutput = tf.model({\r\n      inputs: this.model.inputs,\r\n      outputs: [\r\n        this.model.outputs[0], secondLastDenseLayer.output as tf.SymbolicTensor\r\n      ]\r\n    });\r\n  }\r\n\r\n  private warmUpModel() {\r\n    tf.tidy(() => {\r\n      const x = tf.zeros([1].concat(this.nonBatchInputShape));\r\n      for (let i = 0; i < 3; ++i) {\r\n        this.model.predict(x);\r\n      }\r\n    });\r\n  }\r\n\r\n  private async ensureMetadataLoaded() {\r\n    if (this.words != null) {\r\n      return;\r\n    }\r\n\r\n    const metadataJSON = typeof this.metadataOrURL === 'string' ?\r\n        await loadMetadataJson(this.metadataOrURL) :\r\n        this.metadataOrURL;\r\n\r\n    if (metadataJSON.wordLabels == null) {\r\n      // In some legacy formats, the field 'words', instead of 'wordLabels',\r\n      // was populated. This branch ensures backward compatibility with those\r\n      // formats.\r\n      // tslint:disable-next-line:no-any\r\n      const legacyWords = (metadataJSON as any)['words'] as string[];\r\n      if (legacyWords == null) {\r\n        throw new Error(\r\n            'Cannot find field \"words\" or \"wordLabels\" in metadata JSON file');\r\n      }\r\n      this.words = legacyWords;\r\n    } else {\r\n      this.words = metadataJSON.wordLabels;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop streaming recognition.\r\n   *\r\n   * @throws Error if there is not ongoing streaming recognition.\r\n   */\r\n  async stopListening(): Promise<void> {\r\n    if (!this.streaming) {\r\n      throw new Error('Cannot stop streaming when streaming is not ongoing.');\r\n    }\r\n    await this.audioDataExtractor.stop();\r\n    this.streaming = false;\r\n  }\r\n\r\n  /**\r\n   * Check if streaming recognition is ongoing.\r\n   */\r\n  isListening(): boolean {\r\n    return this.streaming;\r\n  }\r\n\r\n  /**\r\n   * Get the array of word labels.\r\n   *\r\n   * @throws Error If this model is called before the model is loaded.\r\n   */\r\n  wordLabels(): string[] {\r\n    return this.words;\r\n  }\r\n\r\n  /**\r\n   * Get the parameters of this instance of BrowserFftSpeechCommandRecognizer.\r\n   *\r\n   * @returns Parameters of this instance.\r\n   */\r\n  params(): RecognizerParams {\r\n    return this.parameters;\r\n  }\r\n\r\n  /**\r\n   * Get the input shape of the underlying tf.LayersModel.\r\n   *\r\n   * @returns The input shape.\r\n   */\r\n  modelInputShape(): tf.Shape {\r\n    if (this.model == null) {\r\n      throw new Error(\r\n          'Model has not been loaded yet. Load model by calling ' +\r\n          'ensureModelLoaded(), recognize(), or listen().');\r\n    }\r\n    return this.model.inputs[0].shape;\r\n  }\r\n\r\n  /**\r\n   * Run offline (non-streaming) recognition on a spectrogram.\r\n   *\r\n   * @param input Spectrogram. Either a `tf.Tensor` of a `Float32Array`.\r\n   *   - If a `tf.Tensor`, must be rank-4 and match the model's expected\r\n   *     input shape in 2nd dimension (# of spectrogram columns), the 3rd\r\n   *     dimension (# of frequency-domain points per column), and the 4th\r\n   *     dimension (always 1). The 1st dimension can be 1, for single-example\r\n   *     recogntion, or any value >1, for batched recognition.\r\n   *   - If a `Float32Array`, must have a length divisible by the number\r\n   *     of elements per spectrogram, i.e.,\r\n   *     (# of spectrogram columns) * (# of frequency-domain points per column).\r\n   * @param config Optional configuration object.\r\n   * @returns Result of the recognition, with the following field:\r\n   *   scores:\r\n   *   - A `Float32Array` if there is only one input exapmle.\r\n   *   - An `Array` of `Float32Array`, if there are multiple input examples.\r\n   */\r\n  async recognize(input?: tf.Tensor|Float32Array, config?: RecognizeConfig):\r\n      Promise<SpeechCommandRecognizerResult> {\r\n    if (config == null) {\r\n      config = {};\r\n    }\r\n\r\n    await this.ensureModelLoaded();\r\n\r\n    if (input == null) {\r\n      // If `input` is not provided, draw audio data from WebAudio and us it\r\n      // for recognition.\r\n      const spectrogramData = await this.recognizeOnline();\r\n      input = spectrogramData.data;\r\n    }\r\n\r\n    let numExamples: number;\r\n    let inputTensor: tf.Tensor;\r\n    let outTensor: tf.Tensor;\r\n    if (input instanceof tf.Tensor) {\r\n      // Check input shape.\r\n      this.checkInputTensorShape(input);\r\n      inputTensor = input;\r\n      numExamples = input.shape[0];\r\n    } else {\r\n      if (input.length % this.elementsPerExample) {\r\n        throw new Error(\r\n            `The length of the input Float32Array ${input.length} ` +\r\n            `is not divisible by the number of tensor elements per ` +\r\n            `per example expected by the model ${this.elementsPerExample}.`);\r\n      }\r\n\r\n      numExamples = input.length / this.elementsPerExample;\r\n      inputTensor = tf.tensor4d(input, [\r\n        numExamples\r\n      ].concat(this.nonBatchInputShape) as [number, number, number, number]);\r\n    }\r\n\r\n    const output: SpeechCommandRecognizerResult = {scores: null};\r\n    if (config.includeEmbedding) {\r\n      // Optional inclusion of embedding (internal activation).\r\n      await this.ensureModelWithEmbeddingOutputCreated();\r\n      const outAndEmbedding =\r\n          this.modelWithEmbeddingOutput.predict(inputTensor) as tf.Tensor[];\r\n      outTensor = outAndEmbedding[0];\r\n      output.embedding = outAndEmbedding[1];\r\n    } else {\r\n      outTensor = this.model.predict(inputTensor) as tf.Tensor;\r\n    }\r\n\r\n    if (numExamples === 1) {\r\n      output.scores = await outTensor.data() as Float32Array;\r\n    } else {\r\n      const unstacked = tf.unstack(outTensor);\r\n      const scorePromises = unstacked.map(item => item.data());\r\n      output.scores = await Promise.all(scorePromises) as Float32Array[];\r\n      tf.dispose(unstacked);\r\n    }\r\n\r\n    if (config.includeSpectrogram) {\r\n      output.spectrogram = {\r\n        data: (input instanceof tf.Tensor ? await input.data() : input) as\r\n            Float32Array,\r\n        frameSize: this.nonBatchInputShape[1],\r\n      };\r\n    }\r\n\r\n    tf.dispose(outTensor);\r\n    return output;\r\n  }\r\n\r\n  private async recognizeOnline(): Promise<SpectrogramData> {\r\n    return new Promise<SpectrogramData>((resolve, reject) => {\r\n      const spectrogramCallback: SpectrogramCallback = async (x: tf.Tensor) => {\r\n        const normalizedX = normalize(x);\r\n        await this.audioDataExtractor.stop();\r\n        resolve({\r\n          data: await normalizedX.data() as Float32Array,\r\n          frameSize: this.nonBatchInputShape[1],\r\n        });\r\n        normalizedX.dispose();\r\n        return false;\r\n      };\r\n      this.audioDataExtractor = new BrowserFftFeatureExtractor({\r\n        sampleRateHz: this.parameters.sampleRateHz,\r\n        numFramesPerSpectrogram: this.nonBatchInputShape[0],\r\n        columnTruncateLength: this.nonBatchInputShape[1],\r\n        suppressionTimeMillis: 0,\r\n        spectrogramCallback,\r\n        overlapFactor: 0\r\n      });\r\n      this.audioDataExtractor.start();\r\n    });\r\n  }\r\n\r\n  createTransfer(name: string): TransferSpeechCommandRecognizer {\r\n    if (this.model == null) {\r\n      throw new Error(\r\n          'Model has not been loaded yet. Load model by calling ' +\r\n          'ensureModelLoaded(), recognizer(), or listen().');\r\n    }\r\n    if (name == \"\") {\r\n      throw new Error(\r\n        'Model has not been loaded yet. Load model by calling ' +\r\n        'ensureModelLoaded(), recognizer(), or listen().');\r\n    }\r\n    tf.util.assert(\r\n        name != null && typeof name === 'string' && name.length > 1,\r\n        () => `Expected the name for a transfer-learning recognized to be a ` +\r\n            `non-empty string, but got ${JSON.stringify(name)}`);\r\n    tf.util.assert(\r\n        this.transferRecognizers[name] == null,\r\n        () => `There is already a transfer-learning model named '${name}'`);\r\n    const transfer = new TransferBrowserFftSpeechCommandRecognizer(\r\n        name, this.parameters, this.model);\r\n    this.transferRecognizers[name] = transfer;\r\n    return transfer;\r\n  }\r\n\r\n  protected freezeModel(): void {\r\n    for (const layer of this.model.layers) {\r\n      layer.trainable = false;\r\n    }\r\n  }\r\n\r\n  private checkInputTensorShape(input: tf.Tensor) {\r\n    const expectedRank = this.model.inputs[0].shape.length;\r\n    if (input.shape.length !== expectedRank) {\r\n      throw new Error(\r\n          `Expected input Tensor to have rank ${expectedRank}, ` +\r\n          `but got rank ${input.shape.length} that differs `);\r\n    }\r\n    const nonBatchedShape = input.shape.slice(1);\r\n    const expectedNonBatchShape = this.model.inputs[0].shape.slice(1);\r\n    if (!tf.util.arraysEqual(nonBatchedShape, expectedNonBatchShape)) {\r\n      throw new Error(\r\n          `Expected input to have shape [null,${expectedNonBatchShape}], ` +\r\n          `but got shape [null,${nonBatchedShape}]`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A subclass of BrowserFftSpeechCommandRecognizer: Transfer-learned model.\r\n */\r\nclass TransferBrowserFftSpeechCommandRecognizer extends\r\n    BrowserFftSpeechCommandRecognizer implements\r\n        TransferSpeechCommandRecognizer {\r\n  private dataset: Dataset;\r\n  private transferHead: tf.Sequential;\r\n\r\n  /**\r\n   * Constructor of TransferBrowserFftSpeechCommandRecognizer.\r\n   *\r\n   * @param name Name of the transfer-learned recognizer. Must be a non-empty\r\n   *   string.\r\n   * @param parameters Parameters from the base recognizer.\r\n   * @param baseModel Model from the base recognizer.\r\n   */\r\n  constructor(\r\n      readonly name: string, readonly parameters: RecognizerParams,\r\n      readonly baseModel: tf.LayersModel) {\r\n    super();\r\n    tf.util.assert(\r\n        name != null && typeof name === 'string' && name.length > 0,\r\n        () => `The name of a transfer model must be a non-empty string, ` +\r\n            `but got ${JSON.stringify(name)}`);\r\n    this.nonBatchInputShape =\r\n        this.baseModel.inputs[0].shape.slice(1) as [number, number, number];\r\n    this.words = null;\r\n    this.dataset = new Dataset();\r\n  }\r\n\r\n  /**\r\n   * Collect an example for transfer learning via WebAudio.\r\n   *\r\n   * @param {string} word Name of the word. Must not overlap with any of the\r\n   *   words the base model is trained to recognize.\r\n   * @param {ExampleCollectionOptions}\r\n   * @returns {SpectrogramData} The spectrogram of the acquired the example.\r\n   * @throws Error, if word belongs to the set of words the base model is\r\n   *   trained to recognize.\r\n   */\r\n  async collectExample(word: string, options?: ExampleCollectionOptions):\r\n      Promise<SpectrogramData> {\r\n    tf.util.assert(\r\n        !this.streaming,\r\n        () => 'Cannot start collection of transfer-learning example because ' +\r\n            'a streaming recognition or transfer-learning example collection ' +\r\n            'is ongoing');\r\n    tf.util.assert(\r\n        word != null && typeof word === 'string' && word.length > 0,\r\n        () => `Must provide a non-empty string when collecting transfer-` +\r\n            `learning example`);\r\n\r\n    if (options == null) {\r\n      options = {};\r\n    }\r\n    if (options.durationMultiplier != null && options.durationSec != null) {\r\n      throw new Error(\r\n          `durationMultiplier and durationSec are mutually exclusive, ` +\r\n          `but are both specified.`);\r\n    }\r\n\r\n    let numFramesPerSpectrogram: number;\r\n    if (options.durationSec != null) {\r\n      tf.util.assert(\r\n          options.durationSec > 0,\r\n          () =>\r\n              `Expected durationSec to be > 0, but got ${options.durationSec}`);\r\n      const frameDurationSec =\r\n          this.parameters.fftSize / this.parameters.sampleRateHz;\r\n      numFramesPerSpectrogram =\r\n          Math.ceil(options.durationSec / frameDurationSec);\r\n    } else if (options.durationMultiplier != null) {\r\n      tf.util.assert(\r\n          options.durationMultiplier >= 1,\r\n          () => `Expected duration multiplier to be >= 1, ` +\r\n              `but got ${options.durationMultiplier}`);\r\n      numFramesPerSpectrogram =\r\n          Math.round(this.nonBatchInputShape[0] * options.durationMultiplier);\r\n    } else {\r\n      numFramesPerSpectrogram = this.nonBatchInputShape[0];\r\n    }\r\n\r\n    if (options.snippetDurationSec != null) {\r\n      tf.util.assert(\r\n          options.snippetDurationSec > 0,\r\n          () => `snippetDurationSec is expected to be > 0, but got ` +\r\n              `${options.snippetDurationSec}`);\r\n      tf.util.assert(\r\n          options.onSnippet != null,\r\n          () => `onSnippet must be provided if snippetDurationSec ` +\r\n              `is provided.`);\r\n    }\r\n    if (options.onSnippet != null) {\r\n      tf.util.assert(\r\n          options.snippetDurationSec != null,\r\n          () => `snippetDurationSec must be provided if onSnippet ` +\r\n              `is provided.`);\r\n    }\r\n    const frameDurationSec =\r\n        this.parameters.fftSize / this.parameters.sampleRateHz;\r\n    const totalDurationSec = frameDurationSec * numFramesPerSpectrogram;\r\n\r\n    this.streaming = true;\r\n    return new Promise<SpectrogramData>(resolve => {\r\n      const stepFactor = options.snippetDurationSec == null ?\r\n          1 :\r\n          options.snippetDurationSec / totalDurationSec;\r\n      const overlapFactor = 1 - stepFactor;\r\n      const callbackCountTarget = Math.round(1 / stepFactor);\r\n      let callbackCount = 0;\r\n      let lastIndex = -1;\r\n      const spectrogramSnippets: Float32Array[] = [];\r\n\r\n      const spectrogramCallback: SpectrogramCallback =\r\n          async (freqData: tf.Tensor, timeData?: tf.Tensor) => {\r\n        // TODO(cais): can we consolidate the logic in the two branches?\r\n        if (options.onSnippet == null) {\r\n          const normalizedX = normalize(freqData);\r\n          this.dataset.addExample({\r\n            label: word,\r\n            spectrogram: {\r\n              data: await normalizedX.data() as Float32Array,\r\n              frameSize: this.nonBatchInputShape[1],\r\n            },\r\n            rawAudio: options.includeRawAudio ? {\r\n              data: await timeData.data() as Float32Array,\r\n              sampleRateHz: this.audioDataExtractor.sampleRateHz\r\n            } :\r\n                                                undefined\r\n          });\r\n          normalizedX.dispose();\r\n          await this.audioDataExtractor.stop();\r\n          this.streaming = false;\r\n          this.collateTransferWords();\r\n          resolve({\r\n            data: await freqData.data() as Float32Array,\r\n            frameSize: this.nonBatchInputShape[1],\r\n          });\r\n        } else {\r\n          const data = await freqData.data() as Float32Array;\r\n          if (lastIndex === -1) {\r\n            lastIndex = data.length;\r\n          }\r\n          let i = lastIndex - 1;\r\n          while (data[i] !== 0 && i >= 0) {\r\n            i--;\r\n          }\r\n          const increment = lastIndex - i - 1;\r\n          lastIndex = i + 1;\r\n          const snippetData = data.slice(data.length - increment, data.length);\r\n          spectrogramSnippets.push(snippetData);\r\n\r\n          if (options.onSnippet != null) {\r\n            options.onSnippet(\r\n                {data: snippetData, frameSize: this.nonBatchInputShape[1]});\r\n          }\r\n\r\n          if (callbackCount++ === callbackCountTarget) {\r\n            await this.audioDataExtractor.stop();\r\n            this.streaming = false;\r\n            this.collateTransferWords();\r\n\r\n            const normalized = normalizeFloat32Array(\r\n                concatenateFloat32Arrays(spectrogramSnippets));\r\n            const finalSpectrogram: SpectrogramData = {\r\n              data: normalized,\r\n              frameSize: this.nonBatchInputShape[1]\r\n            };\r\n            this.dataset.addExample({\r\n              label: word,\r\n              spectrogram: finalSpectrogram,\r\n              rawAudio: options.includeRawAudio ? {\r\n                data: await timeData.data() as Float32Array,\r\n                sampleRateHz: this.audioDataExtractor.sampleRateHz\r\n              } :\r\n                                                  undefined\r\n            });\r\n            // TODO(cais): Fix 1-tensor memory leak.\r\n            resolve(finalSpectrogram);\r\n          }\r\n        }\r\n        return false;\r\n      };\r\n      this.audioDataExtractor = new BrowserFftFeatureExtractor({\r\n        sampleRateHz: this.parameters.sampleRateHz,\r\n        numFramesPerSpectrogram,\r\n        columnTruncateLength: this.nonBatchInputShape[1],\r\n        suppressionTimeMillis: 0,\r\n        spectrogramCallback,\r\n        overlapFactor,\r\n        includeRawAudio: options.includeRawAudio\r\n      });\r\n      this.audioDataExtractor.start(options.audioTrackConstraints);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear all transfer learning examples collected so far.\r\n   */\r\n  clearExamples(): void {\r\n    tf.util.assert(\r\n        this.words != null && this.words.length > 0 && !this.dataset.empty(),\r\n        () =>\r\n            `No transfer learning examples exist for model name ${this.name}`);\r\n    this.dataset.clear();\r\n    this.words = null;\r\n  }\r\n\r\n  /**\r\n   * Get counts of the word examples that have been collected for a\r\n   * transfer-learning model.\r\n   *\r\n   * @returns {{[word: string]: number}} A map from word name to number of\r\n   *   examples collected for that word so far.\r\n   */\r\n  countExamples(): {[word: string]: number} {\r\n    if (this.dataset.empty()) {\r\n      throw new Error(\r\n          `No examples have been collected for transfer-learning model ` +\r\n          `named '${this.name}' yet.`);\r\n    }\r\n    return this.dataset.getExampleCounts();\r\n  }\r\n\r\n  /**\r\n   * Get examples currently held by the transfer-learning recognizer.\r\n   *\r\n   * @param label Label requested.\r\n   * @returns An array of `Example`s, along with their UIDs.\r\n   */\r\n  getExamples(label: string): Array<{uid: string, example: Example}> {\r\n    return this.dataset.getExamples(label);\r\n  }\r\n\r\n  /** Set the key frame index of a given example. */\r\n  setExampleKeyFrameIndex(uid: string, keyFrameIndex: number): void {\r\n    this.dataset.setExampleKeyFrameIndex(uid, keyFrameIndex);\r\n  }\r\n\r\n  /**\r\n   * Remove an example from the current dataset.\r\n   *\r\n   * @param uid The UID of the example to remove.\r\n   */\r\n  removeExample(uid: string): void {\r\n    this.dataset.removeExample(uid);\r\n    this.collateTransferWords();\r\n  }\r\n\r\n  /**\r\n   * Check whether the underlying dataset is empty.\r\n   *\r\n   * @returns A boolean indicating whether the underlying dataset is empty.\r\n   */\r\n  isDatasetEmpty(): boolean {\r\n    return this.dataset.empty();\r\n  }\r\n\r\n  /**\r\n   * Load an array of serialized examples.\r\n   *\r\n   * @param serialized The examples in their serialized format.\r\n   * @param clearExisting Whether to clear the existing examples while\r\n   *   performing the loading (default: false).\r\n   */\r\n  loadExamples(serialized: ArrayBuffer, clearExisting = false): void {\r\n    const incomingDataset = new Dataset(serialized);\r\n    if (clearExisting) {\r\n      this.clearExamples();\r\n    }\r\n\r\n    const incomingVocab = incomingDataset.getVocabulary();\r\n    for (const label of incomingVocab) {\r\n      const examples = incomingDataset.getExamples(label);\r\n      for (const example of examples) {\r\n        this.dataset.addExample(example.example);\r\n      }\r\n    }\r\n\r\n    this.collateTransferWords();\r\n  }\r\n\r\n  /**\r\n   * Serialize the existing examples.\r\n   *\r\n   * @param wordLabels Optional word label(s) to serialize. If specified, only\r\n   *   the examples with labels matching the argument will be serialized. If\r\n   *   any specified word label does not exist in the vocabulary of this\r\n   *   transfer recognizer, an Error will be thrown.\r\n   * @returns An `ArrayBuffer` object amenable to transmission and storage.\r\n   */\r\n  serializeExamples(wordLabels?: string|string[]): ArrayBuffer {\r\n    return this.dataset.serialize(wordLabels);\r\n  }\r\n\r\n  /**\r\n   * Collect the vocabulary of this transfer-learned recognizer.\r\n   *\r\n   * The words are put in an alphabetically sorted order.\r\n   */\r\n  private collateTransferWords() {\r\n    this.words = this.dataset.getVocabulary();\r\n  }\r\n\r\n  /**\r\n   * Collect the transfer-learning data as `tf.Tensor`s.\r\n   *\r\n   * Used for training and evaluation when the amount of data is relatively\r\n   * small.\r\n   *\r\n   * @param windowHopRatio Ratio betwen hop length in number of frames and the\r\n   *   number of frames in a long spectrogram. Used during extraction\r\n   *   of multiple windows from the long spectrogram.\r\n   * @returns xs: The feature tensors (xs), a 4D tf.Tensor.\r\n   *          ys: The target tensors (ys), one-hot encoding, a 2D tf.Tensor.\r\n   */\r\n  private collectTransferDataAsTensors(\r\n      windowHopRatio?: number,\r\n      augmentationOptions?: AudioDataAugmentationOptions):\r\n      {xs: tf.Tensor, ys: tf.Tensor} {\r\n    const numFrames = this.nonBatchInputShape[0];\r\n    windowHopRatio = windowHopRatio || DEFAULT_WINDOW_HOP_RATIO;\r\n    const hopFrames = Math.round(windowHopRatio * numFrames);\r\n    const out = this.dataset.getData(\r\n                    null, {numFrames, hopFrames, ...augmentationOptions}) as\r\n        {xs: tf.Tensor4D, ys?: tf.Tensor2D};\r\n    return {xs: out.xs, ys: out.ys as tf.Tensor};\r\n  }\r\n\r\n  /**\r\n   * Same as `collectTransferDataAsTensors`, but returns `tf.data.Dataset`s.\r\n   *\r\n   * Used for training and evaluation when the amount of data is large.\r\n   *\r\n   * @param windowHopRatio Ratio betwen hop length in number of frames and the\r\n   *   number of frames in a long spectrogram. Used during extraction\r\n   *   of multiple windows from the long spectrogram.\r\n   * @param validationSplit The validation split to be used for splitting\r\n   *   the raw data between the `tf.data.Dataset` objects for training and\r\n   *   validation.\r\n   * @param batchSize Batch size used for the `tf.data.Dataset.batch()` call\r\n   *   during the creation of the dataset objects.\r\n   * @return Two `tf.data.Dataset` objects, one for training and one for\r\n   *   validation. Each of the objects may be directly fed into\r\n   *   `this.model.fitDataset`.\r\n   */\r\n  private collectTransferDataAsTfDataset(\r\n      windowHopRatio?: number, validationSplit = 0.15, batchSize = 32,\r\n      augmentationOptions?: AudioDataAugmentationOptions):\r\n      [tf.data.Dataset<{}>, tf.data.Dataset<{}>] {\r\n    const numFrames = this.nonBatchInputShape[0];\r\n    windowHopRatio = windowHopRatio || DEFAULT_WINDOW_HOP_RATIO;\r\n    const hopFrames = Math.round(windowHopRatio * numFrames);\r\n    return this.dataset.getData(null, {\r\n      numFrames,\r\n      hopFrames,\r\n      getDataset: true,\r\n      datasetBatchSize: batchSize,\r\n      datasetValidationSplit: validationSplit,\r\n      ...augmentationOptions\r\n    }) as [tf.data.Dataset<{}>, tf.data.Dataset<{}>];\r\n    // TODO(cais): See if we can tighten the typing.\r\n  }\r\n\r\n  /**\r\n   * Train the transfer-learning model.\r\n   *\r\n   * The last dense layer of the base model is replaced with new softmax dense\r\n   * layer.\r\n   *\r\n   * It is assume that at least one category of data has been collected (using\r\n   * multiple calls to the `collectTransferExample` method).\r\n   *\r\n   * @param config {TransferLearnConfig} Optional configurations fot the\r\n   *   training of the transfer-learning model.\r\n   * @returns {tf.History} A history object with the loss and accuracy values\r\n   *   from the training of the transfer-learning model.\r\n   * @throws Error, if `modelName` is invalid or if not sufficient training\r\n   *   examples have been collected yet.\r\n   */\r\n  async train(config?: TransferLearnConfig):\r\n      Promise<tf.History|[tf.History, tf.History]> {\r\n    tf.util.assert(\r\n        this.words != null && this.words.length > 0,\r\n        () =>\r\n            `Cannot train transfer-learning model '${this.name}' because no ` +\r\n            `transfer learning example has been collected.`);\r\n    tf.util.assert(\r\n        this.words.length > 1,\r\n        () => `Cannot train transfer-learning model '${\r\n                  this.name}' because only ` +\r\n            `1 word label ('${JSON.stringify(this.words)}') ` +\r\n            `has been collected for transfer learning. Requires at least 2.`);\r\n    if (config.fineTuningEpochs != null) {\r\n      tf.util.assert(\r\n          config.fineTuningEpochs >= 0 &&\r\n              Number.isInteger(config.fineTuningEpochs),\r\n          () => `If specified, fineTuningEpochs must be a non-negative ` +\r\n              `integer, but received ${config.fineTuningEpochs}`);\r\n    }\r\n\r\n    if (config == null) {\r\n      config = {};\r\n    }\r\n\r\n    if (this.model == null) {\r\n      this.createTransferModelFromBaseModel();\r\n    }\r\n\r\n    // This layer needs to be frozen for the initial phase of the\r\n    // transfer learning. During subsequent fine-tuning (if any), it will\r\n    // be unfrozen.\r\n    this.secondLastBaseDenseLayer.trainable = false;\r\n\r\n    // Compile model for training.\r\n    this.model.compile({\r\n      loss: 'categoricalCrossentropy',\r\n      optimizer: config.optimizer || 'sgd',\r\n      metrics: ['acc']\r\n    });\r\n\r\n    // Use `tf.data.Dataset` objects for training of the total duration of\r\n    // the recordings exceeds 60 seconds. Otherwise, use `tf.Tensor` objects.\r\n    const datasetDurationMillisThreshold =\r\n        config.fitDatasetDurationMillisThreshold == null ?\r\n        60e3 :\r\n        config.fitDatasetDurationMillisThreshold;\r\n    if (this.dataset.durationMillis() > datasetDurationMillisThreshold) {\r\n      console.log(\r\n          `Detected large dataset: total duration = ` +\r\n          `${this.dataset.durationMillis()} ms > ` +\r\n          `${datasetDurationMillisThreshold} ms. ` +\r\n          `Training transfer model using fitDataset() instead of fit()`);\r\n      return this.trainOnDataset(config);\r\n    } else {\r\n      return this.trainOnTensors(config);\r\n    }\r\n  }\r\n\r\n  /** Helper function for training on tf.data.Dataset objects. */\r\n  private async trainOnDataset(config?: TransferLearnConfig):\r\n      Promise<tf.History|[tf.History, tf.History]> {\r\n    tf.util.assert(config.epochs > 0, () => `Invalid config.epochs`);\r\n    // Train transfer-learning model using fitDataset\r\n\r\n    const batchSize = config.batchSize == null ? 32 : config.batchSize;\r\n    const windowHopRatio = config.windowHopRatio || DEFAULT_WINDOW_HOP_RATIO;\r\n    const [trainDataset, valDataset] = this.collectTransferDataAsTfDataset(\r\n        windowHopRatio, config.validationSplit, batchSize,\r\n        {augmentByMixingNoiseRatio: config.augmentByMixingNoiseRatio});\r\n    const t0 = tf.util.now();\r\n    const history = await this.model.fitDataset(trainDataset, {\r\n      epochs: config.epochs,\r\n      validationData: config.validationSplit > 0 ? valDataset : null,\r\n      callbacks: config.callback == null ? null : [config.callback]\r\n    });\r\n    console.log(`fitDataset() took ${(tf.util.now() - t0).toFixed(2)} ms`);\r\n\r\n    if (config.fineTuningEpochs != null && config.fineTuningEpochs > 0) {\r\n      // Perform fine-tuning.\r\n      const t0 = tf.util.now();\r\n      const fineTuningHistory = await this.fineTuningUsingTfDatasets(\r\n          config, trainDataset, valDataset);\r\n      console.log(\r\n          `fitDataset() (fine-tuning) took ` +\r\n          `${(tf.util.now() - t0).toFixed(2)} ms`);\r\n      return [history, fineTuningHistory];\r\n    } else {\r\n      return history;\r\n    }\r\n  }\r\n\r\n  /** Helper function for training on tf.Tensor objects. */\r\n  private async trainOnTensors(config?: TransferLearnConfig):\r\n      Promise<tf.History|[tf.History, tf.History]> {\r\n    // Prepare the data.\r\n    const windowHopRatio = config.windowHopRatio || DEFAULT_WINDOW_HOP_RATIO;\r\n    const {xs, ys} = this.collectTransferDataAsTensors(\r\n        windowHopRatio,\r\n        {augmentByMixingNoiseRatio: config.augmentByMixingNoiseRatio});\r\n    console.log(\r\n        `Training data: xs.shape = ${xs.shape}, ys.shape = ${ys.shape}`);\r\n\r\n    let trainXs: tf.Tensor;\r\n    let trainYs: tf.Tensor;\r\n    let valData: [tf.Tensor, tf.Tensor];\r\n    try {\r\n      // TODO(cais): The balanced split may need to be pushed down to the\r\n      //   level of the Dataset class to avoid leaks between train and val\r\n      //   splits.\r\n      if (config.validationSplit != null) {\r\n        const splits = balancedTrainValSplit(xs, ys, config.validationSplit);\r\n        trainXs = splits.trainXs;\r\n        trainYs = splits.trainYs;\r\n        valData = [splits.valXs, splits.valYs];\r\n      } else {\r\n        trainXs = xs;\r\n        trainYs = ys;\r\n      }\r\n\r\n      const history = await this.model.fit(trainXs, trainYs, {\r\n        epochs: config.epochs == null ? 20 : config.epochs,\r\n        validationData: valData,\r\n        batchSize: config.batchSize,\r\n        callbacks: config.callback == null ? null : [config.callback]\r\n      });\r\n\r\n      if (config.fineTuningEpochs != null && config.fineTuningEpochs > 0) {\r\n        // Fine tuning: unfreeze the second-last dense layer of the base\r\n        // model.\r\n        const fineTuningHistory = await this.fineTuningUsingTensors(\r\n            config, trainXs, trainYs, valData);\r\n        return [history, fineTuningHistory];\r\n      } else {\r\n        return history;\r\n      }\r\n    } finally {\r\n      tf.dispose([xs, ys, trainXs, trainYs, valData]);\r\n    }\r\n  }\r\n\r\n  private async fineTuningUsingTfDatasets(\r\n      config: TransferLearnConfig, trainDataset: tf.data.Dataset<{}>,\r\n      valDataset: tf.data.Dataset<{}>): Promise<tf.History> {\r\n    const originalTrainableValue = this.secondLastBaseDenseLayer.trainable;\r\n    this.secondLastBaseDenseLayer.trainable = true;\r\n\r\n    // Recompile model after unfreezing layer.\r\n    const fineTuningOptimizer: string|tf.Optimizer =\r\n        config.fineTuningOptimizer == null ? 'sgd' : config.fineTuningOptimizer;\r\n    this.model.compile({\r\n      loss: 'categoricalCrossentropy',\r\n      optimizer: fineTuningOptimizer,\r\n      metrics: ['acc']\r\n    });\r\n\r\n    const fineTuningHistory = await this.model.fitDataset(trainDataset, {\r\n      epochs: config.fineTuningEpochs,\r\n      validationData: valDataset,\r\n      callbacks: config.callback == null ? null : [config.callback]\r\n    });\r\n    // Set the trainable attribute of the fine-tuning layer to its\r\n    // previous value.\r\n    this.secondLastBaseDenseLayer.trainable = originalTrainableValue;\r\n    return fineTuningHistory;\r\n  }\r\n\r\n  private async fineTuningUsingTensors(\r\n      config: TransferLearnConfig, trainXs: tf.Tensor, trainYs: tf.Tensor,\r\n      valData: [tf.Tensor, tf.Tensor]): Promise<tf.History> {\r\n    const originalTrainableValue = this.secondLastBaseDenseLayer.trainable;\r\n    this.secondLastBaseDenseLayer.trainable = true;\r\n\r\n    // Recompile model after unfreezing layer.\r\n    const fineTuningOptimizer: string|tf.Optimizer =\r\n        config.fineTuningOptimizer == null ? 'sgd' : config.fineTuningOptimizer;\r\n    this.model.compile({\r\n      loss: 'categoricalCrossentropy',\r\n      optimizer: fineTuningOptimizer,\r\n      metrics: ['acc']\r\n    });\r\n\r\n    const fineTuningHistory = await this.model.fit(trainXs, trainYs, {\r\n      epochs: config.fineTuningEpochs,\r\n      validationData: valData,\r\n      batchSize: config.batchSize,\r\n      callbacks: config.fineTuningCallback == null ? null :\r\n                                                     [config.fineTuningCallback]\r\n    });\r\n    // Set the trainable attribute of the fine-tuning layer to its\r\n    // previous value.\r\n    this.secondLastBaseDenseLayer.trainable = originalTrainableValue;\r\n    return fineTuningHistory;\r\n  }\r\n\r\n  /**\r\n   * Perform evaluation of the model using the examples that the model\r\n   * has loaded.\r\n   *\r\n   * @param config Configuration object for the evaluation.\r\n   * @returns A Promise of the result of evaluation.\r\n   */\r\n  async evaluate(config: EvaluateConfig): Promise<EvaluateResult> {\r\n    tf.util.assert(\r\n        config.wordProbThresholds != null &&\r\n            config.wordProbThresholds.length > 0,\r\n        () => `Received null or empty wordProbThresholds`);\r\n\r\n    // TODO(cais): Maybe relax this requirement.\r\n    const NOISE_CLASS_INDEX = 0;\r\n    tf.util.assert(\r\n        this.words[NOISE_CLASS_INDEX] === BACKGROUND_NOISE_TAG,\r\n        () => `Cannot perform evaluation when the first tag is not ` +\r\n            `${BACKGROUND_NOISE_TAG}`);\r\n\r\n    return tf.tidy(() => {\r\n      const rocCurve: ROCCurve = [];\r\n      let auc = 0;\r\n      const {xs, ys} = this.collectTransferDataAsTensors(config.windowHopRatio);\r\n      const indices = ys.argMax(-1).dataSync();\r\n      const probs = this.model.predict(xs) as tf.Tensor;\r\n\r\n      // To calcaulte ROC, we collapse all word probabilites into a single\r\n      // positive class, while _background_noise_ is treated as the\r\n      // negative class.\r\n      const maxWordProbs =\r\n          probs.slice([0, 1], [probs.shape[0], probs.shape[1] - 1]).max(-1);\r\n      const total = probs.shape[0];\r\n\r\n      // Calculate ROC curve.\r\n      for (let i = 0; i < config.wordProbThresholds.length; ++i) {\r\n        const probThreshold = config.wordProbThresholds[i];\r\n        const isWord =\r\n            maxWordProbs.greater(tf.scalar(probThreshold)).dataSync();\r\n\r\n        let negatives = 0;\r\n        let positives = 0;\r\n        let falsePositives = 0;\r\n        let truePositives = 0;\r\n        for (let i = 0; i < total; ++i) {\r\n          if (indices[i] === NOISE_CLASS_INDEX) {\r\n            negatives++;\r\n            if (isWord[i]) {\r\n              falsePositives++;\r\n            }\r\n          } else {\r\n            positives++;\r\n            if (isWord[i]) {\r\n              truePositives++;\r\n            }\r\n          }\r\n        }\r\n\r\n        // TODO(cais): Calculate per-hour false-positive rate.\r\n        const fpr = falsePositives / negatives;\r\n        const tpr = truePositives / positives;\r\n\r\n        rocCurve.push({probThreshold, fpr, tpr});\r\n        console.log(\r\n            `ROC thresh=${probThreshold}: ` +\r\n            `fpr=${fpr.toFixed(4)}, tpr=${tpr.toFixed(4)}`);\r\n\r\n        if (i > 0) {\r\n          // Accumulate to AUC.\r\n          auc += Math.abs((rocCurve[i - 1].fpr - rocCurve[i].fpr)) *\r\n              (rocCurve[i - 1].tpr + rocCurve[i].tpr) / 2;\r\n        }\r\n      }\r\n      return {rocCurve, auc};\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create an instance of tf.LayersModel for transfer learning.\r\n   *\r\n   * The top dense layer of the base model is replaced with a new softmax\r\n   * dense layer.\r\n   */\r\n  private createTransferModelFromBaseModel(): void {\r\n    tf.util.assert(\r\n        this.words != null,\r\n        () =>\r\n            `No word example is available for tranfer-learning model of name ` +\r\n            this.name);\r\n\r\n    // Find the second last dense layer.\r\n    const layers = this.baseModel.layers;\r\n    let layerIndex = layers.length - 2;\r\n    while (layerIndex >= 0) {\r\n      if (layers[layerIndex].getClassName().toLowerCase() === 'dense') {\r\n        break;\r\n      }\r\n      layerIndex--;\r\n    }\r\n    if (layerIndex < 0) {\r\n      throw new Error('Cannot find a hidden dense layer in the base model.');\r\n    }\r\n    this.secondLastBaseDenseLayer = layers[layerIndex];\r\n    const truncatedBaseOutput =\r\n        this.secondLastBaseDenseLayer.output as tf.SymbolicTensor;\r\n\r\n    this.transferHead = tf.sequential();\r\n    this.transferHead.add(tf.layers.dense({\r\n      units: this.words.length,\r\n      activation: 'softmax',\r\n      inputShape: truncatedBaseOutput.shape.slice(1),\r\n      name: 'NewHeadDense'\r\n    }));\r\n    const transferOutput =\r\n        this.transferHead.apply(truncatedBaseOutput) as tf.SymbolicTensor;\r\n    this.model =\r\n        tf.model({inputs: this.baseModel.inputs, outputs: transferOutput});\r\n  }\r\n\r\n  /**\r\n   * Get the input shape of the underlying tf.LayersModel.\r\n   *\r\n   * @returns The input shape.\r\n   */\r\n  modelInputShape(): tf.Shape {\r\n    return this.baseModel.inputs[0].shape;\r\n  }\r\n\r\n  getMetadata(): SpeechCommandRecognizerMetadata {\r\n    return {\r\n      tfjsSpeechCommandsVersion: version,\r\n      modelName: this.name,\r\n      timeStamp: new Date().toISOString(),\r\n      wordLabels: this.wordLabels()\r\n    };\r\n  }\r\n\r\n  async save(handlerOrURL?: string|tf.io.IOHandler): Promise<tf.io.SaveResult> {\r\n    const isCustomPath = handlerOrURL != null;\r\n    handlerOrURL = handlerOrURL || getCanonicalSavePath(this.name);\r\n\r\n    if (!isCustomPath) {\r\n      // First, save the words and other metadata.\r\n      const metadataMapStr =\r\n          localStorageWrapper.localStorage.getItem(SAVED_MODEL_METADATA_KEY);\r\n      const metadataMap =\r\n          metadataMapStr == null ? {} : JSON.parse(metadataMapStr);\r\n      metadataMap[this.name] = this.getMetadata();\r\n      localStorageWrapper.localStorage.setItem(\r\n          SAVED_MODEL_METADATA_KEY, JSON.stringify(metadataMap));\r\n    }\r\n    console.log(`Saving model to ${handlerOrURL}`);\r\n    return this.model.save(handlerOrURL);\r\n  }\r\n\r\n  async load(handlerOrURL?: string|tf.io.IOHandler): Promise<void> {\r\n    const isCustomPath = handlerOrURL != null;\r\n    handlerOrURL = handlerOrURL || getCanonicalSavePath(this.name);\r\n\r\n    if (!isCustomPath) {\r\n      // First, load the words and other metadata.\r\n      const metadataMap = JSON.parse(\r\n          localStorageWrapper.localStorage.getItem(SAVED_MODEL_METADATA_KEY));\r\n      if (metadataMap == null || metadataMap[this.name] == null) {\r\n        throw new Error(\r\n            `Cannot find metadata for transfer model named ${this.name}\"`);\r\n      }\r\n      this.words = metadataMap[this.name].wordLabels;\r\n      console.log(\r\n          `Loaded word list for model named ${this.name}: ${this.words}`);\r\n    }\r\n    this.model = await tf.loadLayersModel(handlerOrURL);\r\n    console.log(`Loaded model from ${handlerOrURL}:`);\r\n    this.model.summary();\r\n  }\r\n\r\n  /**\r\n   * Overridden method to prevent creating a nested transfer-learning\r\n   * recognizer.\r\n   *\r\n   * @param name\r\n   */\r\n  createTransfer(name: string): TransferBrowserFftSpeechCommandRecognizer {\r\n    throw new Error(\r\n        'Creating transfer-learned recognizer from a transfer-learned ' +\r\n        'recognizer is not supported.');\r\n  }\r\n}\r\n\r\nfunction getCanonicalSavePath(name: string): string {\r\n  return `${SAVE_PATH_PREFIX}${name}`;\r\n}\r\n\r\n/**\r\n * List the model that are currently saved locally in the browser.\r\n *\r\n * @returns An array of transfer-learned speech-commands models\r\n *   that are currently saved in the browser locally.\r\n */\r\nexport async function listSavedTransferModels(): Promise<string[]> {\r\n  const models = await tf.io.listModels();\r\n  const keys = [];\r\n  for (const key in models) {\r\n    if (key.startsWith(SAVE_PATH_PREFIX)) {\r\n      keys.push(key.slice(SAVE_PATH_PREFIX.length));\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\n/**\r\n * Delete a locally-saved, transfer-learned speech-commands model.\r\n *\r\n * @param name The name of the transfer-learned model to be deleted.\r\n */\r\nexport async function deleteSavedTransferModel(name: string): Promise<void> {\r\n  // Delete the words from local storage.\r\n  let metadataMap = JSON.parse(\r\n      localStorageWrapper.localStorage.getItem(SAVED_MODEL_METADATA_KEY));\r\n  if (metadataMap == null) {\r\n    metadataMap = {};\r\n  }\r\n  if (metadataMap[name] != null) {\r\n    delete metadataMap[name];\r\n  }\r\n  localStorageWrapper.localStorage.setItem(\r\n      SAVED_MODEL_METADATA_KEY, JSON.stringify(metadataMap));\r\n  await tf.io.removeModel(getCanonicalSavePath(name));\r\n}\r\n","<!-- Toolbar -->\r\n  <div class=\"toolbar\" role=\"banner\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <!--<h2><a aria-label=\"Angular on twitter\" href=\"\" title=\"Twitter\" class=\"siteTitle\">Kros<span class=\"pronounce\">.</span>Omni<span class=\"pronounce\">.</span>Khan <span class=\"ai\">a.i.</span></a></h2>-->\r\n    <h2>DEEPSPEED AI</h2>    \r\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n      <button class=\"btn btn-primary\" *ngIf=\"!isAuthenticated\" (click)=\"login()\"> Login </button>\r\n      <button class=\"btn btn-primary\" *ngIf=\"isAuthenticated\" (click)=\"logout()\"> Logout</button>\r\n      <a aria-label=\"Angular on twitter\" href=\"https://twitter.com/MattCharlton10\" title=\"Twitter\" target=\"_blank\">\r\n\r\n        <svg id=\"twitter-logo\" height=\"24\" data-name=\"Logo — FIXED\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\">\r\n          <defs>\r\n          </defs>\r\n          <rect class=\"cls-1\" width=\"400\" height=\"400\" />\r\n          <path class=\"cls-2\" d=\"M153.62,301.59c94.34,0,145.94-78.16,145.94-145.94,0-2.22,0-4.43-.15-6.63A104.36,104.36,0,0,0,325,122.47a102.38,102.38,0,0,1-29.46,8.07,51.47,51.47,0,0,0,22.55-28.37,102.79,102.79,0,0,1-32.57,12.45,51.34,51.34,0,0,0-87.41,46.78A145.62,145.62,0,0,1,92.4,107.81a51.33,51.33,0,0,0,15.88,68.47A50.91,50.91,0,0,1,85,169.86c0,.21,0,.43,0,.65a51.31,51.31,0,0,0,41.15,50.28,51.21,51.21,0,0,1-23.16.88,51.35,51.35,0,0,0,47.92,35.62,102.92,102.92,0,0,1-63.7,22A104.41,104.41,0,0,1,75,278.55a145.21,145.21,0,0,0,78.62,23\" />\r\n        </svg>\r\n\r\n      </a>\r\n      <a style=\"color:#fff; font-size: 18px;\" href=\"mailto:1deepspeed1@gmail.com\"><span><fa-icon [icon]=\"faEnvelope\"></fa-icon></span> Contact</a>\r\n    </div>\r\n  </div>\r\n\r\n<app-header></app-header>\r\n<div class=\"layout\" role=\"main\">\r\n  <div fxFlexFill [@triggerName]=\"prepareRoute(outlet)\">\r\n    <router-outlet #outlet=\"outlet\"></router-outlet>\r\n  </div>\r\n  \r\n</div>\r\n<app-loader *ngIf=\"loading\" class=\"loading\"> </app-loader>\r\n<simple-notifications [options]=\"options\"></simple-notifications>\r\n\r\n<!--\r\n  notification callbacks \r\n  (onCreate)=\"created($event)\" (onDestroy)=\"destroyed($event)\r\n -->\r\n","import { Component, HostBinding, OnInit } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { routeTransitionAnimations } from './route-transition-animations';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition\r\n} from '@angular/animations';\r\nimport {\r\n  Event,\r\n  NavigationCancel,\r\n  NavigationEnd,\r\n  NavigationError,\r\n  NavigationStart,\r\n  Router\r\n} from '@angular/router';\r\nimport { OktaAuthService } from '@okta/okta-angular';\r\nimport { faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport { Title, Meta } from '@angular/platform-browser';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n  animations: [routeTransitionAnimations]\r\n})\r\n\r\nexport class AppComponent implements OnInit{\r\n  title = 'DEEPSPEED AI';\r\n  isAuthenticated: boolean;\r\n  loading = false;\r\n  userEmail: string;\r\n  options;\r\n  faEnvelope = faEnvelope;\r\n  constructor(public oktaAuth: OktaAuthService, private router: Router, private titleService: Title, private metaService: Meta) {\r\n    this.oktaAuth.$authenticationState.subscribe(\r\n      (isAuthenticated: boolean) => this.isAuthenticated = isAuthenticated\r\n    );\r\n    this.router.events.subscribe((event: Event) => {\r\n      switch (true) {\r\n        case event instanceof NavigationStart: {\r\n          this.loading = true;\r\n          break;\r\n        }\r\n\r\n        case event instanceof NavigationEnd:\r\n        case event instanceof NavigationCancel:\r\n        case event instanceof NavigationError: {\r\n          this.loading = false;\r\n          break;\r\n        }\r\n        default: {\r\n          break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.oktaAuth.isAuthenticated().then((auth) => { this.isAuthenticated = auth });\r\n    const userClaims = await this.oktaAuth.getUser();\r\n    this.titleService.setTitle(this.title);\r\n    this.metaService.addTags([\r\n      { name: 'keywords', content: 'Angular, Deepspeed AI, Machine Learning Components' },\r\n      { name: 'description', content: 'Machine Learning Suite for Angular' },\r\n      { name: 'robots', content: 'index, follow' },\r\n      { property: 'og:image', content: '../assets/ds.jpg' }\r\n    ]);\r\n  }\r\n\r\n  prepareRoute(outlet: RouterOutlet) {\r\n    return outlet &&\r\n      outlet.activatedRouteData &&\r\n      outlet.activatedRouteData['animationState'];\r\n  }\r\n\r\n  login() {\r\n    this.oktaAuth.loginRedirect();\r\n  }\r\n\r\n  logout() {\r\n    this.oktaAuth.logout('/');\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport {promisify} from 'util';\r\n\r\nimport {RawAudioData} from './types';\r\n\r\nexport async function loadMetadataJson(url: string):\r\n    Promise<{wordLabels: string[]}> {\r\n  const HTTP_SCHEME = 'http://';\r\n  const HTTPS_SCHEME = 'https://';\r\n  const FILE_SCHEME = 'file://';\r\n  if (url.indexOf(HTTP_SCHEME) === 0 || url.indexOf(HTTPS_SCHEME) === 0) {\r\n    const response = await fetch(url);\r\n    const parsed = await response.json();\r\n    return parsed;\r\n  } else if (url.indexOf(FILE_SCHEME) === 0) {\r\n    // tslint:disable-next-line:no-require-imports\r\n    const fs = require('fs');\r\n    const readFile = promisify(fs.readFile);\r\n\r\n    return JSON.parse(\r\n        await readFile(url.slice(FILE_SCHEME.length), {encoding: 'utf-8'}));\r\n  } else {\r\n    throw new Error(\r\n        `Unsupported URL scheme in metadata URL: ${url}. ` +\r\n        `Supported schemes are: http://, https://, and ` +\r\n        `(node.js-only) file://`);\r\n  }\r\n}\r\n\r\nlet EPSILON: number = null;\r\n\r\n/**\r\n * Normalize the input into zero mean and unit standard deviation.\r\n *\r\n * This function is safe against divison-by-zero: In case the standard\r\n * deviation is zero, the output will be all-zero.\r\n *\r\n * @param x Input tensor.\r\n * @param y Output normalized tensor.\r\n */\r\nexport function normalize(x: tf.Tensor): tf.Tensor {\r\n  if (EPSILON == null) {\r\n    EPSILON = tf.backend().epsilon();\r\n  }\r\n  return tf.tidy(() => {\r\n    const {mean, variance} = tf.moments(x);\r\n    // Add an EPSILON to the denominator to prevent division-by-zero.\r\n    return x.sub(mean).div(variance.sqrt().add(EPSILON));\r\n  });\r\n}\r\n\r\n/**\r\n * Z-Normalize the elements of a Float32Array.\r\n *\r\n * Subtract the mean and divide the result by the standard deviation.\r\n *\r\n * @param x The Float32Array to normalize.\r\n * @return Noramlzied Float32Array.\r\n */\r\nexport function normalizeFloat32Array(x: Float32Array): Float32Array {\r\n  if (x.length < 2) {\r\n    throw new Error(\r\n        'Cannot normalize a Float32Array with fewer than 2 elements.');\r\n  }\r\n  if (EPSILON == null) {\r\n    EPSILON = tf.backend().epsilon();\r\n  }\r\n  return tf.tidy(() => {\r\n    const {mean, variance} = tf.moments(tf.tensor1d(x));\r\n    const meanVal = mean.arraySync() as number;\r\n    const stdVal = Math.sqrt(variance.arraySync() as number);\r\n    const yArray = Array.from(x).map(y => (y - meanVal) / (stdVal + EPSILON));\r\n    return new Float32Array(yArray);\r\n  });\r\n}\r\n\r\nexport function getAudioContextConstructor(): AudioContext {\r\n  // tslint:disable-next-line:no-any\r\n  return (window as any).AudioContext || (window as any).webkitAudioContext;\r\n}\r\n\r\nexport async function getAudioMediaStream(\r\n    audioTrackConstraints?: MediaTrackConstraints): Promise<MediaStream> {\r\n  return navigator.mediaDevices.getUserMedia({\r\n    audio: audioTrackConstraints == null ? true : audioTrackConstraints,\r\n    video: false\r\n  });\r\n}\r\n\r\n/**\r\n * Play raw audio waveform\r\n * @param rawAudio Raw audio data, including the waveform and the sampling rate.\r\n * @param onEnded Callback function to execute when the playing ends.\r\n */\r\nexport function playRawAudio(\r\n    rawAudio: RawAudioData, onEnded: () => void|Promise<void>): void {\r\n  const audioContextConstructor =\r\n      // tslint:disable-next-line:no-any\r\n      (window as any).AudioContext || (window as any).webkitAudioContext;\r\n  const audioContext: AudioContext = new audioContextConstructor();\r\n  const arrayBuffer =\r\n      audioContext.createBuffer(1, rawAudio.data.length, rawAudio.sampleRateHz);\r\n  const nowBuffering = arrayBuffer.getChannelData(0);\r\n  nowBuffering.set(rawAudio.data);\r\n  const source = audioContext.createBufferSource();\r\n  source.buffer = arrayBuffer;\r\n  source.connect(audioContext.destination);\r\n  source.start();\r\n  source.onended = () => {\r\n    if (onEnded != null) {\r\n      onEnded();\r\n    }\r\n  };\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * Utility functions for training and transfer learning of the speech-commands\r\n * model.\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\n/**\r\n * Split feature and target tensors into train and validation (val) splits.\r\n *\r\n * Given sufficent number of examples, the train and val sets will be\r\n * balanced with respect to the classes.\r\n *\r\n * @param xs Features tensor, of shape [numExamples, ...].\r\n * @param ys Targets tensors, of shape [numExamples, numClasses]. Assumed to be\r\n *   one-hot categorical encoding.\r\n * @param valSplit A number > 0 and < 1, fraction of examples to use\r\n *   as the validation set.\r\n * @returns trainXs: training features tensor; trainYs: training targets\r\n *   tensor; valXs: validation features tensor; valYs: validation targets\r\n *   tensor.\r\n */\r\nexport function balancedTrainValSplit(\r\n    xs: tf.Tensor, ys: tf.Tensor, valSplit: number): {\r\n  trainXs: tf.Tensor,\r\n  trainYs: tf.Tensor,\r\n  valXs: tf.Tensor,\r\n  valYs: tf.Tensor\r\n} {\r\n  tf.util.assert(\r\n      valSplit > 0 && valSplit < 1,\r\n      () => `validationSplit is expected to be >0 and <1, ` +\r\n          `but got ${valSplit}`);\r\n\r\n  return tf.tidy(() => {\r\n    const classIndices = ys.argMax(-1).dataSync();\r\n\r\n    const indicesByClasses: number[][] = [];\r\n    for (let i = 0; i < classIndices.length; ++i) {\r\n      const classIndex = classIndices[i];\r\n      if (indicesByClasses[classIndex] == null) {\r\n        indicesByClasses[classIndex] = [];\r\n      }\r\n      indicesByClasses[classIndex].push(i);\r\n    }\r\n    const numClasses = indicesByClasses.length;\r\n\r\n    const trainIndices: number[] = [];\r\n    const valIndices: number[] = [];\r\n\r\n    // Randomly shuffle the list of indices in each array.\r\n    indicesByClasses.map(classIndices => tf.util.shuffle(classIndices));\r\n    for (let i = 0; i < numClasses; ++i) {\r\n      const classIndices = indicesByClasses[i];\r\n      const cutoff = Math.round(classIndices.length * (1 - valSplit));\r\n      for (let j = 0; j < classIndices.length; ++j) {\r\n        if (j < cutoff) {\r\n          trainIndices.push(classIndices[j]);\r\n        } else {\r\n          valIndices.push(classIndices[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    const trainXs = tf.gather(xs, trainIndices);\r\n    const trainYs = tf.gather(ys, trainIndices);\r\n    const valXs = tf.gather(xs, valIndices);\r\n    const valYs = tf.gather(ys, valIndices);\r\n    return {trainXs, trainYs, valXs, valYs};\r\n  });\r\n}\r\n\r\n/**\r\n * Same as balancedTrainValSplit, but for number arrays or Float32Arrays.\r\n */\r\nexport function balancedTrainValSplitNumArrays(\r\n    xs: number[][]|Float32Array[], ys: number[], valSplit: number): {\r\n  trainXs: number[][]|Float32Array[],\r\n  trainYs: number[],\r\n  valXs: number[][]|Float32Array[],\r\n  valYs: number[]\r\n} {\r\n  tf.util.assert(\r\n      valSplit > 0 && valSplit < 1,\r\n      () => `validationSplit is expected to be >0 and <1, ` +\r\n          `but got ${valSplit}`);\r\n  const isXsFloat32Array = !Array.isArray(xs[0]);\r\n\r\n  const classIndices = ys;\r\n\r\n  const indicesByClasses: number[][] = [];\r\n  for (let i = 0; i < classIndices.length; ++i) {\r\n    const classIndex = classIndices[i];\r\n    if (indicesByClasses[classIndex] == null) {\r\n      indicesByClasses[classIndex] = [];\r\n    }\r\n    indicesByClasses[classIndex].push(i);\r\n  }\r\n  const numClasses = indicesByClasses.length;\r\n\r\n  const trainIndices: number[] = [];\r\n  const valIndices: number[] = [];\r\n\r\n  // Randomly shuffle the list of indices in each array.\r\n  indicesByClasses.map(classIndices => tf.util.shuffle(classIndices));\r\n  for (let i = 0; i < numClasses; ++i) {\r\n    const classIndices = indicesByClasses[i];\r\n    const cutoff = Math.round(classIndices.length * (1 - valSplit));\r\n    for (let j = 0; j < classIndices.length; ++j) {\r\n      if (j < cutoff) {\r\n        trainIndices.push(classIndices[j]);\r\n      } else {\r\n        valIndices.push(classIndices[j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  if (isXsFloat32Array) {\r\n    const trainXs: Float32Array[] = [];\r\n    const trainYs: number[] = [];\r\n    const valXs: Float32Array[] = [];\r\n    const valYs: number[] = [];\r\n    for (const index of trainIndices) {\r\n      trainXs.push(xs[index] as Float32Array);\r\n      trainYs.push(ys[index]);\r\n    }\r\n    for (const index of valIndices) {\r\n      valXs.push(xs[index] as Float32Array);\r\n      valYs.push(ys[index]);\r\n    }\r\n    return {trainXs, trainYs, valXs, valYs};\r\n  } else {\r\n    const trainXs: number[][] = [];\r\n    const trainYs: number[] = [];\r\n    const valXs: number[][] = [];\r\n    const valYs: number[] = [];\r\n    for (const index of trainIndices) {\r\n      trainXs.push(xs[index] as number[]);\r\n      trainYs.push(ys[index]);\r\n    }\r\n    for (const index of valIndices) {\r\n      valXs.push(xs[index] as number[]);\r\n      valYs.push(ys[index]);\r\n    }\r\n    return {trainXs, trainYs, valXs, valYs};\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\n/**\r\n * Concatenate a number of ArrayBuffers into one.\r\n *\r\n * @param buffers A number of array buffers to concatenate.\r\n * @returns Result of concatenating `buffers` in order.\r\n */\r\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\r\n  let totalByteLength = 0;\r\n  buffers.forEach((buffer: ArrayBuffer) => {\r\n    totalByteLength += buffer.byteLength;\r\n  });\r\n\r\n  const temp = new Uint8Array(totalByteLength);\r\n  let offset = 0;\r\n  buffers.forEach((buffer: ArrayBuffer) => {\r\n    temp.set(new Uint8Array(buffer), offset);\r\n    offset += buffer.byteLength;\r\n  });\r\n  return temp.buffer;\r\n}\r\n\r\n/**\r\n * Concatenate Float32Arrays.\r\n *\r\n * @param xs Float32Arrays to concatenate.\r\n * @return The result of the concatenation.\r\n */\r\nexport function concatenateFloat32Arrays(xs: Float32Array[]): Float32Array {\r\n  let totalLength = 0;\r\n  xs.forEach(x => totalLength += x.length);\r\n  const concatenated = new Float32Array(totalLength);\r\n  let index = 0;\r\n  xs.forEach(x => {\r\n    concatenated.set(x, index);\r\n    index += x.length;\r\n  });\r\n  return concatenated;\r\n}\r\n\r\n/** Encode a string as an ArrayBuffer. */\r\nexport function string2ArrayBuffer(str: string): ArrayBuffer {\r\n  if (str == null) {\r\n    throw new Error('Received null or undefind string');\r\n  }\r\n  // NOTE(cais): This implementation is inefficient in terms of memory.\r\n  // But it works for UTF-8 strings. Just don't use on for very long strings.\r\n  const strUTF8 = unescape(encodeURIComponent(str));\r\n  const buf = new Uint8Array(strUTF8.length);\r\n  for (let i = 0; i < strUTF8.length; ++i) {\r\n    buf[i] = strUTF8.charCodeAt(i);\r\n  }\r\n  return buf.buffer;\r\n}\r\n\r\n/** Decode an ArrayBuffer as a string. */\r\nexport function arrayBuffer2String(buffer: ArrayBuffer): string {\r\n  if (buffer == null) {\r\n    throw new Error('Received null or undefind buffer');\r\n  }\r\n  const buf = new Uint8Array(buffer);\r\n  return decodeURIComponent(escape(String.fromCharCode(...buf)));\r\n}\r\n\r\n/** Generate a pseudo-random UID. */\r\nexport function getUID(): string {\r\n  function s4() {\r\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n  }\r\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() +\r\n      s4() + s4();\r\n}\r\n\r\nexport function getRandomInteger(min: number, max: number): number {\r\n  return Math.floor((max - min) * Math.random()) + min;\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\nimport { NgxTimelineModule } from 'ngx-timeline';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\nimport { OktaAuthModule } from '@okta/okta-angular';\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { LoaderComponent } from './loader/loader.component';\r\nimport { ImageClassifierComponent } from './image-classifier/image-classifier.component';\r\nimport { D3Component } from './d3/d3.component';\r\nimport { WebcamClassifierComponent } from './webcam-classifier/webcam-classifier.component';\r\nimport { SpeechCommandComponent } from './speech-commands/speech-ai.component';\r\nimport { SentimentAnalysisComponent } from './sentiment-analysis/sentiment-analysis.component';\r\nimport { LoadingGuard } from './loader/loading.guard';\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\nimport * as PlotlyJS from 'node_modules/plotly.js';\r\nimport { PlotlyViaCDNModule } from './plotly-via-cdn/plotly-via-cdn.module';\nimport { AngularDraggableModule } from 'angular2-draggable';\nimport { BlockchainComponent } from './blockchain/blockchain.component';\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\n//import { ParticlesModule } from 'angular-particle';\r\nPlotlyViaCDNModule.plotlyVersion = '1.49.4';\r\n\r\nimport { SliderModule } from 'primeng/slider';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent,\r\n    HomeComponent,\r\n    LoaderComponent,\r\n    ImageClassifierComponent,\r\n    WebcamClassifierComponent,\r\n    SentimentAnalysisComponent,\r\n    SpeechCommandComponent,\r\n    BlockchainComponent,\r\n    D3Component\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BsDatepickerModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    NgxTimelineModule,\r\n    FontAwesomeModule,\r\n    PlotlyViaCDNModule,\r\n    AngularDraggableModule,\r\n    InputTextModule,\r\n    SliderModule,\r\n    BsDatepickerModule.forRoot(),\r\n    SimpleNotificationsModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n   // ParticlesModule,\r\n    OktaAuthModule.initAuth({\r\n      issuer: 'https://dev-272649.okta.com/oauth2/default',\r\n      redirectUri: 'https://krosomnikhan.com/implicit/callback',\r\n      clientId: '0oa23zanmjWeZ2lEw357'\r\n    })\r\n  ],\r\n  providers: [LoadingGuard, { provide: LocationStrategy, useClass: HashLocationStrategy }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export const SAMPLE_DATA: any[] = [\r\n    {State: 'AL', 'Under 5 Years': 310504, '5 to 13 Years': 552339, '14 to 17 Years': 259034, '18 to 24 Years': 450818, '25 to 44 Years': 1231572, '45 to 64 Years': 1215966, '65 Years and Over': 641667},\r\n    {State: 'AK', 'Under 5 Years': 52083, '5 to 13 Years': 85640, '14 to 17 Years': 42153, '18 to 24 Years': 74257, '25 to 44 Years': 198724, '45 to 64 Years': 183159, '65 Years and Over': 50277}\r\n];\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * https://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as SpeechCommands from './src';\r\n\r\nimport { BACKGROUND_NOISE_TAG, UNKNOWN_TAG } from './src';\r\n\r\nconst statusDisplay = document.getElementById('status-display');\r\nconst candidateWordsContainer = document.getElementById('candidate-words');\r\n\r\n/**\r\n * Log a message to a textarea.\r\n *\r\n * @param {string} message Message to be logged.\r\n */\r\nexport function logToStatusDisplay(message) {\r\n  const date = new Date();\r\n  statusDisplay.value += `[${date.toISOString()}] ` + message + '\\n';\r\n  statusDisplay.scrollTop = statusDisplay.scrollHeight;\r\n}\r\n\r\nlet candidateWordSpans;\r\n\r\n/**\r\n * Display candidate words in the UI.\r\n *\r\n * The background-noise \"word\" will be omitted.\r\n *\r\n * @param {*} words Candidate words.\r\n */\r\nexport function populateCandidateWords(words) {\r\n  candidateWordSpans = {};\r\n  while (candidateWordsContainer.firstChild) {\r\n    candidateWordsContainer.removeChild(candidateWordsContainer.firstChild);\r\n  }\r\n\r\n  for (const word of words) {\r\n    if (word === BACKGROUND_NOISE_TAG || word === UNKNOWN_TAG) {\r\n      continue;\r\n    }\r\n    const wordSpan = document.createElement('span');\r\n    wordSpan.textContent = word;\r\n    wordSpan.classList.add('candidate-word');\r\n    candidateWordsContainer.appendChild(wordSpan);\r\n    candidateWordSpans[word] = wordSpan;\r\n  }\r\n}\r\n\r\nexport function showCandidateWords() {\r\n  candidateWordsContainer.classList.remove('candidate-words-hidden');\r\n}\r\n\r\nexport function hideCandidateWords() {\r\n  candidateWordsContainer.classList.add('candidate-words-hidden');\r\n}\r\n\r\n/**\r\n * Show an audio spectrogram in a canvas.\r\n *\r\n * @param {HTMLCanvasElement} canvas The canvas element to draw the\r\n *   spectrogram in.\r\n * @param {Float32Array} frequencyData The flat array for the spectrogram\r\n *   data.\r\n * @param {number} fftSize Number of frequency points per frame.\r\n * @param {number} fftDisplaySize Number of frequency points to show. Must be\r\n * @param {Object} config Optional configuration object, with the following\r\n *   supported fields:\r\n *   - pixelsPerFrame {number} Number of pixels along the width dimension of\r\n *     the canvas for each frame of spectrogram.\r\n *   - maxPixelWidth {number} Maximum width in pixels.\r\n *   - markKeyFrame {bool} Whether to mark the index of the frame\r\n *     with the maximum intensity or a predetermined key frame.\r\n *   - keyFrameIndex {index?} Predetermined key frame index.\r\n *\r\n *   <= fftSize.\r\n */\r\nexport async function plotSpectrogram(\r\n  canvas, frequencyData, fftSize, fftDisplaySize, config) {\r\n  if (fftDisplaySize == null) {\r\n    fftDisplaySize = fftSize;\r\n  }\r\n  if (config == null) {\r\n    config = {};\r\n  }\r\n\r\n  // Get the maximum and minimum.\r\n  let min = Infinity;\r\n  let max = -Infinity;\r\n  for (let i = 0; i < frequencyData.length; ++i) {\r\n    const x = frequencyData[i];\r\n    if (x !== -Infinity) {\r\n      if (x < min) {\r\n        min = x;\r\n      }\r\n      if (x > max) {\r\n        max = x;\r\n      }\r\n    }\r\n  }\r\n  if (min >= max) {\r\n    return;\r\n  }\r\n\r\n  const context = canvas.getContext('2d');\r\n  context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  const numFrames = frequencyData.length / fftSize;\r\n  if (config.pixelsPerFrame != null) {\r\n    let realWidth = Math.round(config.pixelsPerFrame * numFrames);\r\n    if (config.maxPixelWidth != null && realWidth > config.maxPixelWidth) {\r\n      realWidth = config.maxPixelWidth;\r\n    }\r\n    canvas.width = realWidth;\r\n  }\r\n\r\n  const pixelWidth = canvas.width / numFrames;\r\n  const pixelHeight = canvas.height / fftDisplaySize;\r\n  for (let i = 0; i < numFrames; ++i) {\r\n    const x = pixelWidth * i;\r\n    const spectrum = frequencyData.subarray(i * fftSize, (i + 1) * fftSize);\r\n    if (spectrum[0] === -Infinity) {\r\n      break;\r\n    }\r\n    for (let j = 0; j < fftDisplaySize; ++j) {\r\n      const y = canvas.height - (j + 1) * pixelHeight;\r\n\r\n      let colorValue = (spectrum[j] - min) / (max - min);\r\n      colorValue = Math.pow(colorValue, 3);\r\n      colorValue = Math.round(255 * colorValue);\r\n      const colorTuning = 193; //Tune the ammount of G scale\r\n      const fillStyle =\r\n        `rgb(${colorValue},${colorTuning - colorValue},${255 - colorValue})`;\r\n      context.fillStyle = fillStyle;\r\n      context.fillRect(x, y, pixelWidth, pixelHeight);\r\n    }\r\n  }\r\n\r\n  if (config.markKeyFrame) {\r\n    const keyFrameIndex = config.keyFrameIndex == null ?\r\n      await SpeechCommands\r\n        .getMaxIntensityFrameIndex(\r\n          { data: frequencyData, frameSize: fftSize })\r\n        .data() :\r\n      config.keyFrameIndex;\r\n    // Draw lines to mark the maximum-intensity frame.\r\n    context.strokeStyle = 'black';\r\n    context.beginPath();\r\n    context.moveTo(pixelWidth * keyFrameIndex, 0);\r\n    context.lineTo(pixelWidth * keyFrameIndex, canvas.height * 0.1);\r\n    context.stroke();\r\n    context.beginPath();\r\n    context.moveTo(pixelWidth * keyFrameIndex, canvas.height * 0.9);\r\n    context.lineTo(pixelWidth * keyFrameIndex, canvas.height);\r\n    context.stroke();\r\n  }\r\n}\r\n\r\n/**\r\n * Plot top-K predictions from a speech command recognizer.\r\n *\r\n * @param {HTMLCanvasElement} canvas The canvas to render the predictions in.\r\n * @param {string[]} candidateWords Candidate word array.\r\n * @param {Float32Array | number[]} probabilities Probability scores from the\r\n *   speech command recognizer. Must be of the same length as `candidateWords`.\r\n * @param {number} timeToLiveMillis Optional time to live for the active label\r\n *   highlighting. If not provided, will the highlighting will live\r\n *   indefinitely till the next highlighting.\r\n * @param {number} topK Top _ scores to render.\r\n */\r\nexport function plotPredictions(\r\n  canvas, candidateWords, probabilities, topK, timeToLiveMillis) {\r\n  if (topK != null) {\r\n    let wordsAndProbs = [];\r\n    for (let i = 0; i < candidateWords.length; ++i) {\r\n      wordsAndProbs.push([candidateWords[i], probabilities[i]]);\r\n    }\r\n    wordsAndProbs.sort((a, b) => (b[1] - a[1]));\r\n    wordsAndProbs = wordsAndProbs.slice(0, topK);\r\n    candidateWords = wordsAndProbs.map(item => item[0]);\r\n    probabilities = wordsAndProbs.map(item => item[1]);\r\n\r\n    // Highlight the top word.\r\n    const topWord = wordsAndProbs[0][0];\r\n    console.log(\r\n      `\"${topWord}\" (p=${wordsAndProbs[0][1].toFixed(6)}) @ ` +\r\n      new Date().toTimeString());\r\n    for (const word in candidateWordSpans) {\r\n      if (word === topWord) {\r\n        candidateWordSpans[word].classList.add('candidate-word-active');\r\n        if (timeToLiveMillis != null) {\r\n          setTimeout(() => {\r\n            if (candidateWordSpans[word]) {\r\n              candidateWordSpans[word].classList.remove(\r\n                'candidate-word-active');\r\n            }\r\n          }, timeToLiveMillis);\r\n        }\r\n      } else {\r\n        candidateWordSpans[word].classList.remove('candidate-word-active');\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<nav>\r\n  <button class=\"btn btn-primary\" routerLink=\"/upload\" routerLinkActive=\"router-link-active\">Image Classifier</button>\r\n  <button class=\"btn btn-primary\" routerLink=\"/webcam\" routerLinkActive=\"router-link-active\">WebCam Image Classifier</button>\r\n  <button class=\"btn btn-primary\" routerLink=\"/sentiment\" routerLinkActive=\"router-link-active\">Sentiment Analysis</button>\r\n  <button class=\"btn btn-primary\" routerLink=\"/speech-commands\" routerLinkActive=\"router-link-active\">Speech Commands</button>\r\n  <button class=\"btn btn-primary\" routerLink=\"/blockchain\" routerLinkActive=\"router-link-active\">Block Chain</button>\r\n  <!--<button class=\"btn btn-primary\" onclick=\"window.location.href = 'https://krosomnikhan.com/faceapi/webcamFaceLandmarkDetection.html';\"  routerLinkActive=\"router-link-active\">Facial Recognition</button>-->\r\n</nav>\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nimport {BrowserFftSpeechCommandRecognizer} from './browser_fft_recognizer';\r\nimport {playRawAudio} from './browser_fft_utils';\r\nimport {concatenateFloat32Arrays} from './generic_utils';\r\nimport {FFT_TYPE, SpeechCommandRecognizer, SpeechCommandRecognizerMetadata} from './types';\r\n\r\n/**\r\n * Create an instance of speech-command recognizer.\r\n *\r\n * @param fftType Type of FFT. The currently availble option(s):\r\n *   - BROWSER_FFT: Obtains audio spectrograms using browser's native Fourier\r\n *     transform.\r\n * @param vocabulary The vocabulary of the model to load. Possible options:\r\n *   - '18w' (default): The 18-word vocaulbary, consisting of:\r\n *     'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\r\n *     'eight', 'nine', 'up', 'down', 'left', 'right', 'go', 'stop',\r\n *     'yes', and 'no', in addition to '_background_noise_' and '_unknown_'.\r\n *   - 'directional4w': The four directional words: 'up', 'down', 'left', and\r\n *     'right', in addition to '_background_noise_' and '_unknown_'.\r\n *   Choosing a smaller vocabulary leads to better accuracy on the words of\r\n *   interest and a slightly smaller model size.\r\n * @param customModelArtifactsOrURL A custom model URL pointing to a model.json\r\n *     file, or a set of modelArtifacts in `tf.io.ModelArtifacts` format.\r\n *   Supported schemes: http://, https://, and node.js-only: file://.\r\n *   Mutually exclusive with `vocabulary`. If provided, `customMetadatURL`\r\n *   most also be provided.\r\n * @param customMetadataOrURL A custom metadata URL pointing to a metadata.json\r\n *   file. Must be provided together with `customModelURL`, or a metadata\r\n *   object.\r\n * @returns An instance of SpeechCommandRecognizer.\r\n * @throws Error on invalid value of `fftType`.\r\n */\r\nexport function create(\r\n    fftType: FFT_TYPE, vocabulary?: string,\r\n    customModelArtifactsOrURL?: tf.io.ModelArtifacts|string,\r\n    customMetadataOrURL?: SpeechCommandRecognizerMetadata|\r\n    string): SpeechCommandRecognizer {\r\n  tf.util.assert(\r\n      customModelArtifactsOrURL == null && customMetadataOrURL == null ||\r\n          customModelArtifactsOrURL != null && customMetadataOrURL != null,\r\n      () => `customModelURL and customMetadataURL must be both provided or ` +\r\n          `both not provided.`);\r\n  if (customModelArtifactsOrURL != null) {\r\n    tf.util.assert(\r\n        vocabulary == null,\r\n        () => `vocabulary name must be null or undefined when modelURL ` +\r\n            `is provided.`);\r\n  }\r\n\r\n  if (fftType === 'BROWSER_FFT') {\r\n    return new BrowserFftSpeechCommandRecognizer(\r\n        vocabulary, customModelArtifactsOrURL, customMetadataOrURL);\r\n  } else if (fftType === 'SOFT_FFT') {\r\n    throw new Error(\r\n        'SOFT_FFT SpeechCommandRecognizer has not been implemented yet.');\r\n  } else {\r\n    throw new Error(`Invalid fftType: '${fftType}'`);\r\n  }\r\n}\r\n\r\nconst utils = {\r\n  concatenateFloat32Arrays,\r\n  playRawAudio\r\n};\r\n\r\nexport {BACKGROUND_NOISE_TAG, Dataset, GetDataConfig as GetSpectrogramsAsTensorsConfig, getMaxIntensityFrameIndex, spectrogram2IntensityCurve, SpectrogramAndTargetsTfDataset} from './dataset';\r\nexport {AudioDataAugmentationOptions, Example, FFT_TYPE, RawAudioData, RecognizerParams, SpectrogramData, SpeechCommandRecognizer, SpeechCommandRecognizerMetadata, SpeechCommandRecognizerResult, StreamingRecognitionConfig, TransferLearnConfig, TransferSpeechCommandRecognizer} from './types';\r\nexport {deleteSavedTransferModel, listSavedTransferModels, UNKNOWN_TAG} from './browser_fft_recognizer';\r\nexport {utils};\r\nexport {version} from './version';\r\n","<div [hidden]=\"loading\" fxLayout=\"row\" fxLayoutAlign=\"start start\" class=\"ic\">\r\n  <div fxLayout=\"column\" layout-align=\"center center\" class=\"img-container\" fxFlex=\"50\">\r\n    <label class=\"fileContainer\">\r\n      <fa-icon [icon]=\"faImage\"></fa-icon> Select an image to classify...\r\n      <input type=\"file\" (change)=\"fileChangeEvent($event)\" />\r\n    </label>\r\n\r\n    <img [src]=\"imageSrc\" #img *ngIf=\"imageSrc\" />\r\n\r\n    <div *ngIf=\"predictions\" class=\"list-group\" [@listAnimation]=\"predictions.length\" fxLayout=\"row\" fxFlex>\r\n      <div class=\"list-group-item\" *ngFor=\"let prediction of predictions\">\r\n        {{prediction.className}} - {{prediction.probability}}\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <svg #svg id=\"svg\" width=\"960\" height=\"500\"></svg>\r\n</div>\r\n\r\n<div [hidden]=\"!loading\" class=\"blockUi\"></div>\r\n","import { Component, ElementRef, Input, OnInit, OnChanges, ViewChild, ViewEncapsulation }  from \"@angular/core\";\r\nimport { trigger, transition, style, animate, query, stagger } from '@angular/animations';\r\nimport { Prediction } from 'src/services/prediction';\r\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\r\nimport * as d3 from 'd3';\r\nimport * as d3Scale from 'd3-scale';\r\nimport * as d3Array from 'd3-array';\r\nimport * as d3Axis from 'd3-axis';\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-image-classifier',\r\n  encapsulation: ViewEncapsulation.None,\r\n  templateUrl: './image-classifier.component.html',\r\n  styleUrls: ['./image-classifier.component.scss'],\r\n  animations: [\r\n    trigger('listAnimation', [\r\n      transition('* => *', [ // each time the binding value changes\r\n        query(':leave', [\r\n          stagger(100, [\r\n            animate('0.5s', style({ opacity: 0 }))\r\n          ])\r\n        ], { optional: true }),\r\n        query(':enter', [\r\n          style({ opacity: 0 }),\r\n          stagger(100, [\r\n            animate('0.5s', style({ opacity: 1 }))\r\n          ])\r\n        ])\r\n      ])\r\n    ])\r\n  ]\r\n})\r\nexport class ImageClassifierComponent implements OnInit {\r\n  @ViewChild(\"img\", { static: false }) imageEl: ElementRef;\r\n  @ViewChild(\"svg\", { static: false }) svgEl: ElementRef;\r\n\r\n\r\n  @Input()\r\n  predictions: Prediction[];\r\n\r\n\r\n  faImage = faImage;\r\n  imageSrc: string;\r\n  model: any;\r\n  loading = true;\r\n\r\n  private width: number;\r\n  private height: number;\r\n  private margin = { top: 20, right: 20, bottom: 30, left: 40 };\r\n  private x: any;\r\n  private y: any;\r\n  private svg: any;\r\n  private g: any;\r\n  myStyle: object = {};\r\n  myParams: object = {};\r\n\r\n  constructor(public el: ElementRef) {\r\n\r\n  }\r\n\r\n  async ngOnInit() {\r\n    const container = document.querySelector(\".warlock\");\r\n    const classNames = [\"warlock\", \"titan\", \"hunter\", \"default\"];\r\n    let i = 0;\r\n    if (container) {\r\n      const changeClass = () => {\r\n        container.classList.remove(classNames[i]);\r\n        i = i < classNames.length - 1 ? i + 1 : 0;\r\n        container.classList.add(classNames[i]);\r\n      };\r\n      setInterval(changeClass, 2000);\r\n    }\r\n\r\n    this.myStyle = {\r\n      'position': 'fixed',\r\n      'width': '100%',\r\n      'height': '100%',\r\n      'z-index': -1,\r\n      'top': 0,\r\n      'left': 0,\r\n      'right': 0,\r\n      'bottom': 0,\r\n    };\r\n\r\n    this.myParams = {\r\n      particles: {\r\n        number: {\r\n          value: 200,\r\n        },\r\n        color: {\r\n          value: '#15487a'\r\n        },\r\n        shape: {\r\n          type: 'triangle',\r\n        },\r\n      }\r\n    };\r\n    console.log('loader was called', container);\r\n    console.log('loading mobilenet model...');\r\n    this.model = await mobilenet.load();\r\n    console.log('Sucessfully loaded model', this.model);\r\n    this.loading = false;\r\n    if (!this.predictions) { return; }\r\n  }\r\n\r\n  private createChart(): void {\r\n    this.initSvg();\r\n    this.initAxis();\r\n    this.drawAxis();\r\n    this.drawBars();\r\n  }\r\n\r\n  private initSvg() {\r\n    const element = this.svgEl.nativeElement;\r\n    d3.select(element).select('svg#svg svg').remove();\r\n    this.svg = d3.select(element).append('svg');\r\n    this.width = element.width.animVal.value - this.margin.left - this.margin.right;\r\n    this.height = element.height.animVal.value - this.margin.top - this.margin.bottom;\r\n    this.g = this.svg.append('g')\r\n      .attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');\r\n  }\r\n\r\n  private initAxis() {\r\n    this.x = d3Scale.scaleBand().rangeRound([0, this.width]).padding(0.1);\r\n    this.y = d3Scale.scaleLinear().rangeRound([this.height, 0]);\r\n    this.x.domain(this.predictions.map((d) => d.className));\r\n    //this.y.domain([0, d3Array.max(this.predictions, (d) => d.probability)]);\r\n  }\r\n\r\n  private drawAxis() {\r\n    this.g.append('g')\r\n      .attr('class', 'axis axis--x')\r\n      .attr('transform', 'translate(0,' + this.height + ')')\r\n      .call(d3Axis.axisBottom(this.x));\r\n    this.g.append('g')\r\n      .attr('class', 'axis axis--y')\r\n      .call(d3Axis.axisLeft(this.y).ticks(10, '%'))\r\n      .append('text')\r\n      .attr('class', 'axis-title')\r\n      .attr('transform', 'rotate(-90)')\r\n      .attr('y', 6)\r\n      .attr('dy', '0.71em')\r\n      .attr('text-anchor', 'end')\r\n      .text('Frequency');\r\n  }\r\n\r\n  private drawBars() {\r\n    this.g.selectAll('.bar')\r\n      .data(this.predictions)\r\n      .enter().append('rect')\r\n      .attr('class', 'bar')\r\n      .attr(\"fill\", \"#1461ac\")\r\n      .attr('stroke', '#0f508f')\r\n      .attr('x', (d) => this.x(d.className))\r\n      .attr('y', (d) => this.y(d.probability))\r\n      .attr('width', this.x.bandwidth())\r\n      .attr('height', (d) => this.height - this.y(d.probability));\r\n  }\r\n\r\n  predictionsReady() {\r\n    this.loading = false;\r\n  }\r\n\r\n  async fileChangeEvent(event) {\r\n    this.loading = true;\r\n    if (event.target.files && event.target.files[0]) {\r\n      const reader = new FileReader();\r\n\r\n      reader.readAsDataURL(event.target.files[0]);\r\n\r\n      reader.onload = (res: any) => {\r\n        this.imageSrc = res.target.result;\r\n        \r\n        setTimeout(async () => {\r\n          const imgEl = this.imageEl.nativeElement;\r\n          this.predictions = await this.model.classify(imgEl);\r\n          this.createChart();\r\n          this.predictionsReady();\r\n        }, 2000);\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n@Injectable()\r\nexport class LoadingGuard implements CanActivate {\r\n\r\n  private loader$ = new Subject<boolean>();\r\n  public loader = false;\r\n\r\n  constructor() {\r\n    this.loader$.pipe(debounceTime(1000)).subscribe(loader => this.loader = loader);\r\n  }\r\n\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\r\n    this.loader$.next(true);\r\n\r\n    // Returning an Observable for async checks\r\n    return new Observable<boolean>(obs => {\r\n      // Sample 2 second async request\r\n      setTimeout(() => {\r\n        this.loader$.next(false);\r\n        obs.next(true);\r\n        obs.complete();\r\n      }, 5000);\r\n    });\r\n\r\n  }\r\n}\r\n","import { trigger, transition, style, query, animateChild, group, animate } from '@angular/animations';\r\n\r\nexport const routeTransitionAnimations = trigger('triggerName', [\r\n  transition('One => Two, Two => Three, One => Three', [\r\n    style({ position: 'relative' }),\r\n    query(':enter, :leave', [\r\n      style({\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        width: '100%'\r\n      })\r\n    ]),\r\n    query(':enter', [style({ right: '-100%', opacity: 0 })]),\r\n    query(':leave', animateChild()),\r\n    group([\r\n      query(':leave', [animate('1s ease-out', style({ right: '100%', opacity: 0 }))]),\r\n      query(':enter', [animate('1s ease-out', style({ right: '0%', opacity: 1 }))])\r\n    ]),\r\n    query(':enter', animateChild())\r\n  ]),\r\n  transition('Three => Two, Two => One, Three => One', [\r\n    style({ position: 'relative' }),\r\n    query(':enter, :leave', [\r\n      style({\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%'\r\n      })\r\n    ]),\r\n    query(':enter', [style({ left: '-100%', opacity: 0 })]),\r\n    query(':leave', animateChild()),\r\n    group([\r\n      query(':leave', [animate('1s ease-out', style({ left: '100%', opacity: 0 }))]),\r\n      query(':enter', [animate('1s ease-out', style({ left: '0%', opacity: 1 }))])\r\n    ]),\r\n    query(':enter', animateChild())\r\n  ])\r\n]);\r\n\r\n// export const routeTransitionAnimations = trigger('triggerName', [\r\n// \ttransition('One => Two, Two => Three', [\r\n// \t\tstyle({ position: 'relative' }),\r\n// \t\tquery(':enter, :leave', [\r\n// \t\t\tstyle({\r\n// \t\t\t\tposition: 'absolute',\r\n// \t\t\t\ttop: 0,\r\n// \t\t\t\tright: 0,\r\n// \t\t\t\twidth: '100%'\r\n// \t\t\t})\r\n// \t\t]),\r\n// \t\tquery(':enter', [style({ right: '-100%', opacity: 0 })]),\r\n// \t\tquery(':leave', animateChild()),\r\n// \t\tgroup([\r\n// \t\t\tquery(':leave', [animate('1s ease-out', style({ right: '100%', opacity: 0 }))]),\r\n// \t\t\tquery(':enter', [animate('1s ease-out', style({ right: '0%', opacity: 1 }))])\r\n// \t\t]),\r\n// \t\tquery(':enter', animateChild())\r\n// \t])\r\n// \t// ,\r\n// \t// transition('* <=> FilterPage', [\r\n// \t// \tstyle({ position: 'relative' }),\r\n// \t// \tquery(':enter, :leave', [\r\n// \t// \t\tstyle({\r\n// \t// \t\t\tposition: 'absolute',\r\n// \t// \t\t\ttop: 0,\r\n// \t// \t\t\tleft: 0,\r\n// \t// \t\t\twidth: '100%'\r\n// \t// \t\t})\r\n// \t// \t]),\r\n// \t// \tquery(':enter', [style({ left: '-100%' })]),\r\n// \t// \tquery(':leave', animateChild()),\r\n// \t// \tgroup([\r\n// \t// \t\tquery(':leave', [animate('200ms ease-out', style({ left: '100%' }))]),\r\n// \t// \t\tquery(':enter', [animate('300ms ease-out', style({ left: '0%' }))])\r\n// \t// \t]),\r\n// \t// \tquery(':enter', animateChild())\r\n// \t// ])\r\n// ]);\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loader',\r\n  templateUrl: './loader.component.html',\r\n  styleUrls: ['./loader.component.scss']\r\n})\r\nexport class LoaderComponent implements OnInit {\r\n  myStyle: object = {};\r\n  myParams: object = {};\r\n  width: number = 100;\r\n  height: number = 100;\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    const container = document.querySelector(\".warlock\");\r\n    const classNames = [\"warlock\", \"titan\", \"hunter\", \"default\"];\r\n    let i = 0;\r\n    if (container) {\r\n      const changeClass = () => {\r\n        container.classList.remove(classNames[i]);\r\n        i = i < classNames.length - 1 ? i + 1 : 0;\r\n        container.classList.add(classNames[i]);\r\n      };\r\n      setInterval(changeClass, 2000);\r\n    }\r\n\r\n    this.myStyle = {\r\n      'position': 'fixed',\r\n      'width': '100%',\r\n      'height': '100%',\r\n      'z-index': -1,\r\n      'top': 0,\r\n      'left': 0,\r\n      'right': 0,\r\n      'bottom': 0,\r\n    };\r\n\r\n    this.myParams = {\r\n      particles: {\r\n        number: {\r\n          value: 200,\r\n        },\r\n        color: {\r\n          value: '#15487a'\r\n        },\r\n        shape: {\r\n          type: 'triangle',\r\n        },\r\n      }\r\n    };\r\n    console.log('loader was called', container);\r\n  }\r\n}\r\n\r\n\r\n","<!--https://codepen.io/Milleus/pen/XWWEKqm-->\r\n<div fxLayout=\"column\" fxLayoutAlign=\"start center\">\r\n  <h1>\r\n    <span>Loading</span>\r\n  </h1>\r\n  <!--<h1> Kros.Omni.Khan <span>a.i.</span> </h1>-->\r\n  <h1> DEEPSPEED AI </h1>\r\n</div>\r\n<!--<particles [params]=\"myParams\" [style]=\"myStyle\" [width]=\"width\" [height]=\"height\"></particles>-->\r\n<div class=\"container warlock\">\r\n  <div class=\"circle c1\"></div>\r\n  <div class=\"circle c2\"></div>\r\n  <div class=\"circle c3\"></div>\r\n  <div class=\"circle c4\"></div>\r\n  <div class=\"shape_group\">\r\n    <div class=\"shape s1\"></div>\r\n    <div class=\"shape s2\"></div>\r\n    <div class=\"shape s3\"></div>\r\n    <div class=\"shape s4\"></div>\r\n    <div class=\"shape s5\"></div>\r\n    <div class=\"shape s6\"></div>\r\n  </div>\r\n  <div class=\"line_group g1\">\r\n    <div class=\"line l1\"></div>\r\n    <div class=\"line l2\"></div>\r\n    <div class=\"line l3\"></div>\r\n    <div class=\"line l4\"></div>\r\n  </div>\r\n  <div class=\"line_group g2\">\r\n    <div class=\"line l1\"></div>\r\n    <div class=\"line l2\"></div>\r\n    <div class=\"line l3\"></div>\r\n    <div class=\"line l4\"></div>\r\n  </div>\r\n  <div class=\"line_group g3\">\r\n    <div class=\"line l1\"></div>\r\n    <div class=\"line l2\"></div>\r\n    <div class=\"line l3\"></div>\r\n    <div class=\"line l4\"></div>\r\n  </div>\r\n</div>\r\n","import {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChange,\r\n    SimpleChanges,\r\n    ViewChild,\r\n    DoCheck,\r\n    IterableDiffer,\r\n    IterableDiffers,\r\n    KeyValueDiffer,\r\n    KeyValueDiffers,\r\n} from '@angular/core';\r\n\r\nimport { PlotlyService } from '../plotly.service';\r\nimport { Plotly } from '../plotly.interface';\r\n\r\n// @dynamic\r\n@Component({\r\n    selector: 'plotly-plot',\r\n    template: `<div #plot [attr.id]=\"divId\" [className]=\"getClassName()\" [ngStyle]=\"style\"></div>`,\r\n    providers: [PlotlyService],\r\n})\r\nexport class PlotComponent implements OnInit, OnChanges, OnDestroy, DoCheck {\r\n    protected defaultClassName = 'js-plotly-plot';\r\n\r\n    public plotlyInstance: Plotly.PlotlyHTMLElement;\r\n    public resizeHandler?: (instance: Plotly.PlotlyHTMLElement) => void;\r\n    public layoutDiffer: KeyValueDiffer<string, any>;\r\n    public dataDiffer: IterableDiffer<Plotly.Data>;\r\n    public datarevision: number = 0;\r\n\r\n    @ViewChild('plot', {static: true}) plotEl: ElementRef;\r\n\r\n    @Input() data?: Plotly.Data[];\r\n    @Input() layout?: Partial<Plotly.Layout>;\r\n    @Input() config?: Partial<Plotly.Config>;\r\n    @Input() frames?: Partial<Plotly.Config>[];\r\n    @Input() style?: { [key: string]: string };\r\n\r\n    @Input() divId?: string;\r\n    @Input() revision: number = 0;\r\n    @Input() className?: string | string[];\r\n    @Input() debug: boolean = false;\r\n    @Input() useResizeHandler: boolean = false;\r\n\r\n    @Output() initialized = new EventEmitter<Plotly.Figure>();\r\n    @Output() update = new EventEmitter<Plotly.Figure>();\r\n    @Output() purge = new EventEmitter<Plotly.Figure>();\r\n    @Output() error = new EventEmitter<Error>();\r\n\r\n    @Output() afterExport = new EventEmitter();\r\n    @Output() afterPlot = new EventEmitter();\r\n    @Output() animated = new EventEmitter();\r\n    @Output() animatingFrame = new EventEmitter();\r\n    @Output() animationInterrupted = new EventEmitter();\r\n    @Output() autoSize = new EventEmitter();\r\n    @Output() beforeExport = new EventEmitter();\r\n    @Output() buttonClicked = new EventEmitter();\r\n    @Output() click = new EventEmitter();\r\n    @Output() plotly_click = new EventEmitter();\r\n    @Output() clickAnnotation = new EventEmitter();\r\n    @Output() deselect = new EventEmitter();\r\n    @Output() doubleClick = new EventEmitter();\r\n    @Output() framework = new EventEmitter();\r\n    @Output() hover = new EventEmitter();\r\n    @Output() legendClick = new EventEmitter();\r\n    @Output() legendDoubleClick = new EventEmitter();\r\n    @Output() relayout = new EventEmitter();\r\n    @Output() restyle = new EventEmitter();\r\n    @Output() redraw = new EventEmitter();\r\n    @Output() selected = new EventEmitter();\r\n    @Output() selecting = new EventEmitter();\r\n    @Output() sliderChange = new EventEmitter();\r\n    @Output() sliderEnd = new EventEmitter();\r\n    @Output() sliderStart = new EventEmitter();\r\n    @Output() transitioning = new EventEmitter();\r\n    @Output() transitionInterrupted = new EventEmitter();\r\n    @Output() unhover = new EventEmitter();\r\n    @Output() relayouting = new EventEmitter();\r\n\r\n    public eventNames = ['afterExport', 'afterPlot', 'animated', 'animatingFrame', 'animationInterrupted', 'autoSize',\r\n        'beforeExport', 'buttonClicked', 'clickAnnotation', 'deselect', 'doubleClick', 'framework', 'hover',\r\n        'legendClick', 'legendDoubleClick', 'relayout', 'restyle', 'redraw', 'selected', 'selecting', 'sliderChange',\r\n        'sliderEnd', 'sliderStart', 'transitioning', 'transitionInterrupted', 'unhover', 'relayouting'];\r\n\r\n    constructor(\r\n        public plotly: PlotlyService,\r\n        public iterableDiffers: IterableDiffers,\r\n        public keyValueDiffers: KeyValueDiffers,\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.createPlot().then(() => {\r\n            const figure = this.createFigure();\r\n            this.initialized.emit(figure);\r\n        });\r\n\r\n\r\n        if (this.plotly.debug && this.click.observers.length > 0) {\r\n            const msg = 'DEPRECATED: Reconsider using `(plotly_click)` instead of `(click)` to avoid event conflict. '\r\n                + 'Please check https://github.com/plotly/angular-plotly.js#FAQ';\r\n            console.error(msg);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (typeof this.resizeHandler === 'function') {\r\n            this.getWindow().removeEventListener('resize', this.resizeHandler as any);\r\n            this.resizeHandler = undefined;\r\n        }\r\n\r\n        const figure = this.createFigure();\r\n        this.purge.emit(figure);\r\n        PlotlyService.remove(this.plotlyInstance);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        let shouldUpdate = false;\r\n\r\n        const revision: SimpleChange = changes.revision;\r\n        if (revision && !revision.isFirstChange()) {\r\n            shouldUpdate = true;\r\n        }\r\n\r\n        const debug: SimpleChange = changes.debug;\r\n        if (debug && !debug.isFirstChange()) {\r\n            shouldUpdate = true;\r\n        }\r\n\r\n        if (shouldUpdate) {\r\n            this.updatePlot();\r\n        }\r\n\r\n        this.updateWindowResizeHandler();\r\n    }\r\n\r\n    ngDoCheck() {\r\n        let shouldUpdate = false;\r\n\r\n        if (this.layoutDiffer) {\r\n            const layoutHasDiff = this.layoutDiffer.diff(this.layout);\r\n            if (layoutHasDiff) {\r\n                shouldUpdate = true;\r\n            }\r\n        } else if (this.layout) {\r\n            this.layoutDiffer = this.keyValueDiffers.find(this.layout).create();\r\n        } else {\r\n            this.layoutDiffer = undefined;\r\n        }\r\n\r\n        if (this.dataDiffer) {\r\n            const dataHasDiff = this.dataDiffer.diff(this.data);\r\n            if (dataHasDiff) {\r\n                shouldUpdate = true;\r\n            }\r\n        } else if (Array.isArray(this.data)) {\r\n            this.dataDiffer = this.iterableDiffers.find(this.data).create(this.dataDifferTrackBy);\r\n        } else {\r\n            this.dataDiffer = undefined;\r\n        }\r\n\r\n        if (shouldUpdate && this.plotlyInstance) {\r\n            this.datarevision += 1;\r\n            this.updatePlot();\r\n        }\r\n    }\r\n\r\n    getWindow(): any {\r\n        return window;\r\n    }\r\n\r\n    getClassName(): string {\r\n        let classes = [this.defaultClassName];\r\n\r\n        if (Array.isArray(this.className)) {\r\n            classes = classes.concat(this.className);\r\n        } else if (this.className) {\r\n            classes.push(this.className);\r\n        }\r\n\r\n        return classes.join(' ');\r\n    }\r\n\r\n    createPlot(): Promise<void> {\r\n        return this.plotly.newPlot(this.plotEl.nativeElement, this.data, this.layout, this.config, this.frames).then(plotlyInstance => {\r\n            this.plotlyInstance = plotlyInstance;\r\n            this.getWindow().gd = this.debug ? plotlyInstance : undefined;\r\n\r\n            this.eventNames.forEach(name => {\r\n                const eventName = `plotly_${name.toLowerCase()}`;\r\n                plotlyInstance.on(eventName, (data: any) => (this[name] as EventEmitter<void>).emit(data));\r\n            });\r\n\r\n            plotlyInstance.on('plotly_click', (data: any) => {\r\n                this.click.emit(data);\r\n                this.plotly_click.emit(data);\r\n            });\r\n\r\n            this.updateWindowResizeHandler();\r\n        }, err => {\r\n            console.error('Error while plotting:', err);\r\n            this.error.emit(err);\r\n        });\r\n    }\r\n\r\n    createFigure(): Plotly.Figure {\r\n        const p: any = this.plotlyInstance;\r\n        const figure: Plotly.Figure = {\r\n            data: p.data,\r\n            layout: p.layout,\r\n            frames: p._transitionData ? p._transitionData._frames : null\r\n        };\r\n\r\n        return figure;\r\n    }\r\n\r\n    updatePlot() {\r\n        if (!this.plotlyInstance) {\r\n            const error = new Error(`Plotly component wasn't initialized`);\r\n            this.error.emit(error);\r\n            throw error;\r\n        }\r\n\r\n        const layout = {\r\n            ...{datarevision: this.datarevision},\r\n            ...this.layout,\r\n        };\r\n\r\n        return this.plotly.update(this.plotlyInstance, this.data, layout, this.config, this.frames).then(() => {\r\n            const figure = this.createFigure();\r\n            this.update.emit(figure);\r\n        }, err => {\r\n            console.error('Error while updating plot:', err);\r\n            this.error.emit(err);\r\n        });\r\n    }\r\n\r\n    updateWindowResizeHandler() {\r\n        if (this.useResizeHandler) {\r\n            if (this.resizeHandler === undefined) {\r\n                this.resizeHandler = () => this.plotly.resize(this.plotlyInstance);\r\n                this.getWindow().addEventListener('resize', this.resizeHandler as any);\r\n            }\r\n        } else {\r\n            if (typeof this.resizeHandler === 'function') {\r\n                this.getWindow().removeEventListener('resize', this.resizeHandler as any);\r\n                this.resizeHandler = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    dataDifferTrackBy(_: number, item: any): any {\r\n        const obj = Object.assign({}, item, { uid: '' });\r\n        return JSON.stringify(obj);\r\n    }\r\n\r\n}\r\n","/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\r\n\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport {normalize} from './browser_fft_utils';\r\nimport {arrayBuffer2String, concatenateArrayBuffers, getRandomInteger, getUID, string2ArrayBuffer} from './generic_utils';\r\nimport {balancedTrainValSplitNumArrays} from './training_utils';\r\nimport {AudioDataAugmentationOptions, Example, SpectrogramData} from './types';\r\n\r\n// Descriptor for serialized dataset files: stands for:\r\n//   TensorFlow.js Speech-Commands Dataset.\r\n// DO NOT EVER CHANGE THIS!\r\nexport const DATASET_SERIALIZATION_DESCRIPTOR = 'TFJSSCDS';\r\n\r\n// A version number for the serialization. Since this needs\r\n// to be encoded within a length-1 Uint8 array, it must be\r\n//   1. an positive integer.\r\n//   2. monotonically increasing over its change history.\r\n// Item 1 is checked by unit tests.\r\nexport const DATASET_SERIALIZATION_VERSION = 1;\r\n\r\n/**\r\n * Specification for an `Example` (see above).\r\n *\r\n * Used for serialization of `Example`.\r\n */\r\nexport interface ExampleSpec {\r\n  /** A label for the example. */\r\n  label: string;\r\n\r\n  /** Number of frames in the spectrogram. */\r\n  spectrogramNumFrames: number;\r\n\r\n  /** The length of each frame in the spectrogram. */\r\n  spectrogramFrameSize: number;\r\n\r\n  /** The key frame index of the spectrogram. */\r\n  spectrogramKeyFrameIndex?: number;\r\n\r\n  /** Number of samples in the raw PCM-format audio (if any). */\r\n  rawAudioNumSamples?: number;\r\n\r\n  /** Sampling rate of the raw audio (if any). */\r\n  rawAudioSampleRateHz?: number;\r\n}\r\n\r\n/**\r\n * Serialized Dataset, containing a number of `Example`s in their\r\n * serialized format.\r\n *\r\n * This format consists of a plain-old JSON object as the manifest,\r\n * along with a flattened binary `ArrayBuffer`. The format facilitates\r\n * storage and transmission.\r\n */\r\nexport interface SerializedExamples {\r\n  /**\r\n   * Specifications of the serialized `Example`s, serialized as a string.\r\n   */\r\n  manifest: ExampleSpec[];\r\n\r\n  /**\r\n   * Serialized binary data from the `Example`s.\r\n   *\r\n   * Including the spectrograms and the raw audio (if any).\r\n   *\r\n   * For example, assuming `manifest.length` is `N`, the format of the\r\n   * `ArrayBuffer` is as follows:\r\n   *\r\n   *   [spectrogramData1, rawAudio1 (if any),\r\n   *    spectrogramData2, rawAudio2 (if any),\r\n   *    ...\r\n   *    spectrogramDataN, rawAudioN (if any)]\r\n   */\r\n  data: ArrayBuffer;\r\n}\r\n\r\nexport const BACKGROUND_NOISE_TAG = '_background_noise_';\r\n\r\n/**\r\n * Configuration for getting spectrograms as tensors.\r\n */\r\nexport interface GetDataConfig extends AudioDataAugmentationOptions {\r\n  /**\r\n   * Number of frames.\r\n   *\r\n   * This must be smaller than or equal to the # of frames of each\r\n   * example held by the dataset.\r\n   *\r\n   * If the # of frames of an example is greater than this number,\r\n   * the following heuristics will be used to extra >= 1 examples\r\n   * of length numFrames from the original example:\r\n   *\r\n   *   - If the label of the example is `BAKCGROUND_NOISE_TAG`,\r\n   *     the example will be splitted into multiple examples using the\r\n   *     `hopFrames` parameter (see below).\r\n   *   - If the label of the example is not `BACKGROUND_NOISE_TAG`,\r\n   *     the example will be splitted into multiple examples that\r\n   *     all contain the maximum-intensity frame using the `hopFrames`\r\n   *     parameter.\r\n   */\r\n  numFrames?: number;\r\n\r\n  /**\r\n   * Hop length in number of frames.\r\n   *\r\n   * Used when splitting a long example into multiple shorter ones.\r\n   *\r\n   * Must be provided if any such long examples exist.\r\n   */\r\n  hopFrames?: number;\r\n\r\n  /**\r\n   * Whether the spectrogram of each example will be normalized.\r\n   *\r\n   * Normalization means:\r\n   * - Subtracting the mean, and\r\n   * - Dividing the result by the standard deviation.\r\n   *\r\n   * Default: `true`.\r\n   */\r\n  normalize?: boolean;\r\n\r\n  /**\r\n   * Whether the examples will be shuffled prior to merged into\r\n   * `tf.Tensor`s.\r\n   *\r\n   * Default: `true`.\r\n   */\r\n  shuffle?: boolean;\r\n\r\n  /**\r\n   * Whether to obtain a `tf.data.Datasaet` object.\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  getDataset?: boolean;\r\n\r\n  /**\r\n   * Batch size for dataset.\r\n   *\r\n   * Applicable only if `getDataset === true`.\r\n   */\r\n  datasetBatchSize?: number;\r\n\r\n  /**\r\n   * Validation split for the datasaet.\r\n   *\r\n   * Applicable only if `getDataset === true`.\r\n   *\r\n   * The data will be divided into two fractions of relative sizes\r\n   * `[1 - datasetValidationSplit, datasetValidationSplit]`, for the\r\n   * training and validation `tf.data.Dataset` objects, respectively.\r\n   *\r\n   * Must be a number between 0 and 1.\r\n   * Default: 0.15.\r\n   */\r\n  datasetValidationSplit?: number;\r\n}\r\n\r\n// tslint:disable-next-line:no-any\r\nexport type SpectrogramAndTargetsTfDataset = tf.data.Dataset<{}>;\r\n\r\n/**\r\n * A serializable, mutable set of speech/audio `Example`s;\r\n */\r\nexport class Dataset {\r\n  private examples: {[id: string]: Example};\r\n  private label2Ids: {[label: string]: string[]};\r\n\r\n  /**\r\n   * Constructor of `Dataset`.\r\n   *\r\n   * If called with no arguments (i.e., `artifacts` == null), an empty dataset\r\n   * will be constructed.\r\n   *\r\n   * Else, the dataset will be deserialized from `artifacts`.\r\n   *\r\n   * @param serialized Optional serialization artifacts to deserialize.\r\n   */\r\n  constructor(serialized?: ArrayBuffer) {\r\n    this.examples = {};\r\n    this.label2Ids = {};\r\n    if (serialized != null) {\r\n      // Deserialize from the provided artifacts.\r\n      const artifacts = arrayBuffer2SerializedExamples(serialized);\r\n      let offset = 0;\r\n      for (let i = 0; i < artifacts.manifest.length; ++i) {\r\n        const spec = artifacts.manifest[i];\r\n        let byteLen = spec.spectrogramNumFrames * spec.spectrogramFrameSize;\r\n        if (spec.rawAudioNumSamples != null) {\r\n          byteLen += spec.rawAudioNumSamples;\r\n        }\r\n        byteLen *= 4;\r\n        this.addExample(deserializeExample(\r\n            {spec, data: artifacts.data.slice(offset, offset + byteLen)}));\r\n        offset += byteLen;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add an `Example` to the `Dataset`\r\n   *\r\n   * @param example A `Example`, with a label. The label must be a non-empty\r\n   *   string.\r\n   * @returns The UID for the added `Example`.\r\n   */\r\n  addExample(example: Example): string {\r\n    tf.util.assert(example != null, () => 'Got null or undefined example');\r\n    tf.util.assert(\r\n        example.label != null && example.label.length > 0,\r\n        () => `Expected label to be a non-empty string, ` +\r\n            `but got ${JSON.stringify(example.label)}`);\r\n    const uid = getUID();\r\n    this.examples[uid] = example;\r\n    if (!(example.label in this.label2Ids)) {\r\n      this.label2Ids[example.label] = [];\r\n    }\r\n    this.label2Ids[example.label].push(uid);\r\n    return uid;\r\n  }\r\n\r\n  /**\r\n   * Merge the incoming dataset into this dataset\r\n   *\r\n   * @param dataset The incoming dataset to be merged into this dataset.\r\n   */\r\n  merge(dataset: Dataset): void {\r\n    tf.util.assert(\r\n        dataset !== this, () => 'Cannot merge a dataset into itself');\r\n    const vocab = dataset.getVocabulary();\r\n    for (const word of vocab) {\r\n      const examples = dataset.getExamples(word);\r\n      for (const example of examples) {\r\n        this.addExample(example.example);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a map from `Example` label to number of `Example`s with the label.\r\n   *\r\n   * @returns A map from label to number of example counts under that label.\r\n   */\r\n  getExampleCounts(): {[label: string]: number} {\r\n    const counts: {[label: string]: number} = {};\r\n    for (const uid in this.examples) {\r\n      const example = this.examples[uid];\r\n      if (!(example.label in counts)) {\r\n        counts[example.label] = 0;\r\n      }\r\n      counts[example.label]++;\r\n    }\r\n    return counts;\r\n  }\r\n\r\n  /**\r\n   * Get all examples of a given label, with their UIDs.\r\n   *\r\n   * @param label The requested label.\r\n   * @return All examples of the given `label`, along with their UIDs.\r\n   *   The examples are sorted in the order in which they are added to the\r\n   *   `Dataset`.\r\n   * @throws Error if label is `null` or `undefined`.\r\n   */\r\n  getExamples(label: string): Array<{uid: string, example: Example}> {\r\n    tf.util.assert(\r\n        label != null,\r\n        () =>\r\n            `Expected label to be a string, but got ${JSON.stringify(label)}`);\r\n    tf.util.assert(\r\n        label in this.label2Ids,\r\n        () => `No example of label \"${label}\" exists in dataset`);\r\n    const output: Array<{uid: string, example: Example}> = [];\r\n    this.label2Ids[label].forEach(id => {\r\n      output.push({uid: id, example: this.examples[id]});\r\n    });\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Get all examples and labels as tensors.\r\n   *\r\n   * - If `label` is provided and exists in the vocabulary of the `Dataset`,\r\n   *   the spectrograms of all `Example`s under the `label` will be returned\r\n   *   as a 4D `tf.Tensor` as `xs`. The shape of the `tf.Tensor` will be\r\n   *     `[numExamples, numFrames, frameSize, 1]`\r\n   *   where\r\n   *     - `numExamples` is the number of `Example`s with the label\r\n   *     - `numFrames` is the number of frames in each spectrogram\r\n   *     - `frameSize` is the size of each spectrogram frame.\r\n   *   No label Tensor will be returned.\r\n   * - If `label` is not provided, all `Example`s will be returned as `xs`.\r\n   *   In addition, `ys` will contain a one-hot encoded list of labels.\r\n   *   - The shape of `xs` will be: `[numExamples, numFrames, frameSize, 1]`\r\n   *   - The shape of `ys` will be: `[numExamples, vocabularySize]`.\r\n   *\r\n   * @returns If `config.getDataset` is `true`, returns two `tf.data.Dataset`\r\n   *   objects, one for training and one for validation.\r\n   *   Else, xs` and `ys` tensors. See description above.\r\n   * @throws Error\r\n   *   - if not all the involved spectrograms have matching `numFrames` and\r\n   *     `frameSize`, or\r\n   *   - if `label` is provided and is not present in the vocabulary of the\r\n   *     `Dataset`, or\r\n   *   - if the `Dataset` is currently empty.\r\n   */\r\n  getData(label?: string, config?: GetDataConfig): {\r\n    xs: tf.Tensor4D,\r\n    ys?: tf.Tensor2D\r\n  }|[SpectrogramAndTargetsTfDataset, SpectrogramAndTargetsTfDataset] {\r\n    tf.util.assert(\r\n        this.size() > 0,\r\n        () =>\r\n            `Cannot get spectrograms as tensors because the dataset is empty`);\r\n    const vocab = this.getVocabulary();\r\n    if (label != null) {\r\n      tf.util.assert(\r\n          vocab.indexOf(label) !== -1,\r\n          () => `Label ${label} is not in the vocabulary ` +\r\n              `(${JSON.stringify(vocab)})`);\r\n    } else {\r\n      // If all words are requested, there must be at least two words in the\r\n      // vocabulary to make one-hot encoding possible.\r\n      tf.util.assert(\r\n          vocab.length > 1,\r\n          () => `One-hot encoding of labels requires the vocabulary to have ` +\r\n              `at least two words, but it has only ${vocab.length} word.`);\r\n    }\r\n\r\n    if (config == null) {\r\n      config = {};\r\n    }\r\n\r\n    // Get the numFrames lengths of all the examples currently held by the\r\n    // dataset.\r\n    const sortedUniqueNumFrames = this.getSortedUniqueNumFrames();\r\n    let numFrames: number;\r\n    let hopFrames: number;\r\n    if (sortedUniqueNumFrames.length === 1) {\r\n      numFrames = config.numFrames == null ? sortedUniqueNumFrames[0] :\r\n                                             config.numFrames;\r\n      hopFrames = config.hopFrames == null ? 1 : config.hopFrames;\r\n    } else {\r\n      numFrames = config.numFrames;\r\n      tf.util.assert(\r\n          numFrames != null && Number.isInteger(numFrames) && numFrames > 0,\r\n          () => `There are ${\r\n                    sortedUniqueNumFrames.length} unique lengths among ` +\r\n              `the ${this.size()} examples of this Dataset, hence numFrames ` +\r\n              `is required. But it is not provided.`);\r\n      tf.util.assert(\r\n          numFrames <= sortedUniqueNumFrames[0],\r\n          () => `numFrames (${numFrames}) exceeds the minimum numFrames ` +\r\n              `(${sortedUniqueNumFrames[0]}) among the examples of ` +\r\n              `the Dataset.`);\r\n\r\n      hopFrames = config.hopFrames;\r\n      tf.util.assert(\r\n          hopFrames != null && Number.isInteger(hopFrames) && hopFrames > 0,\r\n          () => `There are ${\r\n                    sortedUniqueNumFrames.length} unique lengths among ` +\r\n              `the ${this.size()} examples of this Dataset, hence hopFrames ` +\r\n              `is required. But it is not provided.`);\r\n    }\r\n\r\n    // Normalization is performed by default.\r\n    const toNormalize = config.normalize == null ? true : config.normalize;\r\n\r\n    return tf.tidy(() => {\r\n      let xTensors: tf.Tensor3D[] = [];\r\n      let xArrays: Float32Array[] = [];\r\n\r\n      let labelIndices: number[] = [];\r\n      let uniqueFrameSize: number;\r\n      for (let i = 0; i < vocab.length; ++i) {\r\n        const currentLabel = vocab[i];\r\n        if (label != null && currentLabel !== label) {\r\n          continue;\r\n        }\r\n        const ids = this.label2Ids[currentLabel];\r\n        for (const id of ids) {\r\n          const example = this.examples[id];\r\n          const spectrogram = example.spectrogram;\r\n          const frameSize = spectrogram.frameSize;\r\n          if (uniqueFrameSize == null) {\r\n            uniqueFrameSize = frameSize;\r\n          } else {\r\n            tf.util.assert(\r\n                frameSize === uniqueFrameSize,\r\n                () => `Mismatch in frameSize  ` +\r\n                    `(${frameSize} vs ${uniqueFrameSize})`);\r\n          }\r\n\r\n          const snippetLength = spectrogram.data.length / frameSize;\r\n          let focusIndex = null;\r\n          if (currentLabel !== BACKGROUND_NOISE_TAG) {\r\n            focusIndex = spectrogram.keyFrameIndex == null ?\r\n                getMaxIntensityFrameIndex(spectrogram).dataSync()[0] :\r\n                spectrogram.keyFrameIndex;\r\n          }\r\n          // TODO(cais): See if we can get rid of dataSync();\r\n\r\n          const snippet =\r\n              tf.tensor3d(spectrogram.data, [snippetLength, frameSize, 1]);\r\n          const windows =\r\n              getValidWindows(snippetLength, focusIndex, numFrames, hopFrames);\r\n          for (const window of windows) {\r\n            const windowedSnippet = tf.tidy(() => {\r\n              const output = snippet.slice(\r\n                  [window[0], 0, 0], [window[1] - window[0], -1, -1]);\r\n              return toNormalize ? normalize(output) : output;\r\n            });\r\n            if (config.getDataset) {\r\n              // TODO(cais): See if we can do away with dataSync();\r\n              // TODO(cais): Shuffling?\r\n              xArrays.push(windowedSnippet.dataSync() as Float32Array);\r\n            } else {\r\n              xTensors.push(windowedSnippet as tf.Tensor3D);\r\n            }\r\n            if (label == null) {\r\n              labelIndices.push(i);\r\n            }\r\n          }\r\n          tf.dispose(snippet);  // For memory saving.\r\n        }\r\n      }\r\n\r\n      if (config.augmentByMixingNoiseRatio != null) {\r\n        this.augmentByMixingNoise(\r\n            config.getDataset ? xArrays :\r\n                                xTensors as Array<Float32Array|tf.Tensor>,\r\n            labelIndices, config.augmentByMixingNoiseRatio);\r\n      }\r\n\r\n      const shuffle = config.shuffle == null ? true : config.shuffle;\r\n      if (config.getDataset) {\r\n        const batchSize =\r\n            config.datasetBatchSize == null ? 32 : config.datasetBatchSize;\r\n\r\n        // Split the data into two splits: training and validation.\r\n        const valSplit = config.datasetValidationSplit == null ?\r\n            0.15 :\r\n            config.datasetValidationSplit;\r\n        tf.util.assert(\r\n            valSplit > 0 && valSplit < 1,\r\n            () => `Invalid dataset validation split: ${valSplit}`);\r\n\r\n        const zippedXandYArrays =\r\n            xArrays.map((xArray, i) => [xArray, labelIndices[i]]);\r\n        tf.util.shuffle(\r\n            zippedXandYArrays);  // Shuffle the data before splitting.\r\n        xArrays = zippedXandYArrays.map(item => item[0]) as Float32Array[];\r\n        const yArrays = zippedXandYArrays.map(item => item[1]) as number[];\r\n        const {trainXs, trainYs, valXs, valYs} =\r\n            balancedTrainValSplitNumArrays(xArrays, yArrays, valSplit);\r\n\r\n        // TODO(cais): The typing around Float32Array is not working properly\r\n        // for tf.data currently. Tighten the types when the tf.data bug is\r\n        // fixed.\r\n        // tslint:disable:no-any\r\n        const xTrain =\r\n            tf.data.array(trainXs as any).map(x => tf.tensor3d(x as any, [\r\n              numFrames, uniqueFrameSize, 1\r\n            ]));\r\n        const yTrain = tf.data.array(trainYs).map(\r\n            y => tf.oneHot([y], vocab.length).squeeze([0]));\r\n        // TODO(cais): See if we can tighten the typing.\r\n        let trainDataset = tf.data.zip({xs: xTrain, ys: yTrain});\r\n        if (shuffle) {\r\n          // Shuffle the dataset.\r\n          trainDataset = trainDataset.shuffle(xArrays.length);\r\n        }\r\n        trainDataset = trainDataset.batch(batchSize).prefetch(4);\r\n\r\n        const xVal =\r\n            tf.data.array(valXs as any).map(x => tf.tensor3d(x as any, [\r\n              numFrames, uniqueFrameSize, 1\r\n            ]));\r\n        const yVal = tf.data.array(valYs).map(\r\n            y => tf.oneHot([y], vocab.length).squeeze([0]));\r\n        let valDataset = tf.data.zip({xs: xVal, ys: yVal});\r\n        valDataset = valDataset.batch(batchSize).prefetch(4);\r\n        // tslint:enable:no-any\r\n\r\n        // tslint:disable-next-line:no-any\r\n        return [trainDataset, valDataset] as any;\r\n      } else {\r\n        if (shuffle) {\r\n          // Shuffle the data.\r\n          const zipped: Array<{x: tf.Tensor3D, y: number}> = [];\r\n          xTensors.forEach((xTensor, i) => {\r\n            zipped.push({x: xTensor, y: labelIndices[i]});\r\n          });\r\n          tf.util.shuffle(zipped);\r\n          xTensors = zipped.map(item => item.x);\r\n          labelIndices = zipped.map(item => item.y);\r\n        }\r\n\r\n        const targets = label == null ?\r\n            tf.oneHot(tf.tensor1d(labelIndices, 'int32'), vocab.length)\r\n                .asType('float32') :\r\n            undefined;\r\n        return {\r\n          xs: tf.stack(xTensors) as tf.Tensor4D,\r\n          ys: targets as tf.Tensor2D\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private augmentByMixingNoise<T extends tf.Tensor|Float32Array>(\r\n      xs: T[], labelIndices: number[], ratio: number): void {\r\n    if (xs == null || xs.length === 0) {\r\n      throw new Error(\r\n          `Cannot perform augmentation because data is null or empty`);\r\n    }\r\n    const isTypedArray = xs[0] instanceof Float32Array;\r\n\r\n    const vocab = this.getVocabulary();\r\n    const noiseExampleIndices: number[] = [];\r\n    const wordExampleIndices: number[] = [];\r\n    for (let i = 0; i < labelIndices.length; ++i) {\r\n      if (vocab[labelIndices[i]] === BACKGROUND_NOISE_TAG) {\r\n        noiseExampleIndices.push(i);\r\n      } else {\r\n        wordExampleIndices.push(i);\r\n      }\r\n    }\r\n    if (noiseExampleIndices.length === 0) {\r\n      throw new Error(\r\n          `Cannot perform augmentation by mixing with noise when ` +\r\n          `there is no example with label ${BACKGROUND_NOISE_TAG}`);\r\n    }\r\n\r\n    const mixedXTensors: Array<tf.Tensor|Float32Array> = [];\r\n    const mixedLabelIndices: number[] = [];\r\n    for (const index of wordExampleIndices) {\r\n      const noiseIndex =  // Randomly sample from the noises, with replacement.\r\n          noiseExampleIndices[getRandomInteger(0, noiseExampleIndices.length)];\r\n      const signalTensor = isTypedArray ?\r\n          tf.tensor1d(xs[index] as Float32Array) :\r\n          xs[index] as tf.Tensor;\r\n      const noiseTensor = isTypedArray ?\r\n          tf.tensor1d(xs[noiseIndex] as Float32Array) :\r\n          xs[noiseIndex] as tf.Tensor;\r\n      const mixed: tf.Tensor =\r\n          tf.tidy(() => normalize(signalTensor.add(noiseTensor.mul(ratio))));\r\n      if (isTypedArray) {\r\n        mixedXTensors.push(mixed.dataSync() as Float32Array);\r\n      } else {\r\n        mixedXTensors.push(mixed);\r\n      }\r\n      mixedLabelIndices.push(labelIndices[index]);\r\n    }\r\n    console.log(\r\n        `Data augmentation: mixing noise: added ${mixedXTensors.length} ` +\r\n        `examples`);\r\n    mixedXTensors.forEach(tensor => xs.push(tensor as T));\r\n    labelIndices.push(...mixedLabelIndices);\r\n  }\r\n\r\n  private getSortedUniqueNumFrames(): number[] {\r\n    const numFramesSet = new Set<number>();\r\n    const vocab = this.getVocabulary();\r\n    for (let i = 0; i < vocab.length; ++i) {\r\n      const label = vocab[i];\r\n      const ids = this.label2Ids[label];\r\n      for (const id of ids) {\r\n        const spectrogram = this.examples[id].spectrogram;\r\n        const numFrames = spectrogram.data.length / spectrogram.frameSize;\r\n        numFramesSet.add(numFrames);\r\n      }\r\n    }\r\n    const uniqueNumFrames = [...numFramesSet];\r\n    uniqueNumFrames.sort();\r\n    return uniqueNumFrames;\r\n  }\r\n\r\n  /**\r\n   * Remove an example from the `Dataset`.\r\n   *\r\n   * @param uid The UID of the example to remove.\r\n   * @throws Error if the UID doesn't exist in the `Dataset`.\r\n   */\r\n  removeExample(uid: string): void {\r\n    if (!(uid in this.examples)) {\r\n      throw new Error(`Nonexistent example UID: ${uid}`);\r\n    }\r\n    const label = this.examples[uid].label;\r\n    delete this.examples[uid];\r\n    const index = this.label2Ids[label].indexOf(uid);\r\n    this.label2Ids[label].splice(index, 1);\r\n    if (this.label2Ids[label].length === 0) {\r\n      delete this.label2Ids[label];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the key frame index of a given example.\r\n   *\r\n   * @param uid The UID of the example of which the `keyFrameIndex` is to be\r\n   *   set.\r\n   * @param keyFrameIndex The desired value of the `keyFrameIndex`. Must\r\n   *   be >= 0, < the number of frames of the example, and an integer.\r\n   * @throws Error If the UID and/or the `keyFrameIndex` value is invalid.\r\n   */\r\n  setExampleKeyFrameIndex(uid: string, keyFrameIndex: number) {\r\n    if (!(uid in this.examples)) {\r\n      throw new Error(`Nonexistent example UID: ${uid}`);\r\n    }\r\n    const spectrogram = this.examples[uid].spectrogram;\r\n    const numFrames = spectrogram.data.length / spectrogram.frameSize;\r\n    tf.util.assert(\r\n        keyFrameIndex >= 0 && keyFrameIndex < numFrames &&\r\n            Number.isInteger(keyFrameIndex),\r\n        () => `Invalid keyFrameIndex: ${keyFrameIndex}. ` +\r\n            `Must be >= 0, < ${numFrames}, and an integer.`);\r\n    spectrogram.keyFrameIndex = keyFrameIndex;\r\n  }\r\n\r\n  /**\r\n   * Get the total number of `Example` currently held by the `Dataset`.\r\n   *\r\n   * @returns Total `Example` count.\r\n   */\r\n  size(): number {\r\n    return Object.keys(this.examples).length;\r\n  }\r\n\r\n  /**\r\n   * Get the total duration of the `Example` currently held by `Dataset`,\r\n   *\r\n   * in milliseconds.\r\n   *\r\n   * @return Total duration in milliseconds.\r\n   */\r\n  durationMillis(): number {\r\n    let durMillis = 0;\r\n    const DEFAULT_FRAME_DUR_MILLIS = 23.22;\r\n    for (const key in this.examples) {\r\n      const spectrogram = this.examples[key].spectrogram;\r\n      const frameDurMillis =\r\n          spectrogram.frameDurationMillis | DEFAULT_FRAME_DUR_MILLIS;\r\n      durMillis +=\r\n          spectrogram.data.length / spectrogram.frameSize * frameDurMillis;\r\n    }\r\n    return durMillis;\r\n  }\r\n\r\n  /**\r\n   * Query whether the `Dataset` is currently empty.\r\n   *\r\n   * I.e., holds zero examples.\r\n   *\r\n   * @returns Whether the `Dataset` is currently empty.\r\n   */\r\n  empty(): boolean {\r\n    return this.size() === 0;\r\n  }\r\n\r\n  /**\r\n   * Remove all `Example`s from the `Dataset`.\r\n   */\r\n  clear(): void {\r\n    this.examples = {};\r\n  }\r\n\r\n  /**\r\n   * Get the list of labels among all `Example`s the `Dataset` currently holds.\r\n   *\r\n   * @returns A sorted Array of labels, for the unique labels that belong to all\r\n   *   `Example`s currently held by the `Dataset`.\r\n   */\r\n  getVocabulary(): string[] {\r\n    const vocab = new Set<string>();\r\n    for (const uid in this.examples) {\r\n      const example = this.examples[uid];\r\n      vocab.add(example.label);\r\n    }\r\n    const sortedVocab = [...vocab];\r\n    sortedVocab.sort();\r\n    return sortedVocab;\r\n  }\r\n\r\n  /**\r\n   * Serialize the `Dataset`.\r\n   *\r\n   * The `Examples` are sorted in the following order:\r\n   *   - First, the labels in the vocabulary are sorted.\r\n   *   - Second, the `Example`s for every label are sorted by the order in\r\n   *     which they are added to this `Dataset`.\r\n   *\r\n   * @param wordLabels Optional word label(s) to serialize. If specified, only\r\n   *   the examples with labels matching the argument will be serialized. If\r\n   *   any specified word label does not exist in the vocabulary of this\r\n   *   dataset, an Error will be thrown.\r\n   * @returns A `ArrayBuffer` object amenable to transmission and storage.\r\n   */\r\n  serialize(wordLabels?: string|string[]): ArrayBuffer {\r\n    const vocab = this.getVocabulary();\r\n    tf.util.assert(!this.empty(), () => `Cannot serialize empty Dataset`);\r\n\r\n    if (wordLabels != null) {\r\n      if (!Array.isArray(wordLabels)) {\r\n        wordLabels = [wordLabels];\r\n      }\r\n      wordLabels.forEach(wordLabel => {\r\n        if (vocab.indexOf(wordLabel) === -1) {\r\n          throw new Error(\r\n              `Word label \"${wordLabel}\" does not exist in the ` +\r\n              `vocabulary of this dataset. The vocabulary is: ` +\r\n              `${JSON.stringify(vocab)}.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    const manifest: ExampleSpec[] = [];\r\n    const buffers: ArrayBuffer[] = [];\r\n    for (const label of vocab) {\r\n      if (wordLabels != null && wordLabels.indexOf(label) === -1) {\r\n        continue;\r\n      }\r\n      const ids = this.label2Ids[label];\r\n      for (const id of ids) {\r\n        const artifact = serializeExample(this.examples[id]);\r\n        manifest.push(artifact.spec);\r\n        buffers.push(artifact.data);\r\n      }\r\n    }\r\n    return serializedExamples2ArrayBuffer(\r\n        {manifest, data: concatenateArrayBuffers(buffers)});\r\n  }\r\n}\r\n\r\n/** Serialize an `Example`. */\r\nexport function serializeExample(example: Example):\r\n    {spec: ExampleSpec, data: ArrayBuffer} {\r\n  const hasRawAudio = example.rawAudio != null;\r\n  const spec: ExampleSpec = {\r\n    label: example.label,\r\n    spectrogramNumFrames:\r\n        example.spectrogram.data.length / example.spectrogram.frameSize,\r\n    spectrogramFrameSize: example.spectrogram.frameSize,\r\n  };\r\n  if (example.spectrogram.keyFrameIndex != null) {\r\n    spec.spectrogramKeyFrameIndex = example.spectrogram.keyFrameIndex;\r\n  }\r\n\r\n  let data = example.spectrogram.data.buffer.slice(0);\r\n  if (hasRawAudio) {\r\n    spec.rawAudioNumSamples = example.rawAudio.data.length;\r\n    spec.rawAudioSampleRateHz = example.rawAudio.sampleRateHz;\r\n\r\n    // Account for the fact that the data are all float32.\r\n    data = concatenateArrayBuffers([data, example.rawAudio.data.buffer]);\r\n  }\r\n  return {spec, data};\r\n}\r\n\r\n/** Deserialize an `Example`. */\r\nexport function deserializeExample(\r\n    artifact: {spec: ExampleSpec, data: ArrayBuffer}): Example {\r\n  const spectrogram: SpectrogramData = {\r\n    frameSize: artifact.spec.spectrogramFrameSize,\r\n    data: new Float32Array(artifact.data.slice(\r\n        0,\r\n        4 * artifact.spec.spectrogramFrameSize *\r\n            artifact.spec.spectrogramNumFrames))\r\n  };\r\n  if (artifact.spec.spectrogramKeyFrameIndex != null) {\r\n    spectrogram.keyFrameIndex = artifact.spec.spectrogramKeyFrameIndex;\r\n  }\r\n  const ex: Example = {label: artifact.spec.label, spectrogram};\r\n  if (artifact.spec.rawAudioNumSamples != null) {\r\n    ex.rawAudio = {\r\n      sampleRateHz: artifact.spec.rawAudioSampleRateHz,\r\n      data: new Float32Array(artifact.data.slice(\r\n          4 * artifact.spec.spectrogramFrameSize *\r\n          artifact.spec.spectrogramNumFrames))\r\n    };\r\n  }\r\n  return ex;\r\n}\r\n\r\n/**\r\n * Encode intermediate serialization format as an ArrayBuffer.\r\n *\r\n * Format of the binary ArrayBuffer:\r\n *   1. An 8-byte descriptor (see above).\r\n *   2. A 4-byte version number as Uint32.\r\n *   3. A 4-byte number for the byte length of the JSON manifest.\r\n *   4. The encoded JSON manifest\r\n *   5. The binary data of the spectrograms, and raw audio (if any).\r\n *\r\n * @param serialized: Intermediate serialization format of a dataset.\r\n * @returns The binary conversion result as an ArrayBuffer.\r\n */\r\nfunction serializedExamples2ArrayBuffer(serialized: SerializedExamples):\r\n    ArrayBuffer {\r\n  const manifestBuffer =\r\n      string2ArrayBuffer(JSON.stringify(serialized.manifest));\r\n\r\n  const descriptorBuffer = string2ArrayBuffer(DATASET_SERIALIZATION_DESCRIPTOR);\r\n  const version = new Uint32Array([DATASET_SERIALIZATION_VERSION]);\r\n  const manifestLength = new Uint32Array([manifestBuffer.byteLength]);\r\n  const headerBuffer = concatenateArrayBuffers(\r\n      [descriptorBuffer, version.buffer, manifestLength.buffer]);\r\n\r\n  return concatenateArrayBuffers(\r\n      [headerBuffer, manifestBuffer, serialized.data]);\r\n}\r\n\r\n/** Decode an ArrayBuffer as intermediate serialization format. */\r\nexport function arrayBuffer2SerializedExamples(buffer: ArrayBuffer):\r\n    SerializedExamples {\r\n  tf.util.assert(buffer != null, () => 'Received null or undefined buffer');\r\n  // Check descriptor.\r\n  let offset = 0;\r\n  const descriptor = arrayBuffer2String(\r\n      buffer.slice(offset, DATASET_SERIALIZATION_DESCRIPTOR.length));\r\n  tf.util.assert(\r\n      descriptor === DATASET_SERIALIZATION_DESCRIPTOR,\r\n      () => `Deserialization error: Invalid descriptor`);\r\n  offset += DATASET_SERIALIZATION_DESCRIPTOR.length;\r\n  // Skip the version part for now. It may be used in the future.\r\n  offset += 4;\r\n\r\n  // Extract the length of the encoded manifest JSON as a Uint32.\r\n  const manifestLength = new Uint32Array(buffer, offset, 1);\r\n  offset += 4;\r\n  const manifestBeginByte = offset;\r\n  offset = manifestBeginByte + manifestLength[0];\r\n  const manifestBytes = buffer.slice(manifestBeginByte, offset);\r\n  const manifestString = arrayBuffer2String(manifestBytes);\r\n  const manifest = JSON.parse(manifestString);\r\n  const data = buffer.slice(offset);\r\n  return {manifest, data};\r\n}\r\n\r\n/**\r\n * Get valid windows in a long snippet.\r\n *\r\n * Each window is represented by an inclusive left index and an exclusive\r\n * right index.\r\n *\r\n * @param snippetLength Long of the entire snippet. Must be a positive\r\n *   integer.\r\n * @param focusIndex Optional. If `null` or `undefined`, an array of\r\n *   evenly-spaced windows will be generated. The array of windows will\r\n *   start from the first possible location (i.e., [0, windowLength]).\r\n *   If not `null` or `undefined`, must be an integer >= 0 and < snippetLength.\r\n * @param windowLength Length of each window. Must be a positive integer and\r\n *   <= snippetLength.\r\n * @param windowHop Hops between successsive windows. Must be a positive\r\n *   integer.\r\n * @returns An array of [beginIndex, endIndex] pairs.\r\n */\r\nexport function getValidWindows(\r\n    snippetLength: number, focusIndex: number, windowLength: number,\r\n    windowHop: number): Array<[number, number]> {\r\n  tf.util.assert(\r\n      Number.isInteger(snippetLength) && snippetLength > 0,\r\n      () =>\r\n          `snippetLength must be a positive integer, but got ${snippetLength}`);\r\n  if (focusIndex != null) {\r\n    tf.util.assert(\r\n        Number.isInteger(focusIndex) && focusIndex >= 0,\r\n        () =>\r\n            `focusIndex must be a non-negative integer, but got ${focusIndex}`);\r\n  }\r\n  tf.util.assert(\r\n      Number.isInteger(windowLength) && windowLength > 0,\r\n      () => `windowLength must be a positive integer, but got ${windowLength}`);\r\n  tf.util.assert(\r\n      Number.isInteger(windowHop) && windowHop > 0,\r\n      () => `windowHop must be a positive integer, but got ${windowHop}`);\r\n  tf.util.assert(\r\n      windowLength <= snippetLength,\r\n      () => `windowLength (${windowLength}) exceeds snippetLength ` +\r\n          `(${snippetLength})`);\r\n  tf.util.assert(\r\n      focusIndex < snippetLength,\r\n      () => `focusIndex (${focusIndex}) equals or exceeds snippetLength ` +\r\n          `(${snippetLength})`);\r\n\r\n  if (windowLength === snippetLength) {\r\n    return [[0, snippetLength]];\r\n  }\r\n\r\n  const windows: Array<[number, number]> = [];\r\n\r\n  if (focusIndex == null) {\r\n    // Deal with the special case of no focus frame:\r\n    // Output an array of evenly-spaced windows, starting from\r\n    // the first possible location.\r\n    let begin = 0;\r\n    while (begin + windowLength <= snippetLength) {\r\n      windows.push([begin, begin + windowLength]);\r\n      begin += windowHop;\r\n    }\r\n    return windows;\r\n  }\r\n\r\n  const leftHalf = Math.floor(windowLength / 2);\r\n  let left = focusIndex - leftHalf;\r\n  if (left < 0) {\r\n    left = 0;\r\n  } else if (left + windowLength > snippetLength) {\r\n    left = snippetLength - windowLength;\r\n  }\r\n\r\n  while (true) {\r\n    if (left - windowHop < 0 || focusIndex >= left - windowHop + windowLength) {\r\n      break;\r\n    }\r\n    left -= windowHop;\r\n  }\r\n\r\n  while (left + windowLength <= snippetLength) {\r\n    if (focusIndex < left) {\r\n      break;\r\n    }\r\n    windows.push([left, left + windowLength]);\r\n    left += windowHop;\r\n  }\r\n  return windows;\r\n}\r\n\r\n/**\r\n * Calculate an intensity profile from a spectrogram.\r\n *\r\n * The intensity at each time frame is caclulated by simply averaging all the\r\n * spectral values that belong to that time frame.\r\n *\r\n * @param spectrogram The input spectrogram.\r\n * @returns The temporal profile of the intensity as a 1D tf.Tensor of shape\r\n *   `[numFrames]`.\r\n */\r\nexport function spectrogram2IntensityCurve(spectrogram: SpectrogramData):\r\n    tf.Tensor {\r\n  return tf.tidy(() => {\r\n    const numFrames = spectrogram.data.length / spectrogram.frameSize;\r\n    const x = tf.tensor2d(spectrogram.data, [numFrames, spectrogram.frameSize]);\r\n    return x.mean(-1);\r\n  });\r\n}\r\n\r\n/**\r\n * Get the index to the maximum intensity frame.\r\n *\r\n * The intensity of each time frame is calculated as the arithmetic mean of\r\n * all the spectral values belonging to that time frame.\r\n *\r\n * @param spectrogram The input spectrogram.\r\n * @returns The index to the time frame containing the maximum intensity.\r\n */\r\nexport function getMaxIntensityFrameIndex(spectrogram: SpectrogramData):\r\n    tf.Scalar {\r\n  return tf.tidy(() => spectrogram2IntensityCurve(spectrogram).argMax());\r\n}\r\n","import { Component, ElementRef, Input, OnInit, AfterViewInit, OnChanges, ViewChild, ViewEncapsulation } from \"@angular/core\";\r\nimport * as PlotlyJS from 'node_modules/plotly.js';\r\nimport * as d3 from 'd3-selection';\r\nimport * as d3Scale from 'd3-scale';\r\nimport * as d3Shape from 'd3-shape';\r\nimport * as d3Axis from 'd3-axis';\r\nimport * as d3Array from 'd3-array';\r\n\nimport { SAMPLE_DATA } from 'src/app/d3/data';\n\nexport interface Margin {\r\n  top: number;\r\n  right: number;\r\n  bottom: number;\r\n  left: number;\r\n}\n\n\n@Component({\n  selector: 'app-d3',\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: './d3.component.html',\n  styleUrls: ['./d3.component.scss']\n})\nexport class D3Component implements AfterViewInit {\n\n  title = 'Stacked Bar Chart';\r\n  SAMPLE_DATA = SAMPLE_DATA\r\n  @ViewChild(\"svg\", { static: false }) svgEl: ElementRef;\r\n  private margin: Margin;\r\n\r\n  private width: number = 400;\r\n  private height: number = 400;\r\n\r\n  private svg: any;     // TODO replace all `any` by the right type\r\n\r\n  private x: any;\r\n  private y: any;\r\n  private z: any;\r\n  private g: any;\r\n  val2 = 50;\r\n  graphTrainLoss: any;\r\n  trainLossValues = [];\r\n  valLossValues = [];\r\n  public graph = {\r\n    data: [{ x: [1, 2, 3], y: [2, 5, 3], type: 'bar' }],\r\n    layout: { autosize: true, title: 'A Fancy Plot' },\r\n  };\r\n\r\n  constructor(public el: ElementRef) {\r\n    console.log(this.graph.layout.title);\r\n\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    console.log(this.SAMPLE_DATA);\r\n    this.initMargins();\r\n    this.initSvg();\r\n    this.drawChart(this.SAMPLE_DATA);\r\n  }\r\n\r\n\r\n  private initMargins() {\r\n    this.margin = { top: 20, right: 20, bottom: 30, left: 40 };\r\n  }\r\n\r\n  private initSvg() {\r\n    const element = this.svgEl.nativeElement;\r\n    //d3.select(element).select('svg#svg svg').remove();\r\n    this.svg = d3.select(element).append('svg');\r\n\r\n    //this.width = +this.svg.attr('width') - this.margin.left - this.margin.right;\r\n    //this.height = +this.svg.attr('height') - this.margin.top - this.margin.bottom;\r\n    this.g = this.svg.append('g').attr('transform', 'translate(' + this.margin.left + ',' + this.margin.top + ')');\r\n\r\n    this.x = d3Scale.scaleBand()\r\n      .rangeRound([0, this.width])\r\n      .paddingInner(0.05)\r\n      .align(0.1);\r\n    this.y = d3Scale.scaleLinear()\r\n      .rangeRound([this.height, 0]);\r\n    this.z = d3Scale.scaleOrdinal()\r\n      .range(['#98abc5', '#8a89a6', '#7b6888', '#6b486b', '#a05d56', '#d0743c', '#ff8c00']);\r\n  }\r\n\r\n  private drawChart(data: any[]) {\r\n\r\n    let keys = Object.getOwnPropertyNames(data[0]).slice(1);\r\n\r\n    data = data.map(v => {\r\n      v.total = keys.map(key => v[key]).reduce((a, b) => a + b, 0);\r\n      return v;\r\n    });\r\n    data.sort((a: any, b: any) => b.total - a.total);\r\n\r\n    this.x.domain(data.map((d: any) => d.State));\r\n    this.y.domain([0, d3Array.max(data, (d: any) => d.total)]).nice();\r\n    this.z.domain(keys);\r\n\r\n    this.g.append('g')\r\n      .selectAll('g')\r\n      .data(d3Shape.stack().keys(keys)(data))\r\n      .enter().append('g')\r\n      .attr('fill', d => this.z(d.key))\r\n      .selectAll('rect')\r\n      .data(d => d)\r\n      .enter().append('rect')\r\n      .attr('x', d => this.x(d.data.State))\r\n      .attr('y', d => this.y(d[1]))\r\n      .attr('height', d => this.y(d[0]) - this.y(d[1]))\r\n      .attr('width', this.x.bandwidth());\r\n\r\n    this.g.append('g')\r\n      .attr('class', 'axis')\r\n      .attr('transform', 'translate(0,' + this.height + ')')\r\n      .call(d3Axis.axisBottom(this.x));\r\n\r\n    this.g.append('g')\r\n      .attr('class', 'axis')\r\n      .call(d3Axis.axisLeft(this.y).ticks(null, 's'))\r\n      .append('text')\r\n      .attr('font-size', '18px')\r\n      .attr('x', 2)\r\n      .attr('y', this.y(this.y.ticks().pop()) + 0.5)\r\n      .attr('dy', '0.6em')\r\n      .attr('fill', '#757272')\r\n      .attr('font-weight', 'bold')\r\n      .attr('text-anchor', 'start')\r\n      .text('Population');\r\n\r\n    let legend = this.g.append('g')\r\n      .attr('font-family', 'sans-serif')\r\n      .attr('font-size', '10px')\r\n      .attr('text-anchor', 'end')\r\n      .attr('fill', '#000')\r\n      .selectAll('g')\r\n      .data(keys.slice().reverse())\r\n      .enter().append('g')\r\n      .attr('transform', (d, i) => 'translate(20,' + i * 25 + ')');\r\n\r\n    legend.append('rect')\r\n      .attr('x', this.width + 19)\r\n      .attr('width', 19)\r\n      .attr('height', 19)\r\n      .attr('fill', '#000')\r\n      .attr('font-size', '10px')\r\n      .attr('fill', this.z);\r\n\r\n    legend.append('text')\r\n      .attr('x', this.width + 10)\r\n      .attr('y', 9.5)\r\n      .attr('dy', '0.32em')\r\n      .attr('font-size', '10px')\r\n      .text(d => d);\r\n  }\n\n\n\r\n  a = 10;\r\n  b = 12;\r\n  c = 15;\r\n  d = 9;\r\n\n  //  t = setInterval(() => {\r\n\r\n  //    console.log(this.a)\r\n  //  }, 4000);))\r\n  //}\n  rand() {\r\n    return Math.random();\r\n  }\n\n  interval = setInterval(() => {\r\n    this.a = this.rand() * 10 - this.rand();\r\n    this.b = this.rand() * 14 - this.rand();\r\n    this.c = this.rand() * 18 - this.rand();\r\n    this.d = this.rand() * 11 - this.rand();\r\n\r\n    this.trace1.y.push(this.a);\r\n    this.trace1.y.push(this.b);\r\n    this.trace1.y.push(this.c);\r\n    this.trace1.y.push(this.d);\r\n\r\n    this.trace2.y.push(this.a * 3.14);\r\n    this.trace2.y.push(this.a * 3.14);\r\n    this.trace2.y.push(this.a * 3.14);\r\n    this.trace2.y.push(this.a * 3.14);\r\n\r\n    console.log(this.a);\r\n    this.data = [this.trace1, this.trace2, this.trace3];\r\n  }, 1000);\n\n\n\n  public trace1 = {\r\n    y: [this.a, this.b, this.c, this.d],\r\n    mode: 'lines',\r\n    line: { color: '#80CAF6' },\r\n    type: 'line'\r\n  };\r\n\r\n  public trace2 = {\r\n    y: [this.a, this.b, this.c, this.d],\r\n    mode: 'lines',\r\n    line: { color: 'red' },\r\n    type: 'scatter'\r\n  };\r\n\r\n  public trace3 = {\r\n    x: [1, 2, 3, 1300],\r\n    mode: 'lines+markers',\r\n    type: 'scatter'\r\n  };\r\n\r\n  public data = [this.trace1, this.trace2, this.trace3];\n}\n","<h2>{{ title }}</h2>\r\n<div fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n  <div fxFlex=\"50\">\r\n    <svg #svg id=\"svg\" style=\"height:100%; width:100%;\"></svg>\r\n  </div>\r\n  <div fxFlex=\"50\" fxLayout=\"column\">\r\n\r\n    <plotly-plot [data]=\"graph.data\" [layout]=\"graph.layout\"></plotly-plot>\r\n\r\n    <h5>Input: {{graph.data[0].y[0]}}</h5>\r\n    <input type=\"number\" pInputText [(ngModel)]=\"graph.data[0].y[0]\" />\r\n    <p-slider [(ngModel)]=\"graph.data[0].y[0]\"></p-slider>\r\n    <plotly-plot [data]=\"data\"></plotly-plot>\r\n\r\n\r\n  </div>\r\n</div>\r\n","<!--wip-->\r\n<div fxLayout=\"row\" fxLayoutAlign=\"space-between start\" fxFlexFill>\r\n  <div fxFlex=\"66\" class=\"node duoTone\">\r\n    <h5>Start Speech Commands</h5>\r\n    <h1 class=\"db-readout\"><!--h1 container for DB readout--></h1>\r\n    <h1><!--h1 container for Volume Warning readout--></h1>\r\n    <svg *ngIf=\"!configureCommands\" preserveAspectRatio=\"none\" id=\"visualizer\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n      <defs>\r\n        <mask id=\"mask\">\r\n          <g id=\"maskGroup\"></g>\r\n        </mask>\r\n        <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n          <stop offset=\"0%\" style=\"stop-color:#db6247;stop-opacity:1\" />\r\n          <stop offset=\"40%\" style=\"stop-color:#f6e5d1;stop-opacity:1\" />\r\n          <stop offset=\"60%\" style=\"stop-color:#5c79c7;stop-opacity:1\" />\r\n          <stop offset=\"85%\" style=\"stop-color:#b758c0;stop-opacity:1\" />\r\n          <stop offset=\"100%\" style=\"stop-color:#222;stop-opacity:1\" />\r\n        </linearGradient>\r\n      </defs>\r\n      <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"url(#gradient)\" mask=\"url(#mask)\"></rect>\r\n    </svg>\r\n    <div class=\"start-stop\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n      <div>\r\n        <label>Probability threshold:</label>\r\n        <input [(ngModel)]=\"probaThresholdInput\" size=\"5\">\r\n      </div>\r\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <div id=\"result\" style=\"padding:5px;\"></div>\r\n        <button #startButton (click)=\"start()\" [disabled]=\"isStartBtnDisabled\">Start</button>\r\n        <button #stopButton (click)=\"stop()\" [disabled]=\"isStopBtnDisabled\">Stop</button>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <div class='main-model'>\r\n      <div #candidateWordsContainer class=\"candidate-words-hidden\" id=\"candidate-words\"></div>\r\n    </div>\r\n    <plotly-plot *ngIf=\"roc\" id=\"roc-plot\" [data]=\"roc.data\" [layout]=\"roc.layout\" class=\"plots\"></plotly-plot>\r\n    <plotly-plot *ngIf=\"precision\" id=\"loss-plot\" [data]=\"precision.estimates\" [layout]=\"precision.layout\" class=\"plots\"></plotly-plot>\r\n  </div>\r\n\r\n  <div fxFlex=\"33\" class=\"node\" fxLayout=\"column\" fxFlexGap=\"20px\">\r\n    <h5>Create New Custom Configured Speech Commands</h5>\r\n    <button (click)=\"createNewSpeachCommands()\" ySpace>Create New Speech Commands</button>\r\n    <div [hidden]=\"preTrained\">\r\n      <h5>Load Pretrained Models</h5>\r\n\r\n      <div fxLayout=\"column\" fxLayoutGap=\"20px\">\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n          <select #savedTransferModelsSelect id=\"saved-transfer-models\" fxFlex=\"75\">\r\n            <option value=\"1\"></option>\r\n          </select>\r\n          <button [textContent]=\"loadTransferModelButtonTextContent\" (click)=\"loadTransferModel()\" [disabled]=\"isLoadTransferModelBtnDisabled\"></button>\r\n          <button [textContent]=\"deleteTransferModelButtonTextContent\" (click)=\"deleteTransferModel()\" [disabled]=\"isDeleteTransferModelBtnDisabled\">Delete</button>\r\n        </div>\r\n\r\n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" spaceInputs>\r\n          <span>Epochs:</span>\r\n          <input [(ngModel)]=\"epochsInput\" fxFlex=\"10\">\r\n          <span>Fine-tuning (FT) epochs:</span>\r\n          <input [(ngModel)]=\"fineTuningEpochsInput\" fxFlex=\"10\">\r\n          <span>Augment by mixing noise:</span>\r\n          <input type=\"checkbox\" id=\"augment-by-mixing-noise\">\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"drag-block-lg footer\"\r\n     [ngDraggable]=\"draggable\"\r\n     [position]=\"position\"\r\n     [zIndex]=\"zIndex\"\r\n     [zIndexMoving]=\"zIndexMoving\"\r\n     [preventDefaultEvent]=\"preventDefaultEvent\"\r\n     [trackPosition]=\"trackPosition\">\r\n  <span class=\"dragger\">Draggable</span>\r\n  <div #statusDisplay id=\"status-display\">  </div>\r\n</div>\r\n\r\n<div *ngIf=\"configureCommands\" class=\"overlay\"></div>\r\n<div *ngIf=\"configureCommands\" class=\"configureCommands\">\r\n  <h5 class=\"header \" fxLayout=\"row\" fxLayoutAlign=\"space-between\">\r\n    Configure New Speech Commands\r\n    <div class=\"pos\">\r\n      <button class=\"allowed\" [textContent]=\"startTransferLearnButtonTextContent\" #startTransferLearnButton (click)=\"startTransferLearn(); showCharts = !showCharts\" disabled>Start transfer learning</button>\r\n      <button [textContent]=\"saveTransferModelButtonTextContent\" (click)=\"saveTransferModel()\" [disabled]=\"isSaveTransferModelBtnDisabled\" [ngClass]=\"{'allowed': canSaveModel}\">Save model</button>\r\n      <button #downloadAsFileButton (click)=\"downloadAsFile()\" [disabled]=\"isDownloadAsFileBtnDisabled\" >↓ Download dataset as file</button>\r\n      <button [textContent]=\"evalModelOnDatasetButtonTextContent\" id=\"eval-model-on-dataset\" (click)=\"evalModelOnDataset()\" [disabled]=\"isEvalModelOnDatasetBtnDisabled\"></button>\r\n      <button (click)=\"configureCommands = !configureCommands\">Close</button>\r\n    </div>\r\n    \r\n  </h5>\r\n  <svg preserveAspectRatio=\"none\" id=\"visualizer\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n    <defs>\r\n      <mask id=\"mask\">\r\n        <g id=\"maskGroup\"></g>\r\n      </mask>\r\n      <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n        <stop offset=\"0%\" style=\"stop-color:#db6247;stop-opacity:1\" />\r\n        <stop offset=\"40%\" style=\"stop-color:#f6e5d1;stop-opacity:1\" />\r\n        <stop offset=\"60%\" style=\"stop-color:#5c79c7;stop-opacity:1\" />\r\n        <stop offset=\"85%\" style=\"stop-color:#b758c0;stop-opacity:1\" />\r\n        <stop offset=\"100%\" style=\"stop-color:#222;stop-opacity:1\" />\r\n      </linearGradient>\r\n    </defs>\r\n    <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"url(#gradient)\" mask=\"url(#mask)\"></rect>\r\n  </svg>\r\n  <div class=\"transfer-learn-section\">\r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\" spaceInputs>\r\n      <input #transferModelNameInput size=\"20\" [(ngModel)]=\"transferModelName\" [disabled]=\"isTransferModelNameInputDisabled\" placeholder=\"model name\">\r\n      <input #learnWordsInput size=\"36\" [(ngModel)]=\"learnWords\" [disabled]=\"isLearnWordsInputDisabled\">\r\n      <select #durationMultiplierSelect id=\"duration-multiplier\" [disabled]=\"isDurationMultiplierSelectDisabled\" fxFlex=\"10\">\r\n        <option value=\"1\">Duration x1</option>\r\n        <option value=\"2\" selected=\"\">Duration x2</option>\r\n      </select>\r\n      <input #includeTimeDomainWaveformCheckbox type=\"checkbox\" id=\"include-audio-waveform\">\r\n      <span #includeTimeDomainWaveformCheckbox id=\"include-audio-waveform-label\" style=\"margin-right:5px;\">Include audio waveform</span>\r\n      <button class=\"allowed\" [textContent]=\"enterLearnWordsTextContent\" (click)=\"enterLearnWords()\" [disabled]=\"isEnterLearnWordsBtnDisabled\"></button>\r\n    </div>\r\n\r\n    <div id=\"transfer-learn-history\"></div>\r\n    <div #collectButtonsDiv id=\"collect-words\">\r\n    </div>\r\n\r\n    <div>\r\n      <input #datasetFileInput type=\"file\" id=\"dataset-file-input\" [disabled]=\"isDatasetFileInputDisabled\" style=\"margin-right:5px;\">\r\n      <button [textContent]=\"uploadFilesButtonTextContent\" id=\"upload-dataset\" (click)=\"uploadFiles()\" [disabled]=\"isUploadFilesBtnDisabled\">↑ Upload dataset</button>\r\n    </div>\r\n\r\n    <div id=\"plots\" *ngIf=\"showCharts\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\r\n\r\n      <!--{{graphTrainLoss.trainLossValuesCollection | json}}-->\r\n      <plotly-plot *ngIf=\"graphTrainLoss\" id=\"loss-plot\" [data]=\"graphTrainLoss.trainLossValuesCollection\" [layout]=\"graphTrainLoss.layout\" class=\"plots\"></plotly-plot>\r\n      <plotly-plot *ngIf=\"graphAccuracy\" id=\"accuracy-plot\" [data]=\"graphAccuracy.accuracyValuesCollection\" [layout]=\"graphAccuracy.layout\" class=\"plots\"></plotly-plot>\r\n      <div>\r\n        <div>\r\n          <span [textContent]=\"evalResultsSpan\" id=\"eval-results\" class=\"eval-results\"></span>\r\n        </div>\r\n        <!--<plotly-plot id=\"roc-plot\" [data]=\"roc.data\" [layout]=\"roc.layout\" class=\"plots\"></plotly-plot>-->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component,  AfterViewInit,  ViewChild, Renderer2 } from '@angular/core';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport * as SpeechCommands from './src';\r\nimport { DatasetViz, removeNonFixedChildrenFromWordDiv } from './dataset-vis.js';\r\nimport { BACKGROUND_NOISE_TAG, UNKNOWN_TAG } from './src';\r\nimport { NotificationsService } from 'angular2-notifications';\r\n@Component({\r\n  selector: 'app-speech-ai',\r\n  templateUrl: './speech-ai.component.html',\r\n  styleUrls: ['./speech-ai.component.scss']\r\n})\r\nexport class SpeechCommandComponent implements AfterViewInit {\r\n  recognizer;\r\n  plotPrediction;\r\n  transferWords;\r\n  transferRecognizer;\r\n  datasetViz;\r\n  dataFile;\r\n  transferDurationMultiplier;\r\n  collectWordButtons = {};\r\n  candidateWordSpans;\r\n  learnWords: string = \"_background_noise_,red,green\";\r\n  transferModelName;\r\n  epochsInput = 100;\r\n  fineTuningEpochsInput = 0;\r\n  probaThresholdInput = .75;\r\n  enterLearnWordsTextContent = \"Prepare collection and record commands\";\r\n  loadTransferModelButtonTextContent = \"Load\";\r\n  saveTransferModelButtonTextContent = \"Save model\";\r\n  deleteTransferModelButtonTextContent = \"Delete\";\r\n  evalModelOnDatasetButtonTextContent = \"Evaluate model on dataset\";\r\n  uploadFilesButtonTextContent = \"↑ Upload dataset\";\r\n  startTransferLearnButtonTextContent = \"Start transfer learning\";\r\n  evalResultsSpan = \"\";\r\n  epochs = this.epochsInput;\r\n  fineTuningEpochs = this.fineTuningEpochsInput;\r\n  epoch;\r\n  loss;\r\n  acc;\r\n  val_loss;\r\n  val_acc;\r\n  phase;\r\n  showCharts: boolean;\r\n  precision :any;\r\n  graphTrainLoss :any;\r\n  graphAccuracy: any;\r\n  prediction: string;\r\n  trainLossValues = [];\r\n  valLossValues = [];\r\n  trainAccValues = [];\r\n  valAccValues = [];\r\n  roc: any;\r\n  draggable = true;\r\n  useHandle = false;\r\n  zIndex = 120000;\r\n  zIndexMoving;\r\n  preventDefaultEvent = false;\r\n  trackPosition = true;\r\n  position;\r\n  isStopBtnDisabled: boolean;\r\n  isStartBtnDisabled: boolean;\r\n  isEnterLearnWordsBtnDisabled: boolean;\r\n  isLoadTransferModelBtnDisabled: boolean;\r\n  isDeleteTransferModelBtnDisabled: boolean = true;\r\n  isSaveTransferModelBtnDisabled: boolean = true;\r\n  isTransferModelNameInputDisabled: boolean;\r\n  isLearnWordsInputDisabled: boolean;\r\n  isDurationMultiplierSelectDisabled: boolean;\r\n  isStartTransferLearnBtnDisabled: boolean;\r\n  isEvalModelOnDatasetBtnDisabled: boolean = true;\r\n  isDatasetFileInputDisabled: boolean;\r\n  isUploadFilesBtnDisabled: boolean;\r\n  configureCommands: boolean;\r\n  canSaveModel: boolean;\r\n  preTrained: boolean;\r\n  isDownloadAsFileBtnDisabled: boolean = true;\r\n\r\n  @ViewChild('downloadAsFileButton', { static: false }) downloadAsFileButton: any;\r\n  @ViewChild('startTransferLearnButton', { static: false }) startTransferLearnButton: any;\r\n  @ViewChild('collectButtonsDiv', { static: false }) collectButtonsDiv: any;\r\n  @ViewChild('includeTimeDomainWaveformCheckbox', { static: false }) includeTimeDomainWaveformCheckbox: any;\r\n  @ViewChild('datasetFileInput', { static: false }) datasetFileInput: any;\r\n  @ViewChild('durationMultiplierSelect', { static: false }) durationMultiplierSelect: any;\r\n  @ViewChild('savedTransferModelsSelect', { static: false }) savedTransferModelsSelect: any;\r\n  @ViewChild('predictionCanvas', { static: false }) predictionCanvas: any;\r\n\r\n  XFER_MODEL_NAME = 'xfer-model';\r\n  // Minimum required number of examples per class for transfer learning.\r\n  MIN_EXAMPLES_PER_CLASS = 8;\r\n  BACKGROUND_NOISE_TAG = SpeechCommands.BACKGROUND_NOISE_TAG;\r\n  constructor(private renderer: Renderer2, private _notifications: NotificationsService) {\r\n    //Check if broser is private, Speech commands will not work in private mode\r\n    function retry(isDone, next) {\r\n      var current_trial = 0,\r\n        max_retry = 50,\r\n        interval = 10,\r\n        is_timeout = false;\r\n      var id = window.setInterval(\r\n        function () {\r\n          if (isDone()) {\r\n            window.clearInterval(id);\r\n            next(is_timeout);\r\n          }\r\n          if (current_trial++ > max_retry) {\r\n            window.clearInterval(id);\r\n            is_timeout = true;\r\n            next(is_timeout);\r\n          }\r\n        },\r\n        10\r\n      );\r\n    }\r\n    function isIE10OrLater(user_agent) {\r\n      var ua = user_agent.toLowerCase();\r\n      if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {\r\n        return false;\r\n      }\r\n      var match = /(?:msie|rv:)\\s?([\\d\\.]+)/.exec(ua);\r\n      if (match && parseInt(match[1], 10) >= 10) {\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    function detectPrivateMode(callback) {\r\n      var is_private;\r\n\r\n      if ((window as any).webkitRequestFileSystem) {\r\n        (window as any).webkitRequestFileSystem(\r\n          (window as any).TEMPORARY, 1,\r\n          function () {\r\n            is_private = false;\r\n          },\r\n          function (e) {\r\n            console.log(e);\r\n            is_private = true;\r\n          }\r\n        );\r\n      } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {\r\n        var db;\r\n        try {\r\n          db = window.indexedDB.open('test');\r\n        } catch (e) {\r\n          is_private = true;\r\n        }\r\n\r\n        if (typeof is_private === 'undefined') {\r\n          retry(\r\n            function isDone() {\r\n              return db.readyState === 'done' ? true : false;\r\n            },\r\n            function next(is_timeout) {\r\n              if (!is_timeout) {\r\n                is_private = db.result ? false : true;\r\n              }\r\n            }\r\n          );\r\n        }\r\n      } else if (isIE10OrLater(window.navigator.userAgent)) {\r\n        is_private = false;\r\n        try {\r\n          if (!window.indexedDB) {\r\n            is_private = true;\r\n          }\r\n        } catch (e) {\r\n          is_private = true;\r\n        }\r\n      } else if (window.localStorage && /Safari/.test(window.navigator.userAgent)) {\r\n        try {\r\n          (window as any).localStorage.setItem('test', 1);\r\n        } catch (e) {\r\n          is_private = true;\r\n        }\r\n\r\n        if (typeof is_private === 'undefined') {\r\n          is_private = false;\r\n          window.localStorage.removeItem('test');\r\n        }\r\n      }\r\n\r\n      retry(\r\n        function isDone() {\r\n          return typeof is_private !== 'undefined' ? true : false;\r\n        },\r\n        function next(is_timeout) {\r\n          callback(is_private);\r\n        }\r\n      );\r\n    }\r\n    detectPrivateMode(\r\n      function (is_private) {\r\n        var msg = document.getElementById('result').innerHTML\r\n          = typeof is_private === 'undefined' ? 'cannot detect' : is_private ?\r\n            '<div style=\"background: #fff; border-radius:5px; padding:5px; margin: 0 5px; font-size:10px;\"><span style=\"margin-top:3px;\">👻</span> Private browser detected. Speech commands is unable to load preloaded dataset in a private window. </span>' : '</span>';\r\n      }\r\n     \r\n    );\r\n\r\n  }\r\n\r\n  async ngAfterViewInit() {\r\n\r\n    console.log('loading');\r\n    this.logToStatusDisplay('Creating recognizer...');\r\n    this.recognizer = SpeechCommands.create('BROWSER_FFT');\r\n\r\n    await this.populateSavedTransferModelsSelect();\r\n    console.log('Sucessfully loaded model', this.populateSavedTransferModelsSelect());\r\n    if (this.savedTransferModelsSelect.nativeElement.length > 0) {\r\n      this.preTrained = false;\r\n    }\r\n    \r\n    // Make sure the tf.Model is loaded through HTTP. If this is not\r\n    // called here, the tf.Model will be loaded the first time\r\n    // `listen()` is called.\r\n    this.recognizer.ensureModelLoaded()\r\n      .then(() => {\r\n        this.isStartBtnDisabled = false;//this.startButton.disabled = false;\r\n        this.isStopBtnDisabled = true; //this.stopButton.disabled = true;\r\n        this.isEnterLearnWordsBtnDisabled = false;//this.enterLearnWordsButton.disabled = false;\r\n        this.isLoadTransferModelBtnDisabled = false;//this.loadTransferModelButton.disabled = false;\r\n        this.isDeleteTransferModelBtnDisabled = false;//this.deleteTransferModelButton.disabled = false;\r\n\r\n        this.transferModelName = `model-${this.getDateString()}`;\r\n\r\n        this.logToStatusDisplay('Model loaded.');\r\n\r\n        const params = this.recognizer.params();\r\n        this.logToStatusDisplay(`sampleRateHz: ${params.sampleRateHz}`);\r\n        this.logToStatusDisplay(`fftSize: ${params.fftSize}`);\r\n        this.logToStatusDisplay(\r\n          `spectrogramDurationMillis: ` +\r\n          `${params.spectrogramDurationMillis.toFixed(2)}`);\r\n        this.logToStatusDisplay(\r\n          `tf.Model input shape: ` +\r\n          `${JSON.stringify(this.recognizer.modelInputShape())}`);\r\n        if (this.savedTransferModelsSelect.nativeElement.length === 0) {\r\n          this.isLoadTransferModelBtnDisabled = true;\r\n          this.isDeleteTransferModelBtnDisabled = true;\r\n        }\r\n        \r\n      })\r\n      .catch(err => {\r\n        this.logToStatusDisplay(\r\n          'Failed to load model for recognizer: ' + err.message);\r\n      });\r\n  }\r\n\r\n  async populateSavedTransferModelsSelect() {\r\n    const savedModelKeys = await SpeechCommands.listSavedTransferModels();\r\n    while (this.savedTransferModelsSelect.nativeElement.firstChild) {\r\n      this.savedTransferModelsSelect.nativeElement.removeChild(this.savedTransferModelsSelect.nativeElement.firstChild);\r\n    }\r\n    if (savedModelKeys.length > 0) {\r\n      for (const key of savedModelKeys) {\r\n        const option = document.createElement('option');\r\n        option.textContent = key;\r\n        option.id = key;\r\n        this.savedTransferModelsSelect.nativeElement.appendChild(option);\r\n      }\r\n      this.isLoadTransferModelBtnDisabled = false;\r\n    }\r\n  }\r\n\r\n  async saveTransferModel() {\r\n    await this.transferRecognizer.save();\r\n    await this.populateSavedTransferModelsSelect();\r\n    this.saveTransferModelButtonTextContent = 'Model saved!';\r\n    this.isSaveTransferModelBtnDisabled = true;\r\n  }\r\n\r\n  async loadTransferModel() {\r\n    const transferModelName = this.savedTransferModelsSelect.nativeElement.value;\r\n    await this.recognizer.ensureModelLoaded();\r\n    this.transferRecognizer = this.recognizer.createTransfer(transferModelName);\r\n    await this.transferRecognizer.load();\r\n    this.transferModelName = transferModelName;\r\n    this.isTransferModelNameInputDisabled = true; //this.transferModelNameInput.disabled = true;\r\n    \r\n    this.learnWords = this.transferRecognizer.wordLabels().join(',');\r\n    this.isLearnWordsInputDisabled = true; //this.learnWordsInput.disabled = true;\r\n    this.isDurationMultiplierSelectDisabled = true;//this.durationMultiplierSelect.disabled = true;\r\n    this.isEnterLearnWordsBtnDisabled = true;//this.enterLearnWordsButton.disabled = true;\r\n    this.isSaveTransferModelBtnDisabled = true;//this.saveTransferModelButton.disabled = true;\r\n    this.isLoadTransferModelBtnDisabled = true;//this.loadTransferModelButton.disabled = true;\r\n    this.loadTransferModelButtonTextContent = 'Model loaded!';\r\n  }\r\n\r\n  async deleteTransferModel() {\r\n    const transferModelName = this.savedTransferModelsSelect.nativeElement.value;\r\n    await this.recognizer.ensureModelLoaded();\r\n    this.transferRecognizer = this.recognizer.createTransfer(transferModelName);\r\n    await SpeechCommands.deleteSavedTransferModel(transferModelName);\r\n    \r\n    this.deleteTransferModelButtonTextContent = `Deleted \"${transferModelName}\"`;\r\n    await this.populateSavedTransferModelsSelect();\r\n  }\r\n\r\n  async loadDatasetInTransferRecognizer(serialized) {\r\n    const modelName = this.transferModelName;\r\n    if (modelName == null || modelName.length === 0) {\r\n      throw new Error('Need model name!');\r\n    }\r\n\r\n    if (this.transferRecognizer == null) {\r\n      this.transferRecognizer = this.recognizer.createTransfer(modelName);\r\n    }\r\n    this.transferRecognizer.loadExamples(serialized);\r\n    const exampleCounts = this.transferRecognizer.countExamples();\r\n    this.transferWords = [];\r\n    const modelNumFrames = this.transferRecognizer.modelInputShape()[1];\r\n    const durationMultipliers = [];\r\n    for (const word in exampleCounts) {\r\n      this.transferWords.push(word);\r\n      const examples = this.transferRecognizer.getExamples(word);\r\n      for (const example of examples) {\r\n        const spectrogram = example.example.spectrogram;\r\n        // Ignore _background_noise_ examples when determining the duration\r\n        // multiplier of the dataset.\r\n        if (word !== this.BACKGROUND_NOISE_TAG) {\r\n          durationMultipliers.push(Math.round(\r\n            spectrogram.data.length / spectrogram.frameSize / modelNumFrames));\r\n        }\r\n      }\r\n    }\r\n    this.transferWords.sort();\r\n    this.learnWords = this.transferWords.join(',');\r\n\r\n    // Determine the transferDurationMultiplier value from the dataset.\r\n    this.transferDurationMultiplier =\r\n      durationMultipliers.length > 0 ? Math.max(...durationMultipliers) : 1;\r\n    console.log(\r\n      `Deteremined transferDurationMultiplier from uploaded ` +\r\n      `dataset: ${this.transferDurationMultiplier}`);\r\n\r\n    this.createWordDivs(this.transferWords);\r\n    this.datasetViz.redrawAll();\r\n  }\r\n\r\n  async startTransferLearn() {\r\n    this.isStartTransferLearnBtnDisabled = true; //this.startTransferLearnButton.disabled = true;\r\n    this.isStartBtnDisabled = true;\r\n    const INITIAL_PHASE = 'initial';\r\n    const FINE_TUNING_PHASE = 'fineTuningPhase';\r\n    this.startTransferLearnButtonTextContent = 'Transfer learning starting...';\r\n    await tf.nextFrame();\r\n\r\n    this.epochs = this.epochsInput;\r\n    this.fineTuningEpochs = this.fineTuningEpochsInput;\r\n    this.disableAllCollectWordButtons();\r\n    var augmentByMixingNoiseRatioCheckbox = document.getElementById('augment-by-mixing-noise') as HTMLInputElement;\r\n    var augmentByMixingNoiseRatio;  //.checked ? 0.5 : null;\r\n    if (augmentByMixingNoiseRatioCheckbox.checked) { augmentByMixingNoiseRatio = .5 } else { augmentByMixingNoiseRatio = null}\r\n    console.log(`augmentByMixingNoiseRatio = ${augmentByMixingNoiseRatio}`);\r\n    let epochs = this.epochs;\r\n    let fineTuningEpochs = this.fineTuningEpochs;\r\n    for (const phase of [INITIAL_PHASE, FINE_TUNING_PHASE]) {\r\n      const phaseSuffix = phase === FINE_TUNING_PHASE ? ' (FT)' : '';\r\n      const lineWidth = phase === FINE_TUNING_PHASE ? 2 : 1;\r\n      this.trainLossValues[phase] = {\r\n        x: [],\r\n        y: [],\r\n        name: 'train' + phaseSuffix,\r\n        mode: 'lines+markers',\r\n        line: { width: lineWidth }\r\n      };\r\n      this.valLossValues[phase] = {\r\n        x: [],\r\n        y: [],\r\n        name: 'val' + phaseSuffix,\r\n        mode: 'lines+markers',\r\n        line: { width: lineWidth }\r\n      };\r\n\r\n\r\n      this.trainAccValues[phase] = {\r\n        x: [],\r\n        y: [],\r\n        name: 'train' + phaseSuffix,\r\n        mode: 'lines+markers',\r\n        line: { width: lineWidth }\r\n      };\r\n      this.valAccValues[phase] = {\r\n        x: [],\r\n        y: [],\r\n        name: 'val' + phaseSuffix,\r\n        mode: 'lines+markers',\r\n        line: { width: lineWidth }\r\n      };\r\n    }\r\n    await this.transferRecognizer.train({\r\n      epochs,\r\n      validationSplit: 0.25,\r\n      augmentByMixingNoiseRatio,\r\n      callback: {\r\n        onEpochEnd: async (epoch, logs, displayEpoch) => {\r\n          this.plotLossAndAccuracy(\r\n            epoch, logs.loss, logs.acc, logs.val_loss, logs.val_acc,\r\n            INITIAL_PHASE, displayEpoch);\r\n        }\r\n      },\r\n      fineTuningEpochs,\r\n      fineTuningCallback: {\r\n        onEpochEnd: async (epoch, logs, displayEpoch) => {\r\n          this.plotLossAndAccuracy(\r\n            epoch, logs.loss, logs.acc, logs.val_loss, logs.val_acc,\r\n            FINE_TUNING_PHASE, displayEpoch);\r\n        }\r\n      }\r\n    });\r\n    this.isSaveTransferModelBtnDisabled = false;//this.saveTransferModelButton.disabled = false;\r\n    this.transferModelName = this.transferRecognizer.name;\r\n    this.isTransferModelNameInputDisabled = true//this.transferModelNameInput.disabled = true;\r\n    this.startTransferLearnButtonTextContent = 'Transfer learning complete.';\r\n    //this.transferModelNameInput.disabled = false; ????\r\n    this.isStartBtnDisabled = false;\r\n    this.isEvalModelOnDatasetBtnDisabled = false;//this.evalModelOnDatasetButton.disabled = false;\r\n\r\n  }\r\n\r\n  plotLossAndAccuracy(epoch, loss, acc, val_loss, val_acc, phase, displayEpoch) {\r\n    const INITIAL_PHASE = 'initial';\r\n    const FINE_TUNING_PHASE = 'fineTuningPhase';\r\n    \r\n    displayEpoch = phase === FINE_TUNING_PHASE ? (epoch + this.epochs) : epoch;\r\n\r\n    this.trainLossValues[phase].x.push(displayEpoch);\r\n    this.trainLossValues[phase].y.push(loss);\r\n    this.trainAccValues[phase].x.push(displayEpoch);\r\n    this.trainAccValues[phase].y.push(acc);\r\n\r\n    this.valLossValues[phase].x.push(displayEpoch);\r\n    this.valLossValues[phase].y.push(val_loss);\r\n    this.valAccValues[phase].x.push(displayEpoch);\r\n    this.valAccValues[phase].y.push(val_acc);\r\n    this.logToStatusDisplay(val_loss)\r\n    this.logToStatusDisplay(val_acc)\r\n\r\n    this.showCharts = true;\r\n    this.graphTrainLoss = {\r\n      trainLossValuesCollection: [\r\n        this.trainLossValues[INITIAL_PHASE], this.valLossValues[INITIAL_PHASE],\r\n        this.trainLossValues[FINE_TUNING_PHASE], this.valLossValues[FINE_TUNING_PHASE]\r\n      ],\r\n      layout: {\r\n        width: 759,\r\n        height: 300,\r\n        xaxis: { title: 'Epoch #' },\r\n        yaxis: { title: 'Loss' },\r\n        font: { size: 18, color: \"#fff\" },\r\n        plot_bgcolor: \"black\",\r\n        paper_bgcolor: \"transparent\"\r\n      }\r\n    };\r\n\r\n    this.graphAccuracy = {\r\n      accuracyValuesCollection: [\r\n        this.trainAccValues[INITIAL_PHASE], this.valAccValues[INITIAL_PHASE],       \r\n        this.trainAccValues[FINE_TUNING_PHASE], this.valAccValues[FINE_TUNING_PHASE]\r\n      ],\r\n      layout: {\r\n        width: 759,\r\n        height: 300,\r\n        xaxis: { title: 'Epoch #' },\r\n        yaxis: { title: 'Accuracy' },\r\n        font: { size: 18, color: \"#fff\" },\r\n        plot_bgcolor: \"black\",\r\n        paper_bgcolor: \"transparent\"\r\n      }\r\n    };\r\n    \r\n    this.startTransferLearnButtonTextContent = phase === INITIAL_PHASE ?\r\n      `Transfer-learning... (${(epoch / this.epochs * 1e2).toFixed(0)}%)` :\r\n      `Transfer-learning (fine-tuning)... (${(epoch / this.fineTuningEpochs * 1e2).toFixed(0)}%)`;\r\n\r\n    if (epoch === 99) {\r\n      this.canSaveModel = true;\r\n      this.preTrained = false;\r\n      this.isDownloadAsFileBtnDisabled = false;\r\n      this.isEvalModelOnDatasetBtnDisabled = false;\r\n    }\r\n  }\r\n\r\n  async plotSpectrogram(\r\n    canvas, frequencyData, fftSize, fftDisplaySize, config) {\r\n    if (fftDisplaySize == null) {\r\n      fftDisplaySize = fftSize;\r\n    }\r\n    if (config == null) {\r\n      config = {};\r\n    }\r\n\r\n    // Get the maximum and minimum.\r\n    let min = Infinity;\r\n    let max = -Infinity;\r\n    for (let i = 0; i < frequencyData.length; ++i) {\r\n      const x = frequencyData[i];\r\n      if (x !== -Infinity) {\r\n        if (x < min) {\r\n          min = x;\r\n        }\r\n        if (x > max) {\r\n          max = x;\r\n        }\r\n      }\r\n    }\r\n    if (min >= max) {\r\n      return;\r\n    }\r\n\r\n    const context = canvas.getContext('2d');\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    const numFrames = frequencyData.length / fftSize;\r\n    if (config.pixelsPerFrame != null) {\r\n      let realWidth = Math.round(config.pixelsPerFrame * numFrames);\r\n      if (config.maxPixelWidth != null && realWidth > config.maxPixelWidth) {\r\n        realWidth = config.maxPixelWidth;\r\n      }\r\n      canvas.width = realWidth;\r\n    }\r\n\r\n    const pixelWidth = canvas.width / numFrames;\r\n    const pixelHeight = canvas.height / fftDisplaySize;\r\n    for (let i = 0; i < numFrames; ++i) {\r\n      const x = pixelWidth * i;\r\n      const spectrum = frequencyData.subarray(i * fftSize, (i + 1) * fftSize);\r\n      if (spectrum[0] === -Infinity) {\r\n        break;\r\n      }\r\n      for (let j = 0; j < fftDisplaySize; ++j) {\r\n        const y = canvas.height - (j + 1) * pixelHeight;\r\n\r\n        let colorValue = (spectrum[j] - min) / (max - min);\r\n        colorValue = Math.pow(colorValue, 3);\r\n        colorValue = Math.round(255 * colorValue);\r\n        const fillStyle =\r\n          `rgb(${colorValue},${255 - colorValue},${255 - colorValue})`;\r\n        context.fillStyle = fillStyle;\r\n        context.fillRect(x, y, pixelWidth, pixelHeight);\r\n      }\r\n    }\r\n\r\n    if (config.markKeyFrame) {\r\n      const keyFrameIndex = config.keyFrameIndex == null ?\r\n        await SpeechCommands\r\n          .getMaxIntensityFrameIndex(\r\n            { data: frequencyData, frameSize: fftSize })\r\n          .data() :\r\n        config.keyFrameIndex;\r\n      // Draw lines to mark the maximum-intensity frame.\r\n      context.strokeStyle = 'black';\r\n      context.beginPath();\r\n      context.moveTo(pixelWidth * keyFrameIndex, 0);\r\n      context.lineTo(pixelWidth * keyFrameIndex, canvas.height * 0.1);\r\n      context.stroke();\r\n      context.beginPath();\r\n      context.moveTo(pixelWidth * keyFrameIndex, canvas.height * 0.9);\r\n      context.lineTo(pixelWidth * keyFrameIndex, canvas.height);\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    const activeRecognizer = this.transferRecognizer == null ? this.recognizer : this.transferRecognizer;\r\n    this.populateCandidateWords(activeRecognizer.wordLabels());\r\n    this.logToStatusDisplay('Words Loaded:' + this.recognizer.wordLabels())\r\n    console.log(this.recognizer.wordLabels());\r\n    console.log(activeRecognizer.wordLabels());\r\n    const suppressionTimeMillis = 1000;\r\n    activeRecognizer\r\n      .listen(\r\n        result => {\r\n          this.plotPredictions(\r\n            this.predictionCanvas, activeRecognizer.wordLabels(), result.scores,\r\n            3, suppressionTimeMillis);\r\n        },\r\n        {\r\n          includeSpectrogram: true,\r\n          suppressionTimeMillis,\r\n          probabilityThreshold: this.probaThresholdInput\r\n        })\r\n      .then(() => {\r\n        this.isStartBtnDisabled = true;\r\n        this.isStopBtnDisabled = false;\r\n        this.showCandidateWords();\r\n        this.logToStatusDisplay('Streaming recognition started.');\r\n      })\r\n      .catch(err => {\r\n        this.logToStatusDisplay(\r\n          'ERROR: Failed to start streaming display: ' + err.message);\r\n      });\r\n\r\n    \r\n  }\r\n\r\n  stop() {\r\n    const activeRecognizer =\r\n      this.transferRecognizer == null ? this.recognizer : this.transferRecognizer;\r\n    activeRecognizer.stopListening()\r\n      .then(() => {\r\n        this.isStartBtnDisabled = false;\r\n        this.isStopBtnDisabled = true;\r\n        this.hideCandidateWords();\r\n        this.logToStatusDisplay('Streaming recognition stopped.');\r\n      })\r\n      .catch(err => {\r\n        this.logToStatusDisplay(\r\n          'ERROR: Failed to stop streaming display: ' + err.message);\r\n      });\r\n  }\r\n\r\n  /** Get the base name of the downloaded files based on current dataset. */\r\n  getDateString() {\r\n    const d = new Date();\r\n    const year = `${d.getFullYear()}`;\r\n    let month = `${d.getMonth() + 1}`;\r\n    let day = `${d.getDate()}`;\r\n    if (month.length < 2) {\r\n      month = `0${month}`;\r\n    }\r\n    if (day.length < 2) {\r\n      day = `0${day}`;\r\n    }\r\n    let hour = `${d.getHours()}`;\r\n    if (hour.length < 2) {\r\n      hour = `0${hour}`;\r\n    }\r\n    let minute = `${d.getMinutes()}`;\r\n    if (minute.length < 2) {\r\n      minute = `0${minute}`;\r\n    }\r\n    let second = `${d.getSeconds()}`;\r\n    if (second.length < 2) {\r\n      second = `0${second}`;\r\n    }\r\n    return `${year}-${month}-${day}T${hour}.${minute}.${second}`;\r\n  }\r\n\r\n  scrollToPageBottom() {\r\n    const scrollingElement = (document.scrollingElement || document.body);\r\n    scrollingElement.scrollTop = scrollingElement.scrollHeight;\r\n  }\r\n\r\n  disableAllCollectWordButtons() {\r\n    for (const word in this.collectWordButtons) {\r\n      this.collectWordButtons[word].disabled = true;\r\n    }\r\n  }\r\n\r\n  createProgressBarAndIntervalJob(parentElement, durationSec) {\r\n    const progressBar = document.createElement('progress');\r\n    progressBar.value = 0;\r\n    progressBar.style['width'] = `${Math.round(window.innerWidth * 0.25)}px`;\r\n    // Update progress bar in increments.\r\n    const intervalJob = setInterval(() => {\r\n      progressBar.value += 0.05;\r\n    }, durationSec * 1e3 / 20);\r\n    parentElement.appendChild(progressBar);\r\n    return { progressBar, intervalJob };\r\n  }\r\n\r\n  createWordDivs(transferWords) {\r\n    // Clear collectButtonsDiv first.\r\n    while (this.collectButtonsDiv.firstChild) {\r\n      this.collectButtonsDiv.removeChild(this.collectButtonsDiv.firstChild);\r\n    }\r\n    this.datasetViz = new DatasetViz(\r\n      this.transferRecognizer, this.collectButtonsDiv, this.MIN_EXAMPLES_PER_CLASS,\r\n      this.startTransferLearnButton, this.downloadAsFileButton,\r\n      this.transferDurationMultiplier);\r\n\r\n    const wordDivs = {};\r\n    for (const word of transferWords) {\r\n      const wordDiv = document.createElement('div');\r\n      wordDiv.classList.add('word-div');\r\n      wordDivs[word] = wordDiv;\r\n      wordDiv.setAttribute('word', word);\r\n      const button = document.createElement('button');\r\n      button.setAttribute('isFixed', 'true');\r\n      button.style['display'] = 'inline-block';\r\n      button.style['vertical-align'] = 'middle';\r\n\r\n      const displayWord = word === this.BACKGROUND_NOISE_TAG ? 'noise' : word;\r\n\r\n      button.textContent = `${displayWord} (0)`;\r\n      wordDiv.appendChild(button);\r\n      wordDiv.className = 'transfer-word';\r\n      this.renderer.appendChild(this.collectButtonsDiv.nativeElement, wordDiv);\r\n      //this.collectButtonsDiv.appendChild(wordDiv);\r\n      this.collectWordButtons[word] = button;\r\n\r\n      let durationInput;\r\n      if (word === this.BACKGROUND_NOISE_TAG) {\r\n        // Create noise duration input.\r\n        durationInput = document.createElement('input');\r\n        durationInput.setAttribute('isFixed', 'true');\r\n        durationInput.value = '10';\r\n        durationInput.style['width'] = '100px';\r\n        \r\n        // Create time-unit span for noise duration.\r\n        const timeUnitSpan = document.createElement('span');\r\n        timeUnitSpan.setAttribute('isFixed', 'true');\r\n        timeUnitSpan.classList.add('settings');\r\n        timeUnitSpan.style['vertical-align'] = 'middle';\r\n        timeUnitSpan.textContent = ' Number of seconds to record ';\r\n\r\n        wordDiv.appendChild(timeUnitSpan);\r\n        wordDiv.appendChild(durationInput);\r\n      }\r\n\r\n      button.addEventListener('click', async () => {\r\n        this.disableAllCollectWordButtons();\r\n        removeNonFixedChildrenFromWordDiv(wordDiv);\r\n\r\n        let collectExampleOptions = <any>{};\r\n        let durationSec;\r\n        let intervalJob;\r\n        let progressBar;\r\n\r\n        if (word === this.BACKGROUND_NOISE_TAG) {\r\n          // If the word type is background noise, display a progress bar during\r\n          // sound collection and do not show an incrementally updating\r\n          // spectrogram.\r\n          // _background_noise_ examples are special, in that user can specify\r\n          // the length of the recording (in seconds).\r\n          collectExampleOptions.durationSec = Number.parseFloat(durationInput.value);\r\n          durationSec = collectExampleOptions.durationSec;\r\n\r\n          const barAndJob = this.createProgressBarAndIntervalJob(wordDiv, durationSec);\r\n          progressBar = barAndJob.progressBar;\r\n          intervalJob = barAndJob.intervalJob;\r\n        } else {\r\n          // If this is not a background-noise word type and if the duration\r\n          // multiplier is >1 (> ~1 s recoding), show an incrementally\r\n          // updating spectrogram in real time.\r\n          collectExampleOptions.durationMultiplier = this.transferDurationMultiplier;\r\n          let tempSpectrogramData;\r\n          const tempCanvas = document.createElement('canvas');\r\n          tempCanvas.style['margin-left'] = '132px';\r\n          tempCanvas.height = 50;\r\n          wordDiv.appendChild(tempCanvas);\r\n\r\n          collectExampleOptions.snippetDurationSec = 0.1;\r\n          collectExampleOptions.onSnippet = async (spectrogram) => {\r\n            if (tempSpectrogramData == null) {\r\n              tempSpectrogramData = spectrogram.data;\r\n            } else {\r\n              tempSpectrogramData = SpeechCommands.utils.concatenateFloat32Arrays(\r\n                [tempSpectrogramData, spectrogram.data]);\r\n            }\r\n            this.plotSpectrogram(\r\n              tempCanvas, tempSpectrogramData, spectrogram.frameSize,\r\n              spectrogram.frameSize, { pixelsPerFrame: 2 });\r\n          }\r\n        }\r\n\r\n        collectExampleOptions.includeRawAudio = this.includeTimeDomainWaveformCheckbox.nativeElement.checked;\r\n        const spectrogram = await this.transferRecognizer.collectExample(word, collectExampleOptions);\r\n\r\n\r\n        if (intervalJob != null) {\r\n          clearInterval(intervalJob);\r\n        }\r\n        if (progressBar != null) {\r\n          wordDiv.removeChild(progressBar);\r\n        }\r\n        const examples = this.transferRecognizer.getExamples(word)\r\n        const example = examples[examples.length - 1];\r\n        await this.datasetViz.drawExample(\r\n          wordDiv, word, spectrogram, example.example.rawAudio, example.uid);\r\n        this.enableAllCollectWordButtons();\r\n      });\r\n    }\r\n    return wordDivs;\r\n  }\r\n\r\n  enableAllCollectWordButtons() {\r\n    for (const word in this.collectWordButtons) {\r\n      this.collectWordButtons[word].disabled = false;\r\n    }\r\n  }\r\n\r\n  disableFileUploadControls() {\r\n    this.isDatasetFileInputDisabled = true;//this.datasetFileInput.disabled = true;\r\n    this.isUploadFilesBtnDisabled = true;//this.uploadFilesButton.disabled = true;\r\n  }\r\n\r\n  enterLearnWords() {\r\n    const modelName = this.transferModelName;\r\n    if (modelName == null || modelName.length === 0) {\r\n      this.enterLearnWordsTextContent = 'Need model name!';\r\n      setTimeout(() => {\r\n        this.enterLearnWordsTextContent = 'Prepare collection and record commands';\r\n      }, 2000);\r\n      return;\r\n    }\r\n\r\n    // We disable the option to upload an existing dataset from files\r\n    // once the \"Enter transfer words\" button has been clicked.\r\n    // However, the user can still load an existing dataset from\r\n    // files first and keep appending examples to it.\r\n    this.disableFileUploadControls();\r\n    this.isEnterLearnWordsBtnDisabled = true;//this.enterLearnWordsButton.disabled = true;\r\n\r\n    this.transferDurationMultiplier = this.durationMultiplierSelect.nativeElement.value;\r\n\r\n    this.isLearnWordsInputDisabled = true; //this.learnWordsInput.disabled = true;\r\n    this.transferWords = this.learnWords.trim().split(',').map(w => w.trim());\r\n    this.transferWords.sort();\r\n    if (this.transferWords == null || this.transferWords.length <= 1) {\r\n      this.logToStatusDisplay('ERROR: Invalid list of transfer words.');\r\n      return;\r\n    }\r\n\r\n    this.transferRecognizer = this.recognizer.createTransfer(modelName);\r\n    this.createWordDivs(this.transferWords);\r\n  }\r\n\r\n  downloadAsFile() {\r\n    const basename = this.getDateString();\r\n    const artifacts = this.transferRecognizer.serializeExamples();\r\n\r\n    // Trigger downloading of the data .bin file.\r\n    const anchor = document.createElement('a');\r\n    anchor.download = `${basename}.bin`;\r\n    anchor.href = window.URL.createObjectURL(\r\n      new Blob([artifacts], { type: 'application/octet-stream' }));\r\n    anchor.click();\r\n  }\r\n\r\n  uploadFiles() {\r\n    const files = this.datasetFileInput.nativeElement.files;\r\n    if (files == null || files.length !== 1) {\r\n      this._notifications.error('Error', 'Choose a file, No file chosen.', Error)\r\n      throw new Error('Must select exactly one file.');\r\n    }\r\n    const datasetFileReader = new FileReader();\r\n    datasetFileReader.onload = async (event:any) => {\r\n      try {\r\n        await this.loadDatasetInTransferRecognizer(event.target.result); //datasetFileReader.result\r\n      } catch (err) {\r\n        const originalTextContent = this.uploadFilesButtonTextContent;\r\n        this.uploadFilesButtonTextContent = err.message;\r\n        console.error(err);\r\n        setTimeout(() => {\r\n          this.uploadFilesButtonTextContent = originalTextContent;\r\n        }, 2000);\r\n      }\r\n      this.durationMultiplierSelect.nativeElement.value = `${this.transferDurationMultiplier}`;\r\n      this.isDurationMultiplierSelectDisabled = true;//this.durationMultiplierSelect.disabled = true;\r\n      this.isEnterLearnWordsBtnDisabled = true; //this.enterLearnWordsButton.disabled = true;\r\n    };\r\n    datasetFileReader.onerror = () =>\r\n      console.error(`Failed to binary data from file '${this.dataFile.name}'.`);\r\n    datasetFileReader.readAsArrayBuffer(files[0]);\r\n    this.isLoadTransferModelBtnDisabled = false;\r\n  }\r\n\r\n  evalModelOnDataset() {\r\n    const files = this.datasetFileInput.nativeElement.files;\r\n    if (files == null || files.length !== 1) {\r\n      throw new Error('Must select exactly one file.');\r\n    }\r\n    this.isEvalModelOnDatasetBtnDisabled = true; //this.evalModelOnDatasetButton.disabled = true;\r\n    const datasetFileReader = new FileReader();\r\n    datasetFileReader.onload = async (event:any) => {\r\n      try {\r\n        if (this.transferRecognizer == null) {\r\n          throw new Error('There is no model!');\r\n        }\r\n        // https://stackoverflow.com/questions/35789498/new-typescript-1-8-4-build-error-build-property-result-does-not-exist-on-t\r\n        // Load the dataset and perform evaluation of the transfer\r\n        // model using the dataset.\r\n        this.transferRecognizer.loadExamples(event.target.result);\r\n        const evalResult = await this.transferRecognizer.evaluate({\r\n          windowHopRatio: 0.25,\r\n          wordProbThresholds: [\r\n            0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.5,\r\n            0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1.0\r\n          ]\r\n        });\r\n        // Plot the ROC curve.\r\n        const rocDataForPlot = {\r\n          x: [],\r\n          y: [],\r\n          type: 'scatter',\r\n          mode: 'markers',\r\n          marker: { size: 7, color: 'red' },\r\n          xaxis: {\r\n            title: 'False positive rate (FPR)', range: [0, 1]\r\n          },\r\n          yaxis: {\r\n            title: 'True positive rate (TPR)', range: [0, 1]\r\n          },\r\n          font: { size: 18 }\r\n        };\r\n        evalResult.rocCurve.forEach(item => {\r\n          rocDataForPlot.x.push(item.fpr);\r\n          rocDataForPlot.y.push(item.tpr);\r\n        });\r\n        this.roc = {\r\n          data: [\r\n            rocDataForPlot\r\n          ],\r\n          layout: { width: 360, height: 360, plot_bgcolor: \"transparent\", paper_bgcolor: \"\", title: 'Plot the ROC curve' }\r\n        };\r\n        this.evalResultsSpan = `AUC = ${evalResult.auc}`;\r\n      } catch (err) {\r\n        const originalTextContent = this.evalModelOnDatasetButtonTextContent;\r\n        this.evalModelOnDatasetButtonTextContent = err.message;\r\n        setTimeout(() => {\r\n          this.evalModelOnDatasetButtonTextContent = originalTextContent;\r\n        }, 2000);\r\n      }\r\n      this.isEvalModelOnDatasetBtnDisabled = false;//this.evalModelOnDatasetButton.disabled = false;\r\n    };\r\n    datasetFileReader.onerror = () =>\r\n      console.error(`Failed to binary data from file '${this.dataFile.name}'.`);\r\n    datasetFileReader.readAsArrayBuffer(files[0]);\r\n  }\r\n\r\n  logToStatusDisplay(message) {\r\n    const statusDisplay = <HTMLElement>document.getElementById('status-display');\r\n    const date = new Date();\r\n    if (message) {\r\n      statusDisplay.innerHTML += '<p>' + `[${date.toISOString()}] ` + message + '</p>';\r\n      statusDisplay.scrollTop = statusDisplay.scrollHeight;\r\n    }\r\n    \r\n  }\r\n\r\n  populateCandidateWords(words) {\r\n    const candidateWordsContainer = document.getElementById('candidate-words');\r\n    this.candidateWordSpans = {};\r\n    while (candidateWordsContainer.firstChild) {\r\n      candidateWordsContainer.removeChild(candidateWordsContainer.firstChild);\r\n    }\r\n\r\n    for (const word of words) {\r\n      if (word === BACKGROUND_NOISE_TAG || word === UNKNOWN_TAG) {\r\n        continue;\r\n      }\r\n      const wordSpan = document.createElement('span');\r\n      const candidateWordsContainer = document.getElementById('candidate-words');\r\n      wordSpan.textContent = word;\r\n      wordSpan.classList.add('candidate-word');\r\n      candidateWordsContainer.appendChild(wordSpan);\r\n      this.candidateWordSpans[word] = wordSpan;\r\n    }\r\n  }\r\n\r\n  showCandidateWords() {\r\n    const candidateWordsContainer = <HTMLElement>document.getElementById('candidate-words');\r\n    candidateWordsContainer.classList.remove('candidate-words-hidden');\r\n  }\r\n\r\n  hideCandidateWords() {\r\n    const candidateWordsContainer = document.getElementById('candidate-words');\r\n    candidateWordsContainer.classList.add('candidate-words-hidden');\r\n  }\r\n\r\n  plotPredictions(\r\n    canvas, candidateWords, probabilities, topK, timeToLiveMillis) {\r\n    if (topK != null) {\r\n      let wordsAndProbs = [];\r\n      for (let i = 0; i < candidateWords.length; ++i) {\r\n        wordsAndProbs.push([candidateWords[i], probabilities[i]]);\r\n      }\r\n      wordsAndProbs.sort((a, b) => (b[1] - a[1]));\r\n      wordsAndProbs = wordsAndProbs.slice(0, topK);\r\n      candidateWords = wordsAndProbs.map(item => item[0]);\r\n      probabilities = wordsAndProbs.map(item => item[1]);\r\n\r\n      // Highlight the top word.\r\n      const topWord = wordsAndProbs[0][0];\r\n      this.prediction = `${wordsAndProbs[0][1].toFixed(6)}`;\r\n      this.plotPrediction = `\"${topWord}\" (p=${wordsAndProbs[0][1].toFixed(6)}) @ ` +\r\n        new Date().toTimeString();\r\n      console.log(\r\n        `\"${topWord}\" (p=${wordsAndProbs[0][1].toFixed(6)}) @ ` +\r\n        new Date().toTimeString());\r\n      for (const word in this.candidateWordSpans) {\r\n        if (word === topWord) {\r\n          this.candidateWordSpans[word].classList.add('candidate-word-active');\r\n          if (timeToLiveMillis != null) {\r\n            setTimeout(() => {\r\n              if (this.candidateWordSpans[word]) {\r\n                this.candidateWordSpans[word].classList.remove(\r\n                  'candidate-word-active');\r\n                this.logToStatusDisplay(this.plotPrediction);\r\n                \r\n              }\r\n            }, timeToLiveMillis);\r\n          }\r\n        } else {\r\n          this.candidateWordSpans[word].classList.remove('candidate-word-active');\r\n        }\r\n      }\r\n      this.precision = {\r\n        estimates: [\r\n          {\r\n            y: [this.prediction, 1], x: [topWord, ''], width: .2, type: 'bar', marker: { color: ['blue', 'transparent'] }\r\n          }\r\n        ],\r\n        layout: {\r\n          width: 305,\r\n          height: 360,\r\n          yaxis: { title: 'Prediction' },\r\n          //xaxis: { title: this.prediction },\r\n          font: { size: 18, color: '#fff' },\r\n          plot_bgcolor: \"transparent\",\r\n          paper_bgcolor: \"transparent\"\r\n        }\r\n      };\r\n      \r\n    }\r\n  }\r\n\r\n  createNewSpeachCommands() {\r\n    this.configureCommands = true;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { D3Component } from './d3/d3.component';\r\nimport { WebcamClassifierComponent } from './webcam-classifier/webcam-classifier.component';\r\nimport { ImageClassifierComponent } from './image-classifier/image-classifier.component';\r\nimport { SentimentAnalysisComponent } from './sentiment-analysis/sentiment-analysis.component';\r\nimport { SpeechCommandComponent } from './speech-commands/speech-ai.component';\r\nimport { BlockchainComponent } from './blockchain/blockchain.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport {\r\n  OKTA_CONFIG,\r\n  OktaAuthGuard,\r\n  OktaAuthModule,\r\n  OktaCallbackComponent,\r\n} from '@okta/okta-angular';\r\nimport { LoadingGuard } from './loader/loading.guard';\r\n// https://medium.com/ngconf/animating-angular-route-transitions-ef02b871cc30?\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: HomeComponent,\r\n        canActivate: [LoadingGuard],\r\n        data: { animationState: 'One' }\r\n      },\r\n      //Loading Guard: Logged in users only...\r\n      //{ \r\n      //  path: '',\r\n      //  component: HomeComponent,\r\n      //  canActivate: [LoadingGuard],\r\n      //  data: { animationState: 'One' }\r\n      //},\r\n      {\r\n        path: 'd3',\r\n        component: D3Component,\r\n        data: { animationState: 'One' }\r\n      },\r\n      {\r\n        path: 'implicit/callback',\r\n        component: OktaCallbackComponent,\r\n        data: { animationState: 'Three' }\r\n      },\r\n      {\r\n        path: 'upload',\r\n        component: ImageClassifierComponent,\r\n        canActivate: [LoadingGuard],\r\n        data: { animationState: 'Two' }\r\n      },\r\n      {\r\n        path: 'speech-commands',\r\n        component: SpeechCommandComponent,\r\n        canActivate: [LoadingGuard],\r\n        data: { animationState: 'One' }\r\n      },\r\n      {\r\n        path: 'webcam',\r\n        component: WebcamClassifierComponent,\r\n        canActivate: [LoadingGuard],\r\n        data: { animationState: 'Two' }\r\n      },\r\n      {\r\n        path: 'sentiment',\r\n        component: SentimentAnalysisComponent,\r\n        canActivate: [LoadingGuard],\r\n        data: { animationState: 'Three' }\r\n      },\r\n      {\r\n        path: 'blockchain',\r\n        component: BlockchainComponent,\r\n        canActivate: [LoadingGuard],\r\n        data: { animationState: 'One' }\r\n      },\r\n      {\r\n        path: '**',\r\n        redirectTo: 'one'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: 'one'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}